#!/bin/bash
set -e; set -u; set -o pipefail
BLUE='\033[0;34m'; RED='\033[0;31m'; GREEN='\033[0;32m'; NC='\033[0m';
ERROR=

VENV=tests/.venv
TESTS=tests

if ! diff -q $VENV/requirements.txt $TESTS/requirements.txt; then
    python3 -m venv $VENV
    source $VENV/bin/activate
    python3 -m pip install -r $TESTS/requirements.txt
    cp $TESTS/requirements.txt $VENV/requirements.txt
else
    source $VENV/bin/activate
fi

COMMANDS=(all sparql mql unit)

CMD=all
if [[ ${1-} ]]; then
    if [[ " ${COMMANDS[*]} " =~ " $1 " ]]; then
        CMD=$1
    else
        echo "Unsupported command: \"$1\", supported commands are: ${COMMANDS[*]}"
        exit 1
    fi
fi

# Configure build and compile
cmake -B build/Debug -D CMAKE_BUILD_TYPE=Debug
cmake --build build/Debug

# Remove SPARQL tmp dir
[[ -d  $TESTS/sparql/tmp/ ]] && echo -e ${BLUE}Removing  $TESTS/sparql/tmp/${NC} && rm -r  $TESTS/sparql/tmp/

# Remove MQL tmp dir
[[ -d  $TESTS/mql/tmp/ ]] && echo -e ${BLUE}Removing  $TESTS/mql/tmp/${NC} && rm -r  $TESTS/mql/tmp/


if [[ $CMD = "all" || $CMD = "sparql" ]]; then
    printf "${BLUE}RUNNING SPARQL INTEGRATION TESTS${NC}\n"
    python3  $TESTS/sparql/scripts/test.py | tee >(sed $'s/\033[[][^A-Za-z]*m//g' >  $TESTS/sparql/test-status-last.txt) || ERROR=true
fi

if [[ $CMD = "all" || $CMD = "mql" ]]; then
    printf "${BLUE}RUNNING MQL INTEGRATION TESTS${NC}\n"
    python3  $TESTS/mql/scripts/test.py | tee >(sed $'s/\033[[][^A-Za-z]*m//g' >  $TESTS/mql/test-status-last.txt) || ERROR=true
fi

if [[ $CMD = "all" || $CMD = "unit" ]]; then
    cd build/Debug/
    printf "${BLUE}RUNNING UNIT TESTS${NC}\n"
    ctest --output-on-failure || ERROR=true
fi

if [[ $ERROR ]]; then
    echo -e "${RED}TESTS FAILED${NC}"
    exit 1
else
    echo -e "${GREEN}ALL TESTS PASSED${NC}"
    exit 0
fi
