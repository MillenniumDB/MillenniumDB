
// Generated from SparqlQueryParser.g4 by ANTLR 4.13.1


#include "SparqlQueryParserVisitor.h"

#include "SparqlQueryParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct SparqlQueryParserStaticData final {
  SparqlQueryParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SparqlQueryParserStaticData(const SparqlQueryParserStaticData&) = delete;
  SparqlQueryParserStaticData(SparqlQueryParserStaticData&&) = delete;
  SparqlQueryParserStaticData& operator=(const SparqlQueryParserStaticData&) = delete;
  SparqlQueryParserStaticData& operator=(SparqlQueryParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sparqlqueryparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
SparqlQueryParserStaticData *sparqlqueryparserParserStaticData = nullptr;

void sparqlqueryparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (sparqlqueryparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(sparqlqueryparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<SparqlQueryParserStaticData>(
    std::vector<std::string>{
      "query", "showQuery", "prologue", "baseDecl", "prefixDecl", "selectQuery", 
      "subSelect", "selectClause", "selectModifier", "selectVariables", 
      "constructQuery", "describeQuery", "askQuery", "datasetClause", "whereClause", 
      "solutionModifier", "groupClause", "groupCondition", "havingClause", 
      "havingCondition", "orderClause", "orderCondition", "limitOffsetClauses", 
      "limitClause", "offsetClause", "valuesClause", "triplesTemplate", 
      "groupGraphPattern", "groupGraphPatternSub", "groupGraphPatternSubList", 
      "triplesBlock", "graphPatternNotTriples", "optionalGraphPattern", 
      "graphGraphPattern", "serviceGraphPattern", "bind", "inlineData", 
      "dataBlock", "inlineDataOneVar", "inlineDataFull", "dataBlockValues", 
      "dataBlockValue", "minusGraphPattern", "groupOrUnionGraphPattern", 
      "filter", "constraint", "functionCall", "argList", "expressionList", 
      "constructTemplate", "constructTriples", "triplesSameSubject", "propertyList", 
      "propertyListNotEmpty", "verb", "objectList", "object", "triplesSameSubjectPath", 
      "propertyListPath", "propertyListPathNotEmpty", "propertyListPathNotEmptyList", 
      "verbPath", "verbSimple", "objectListPath", "objectPath", "path", 
      "pathAlternative", "pathSequence", "pathElt", "pathEltOrInverse", 
      "pathMod", "pathQuantity", "pathQuantityExact", "pathQuantityRange", 
      "pathQuantityMin", "pathQuantityMax", "pathPrimary", "pathNegatedPropertySet", 
      "pathOneInPropertySet", "integer", "triplesNode", "blankNodePropertyList", 
      "triplesNodePath", "blankNodePropertyListPath", "collection", "collectionPath", 
      "graphNode", "graphNodePath", "varOrTerm", "varOrIRI", "var", "graphTerm", 
      "nil", "expression", "conditionalOrExpression", "conditionalAndExpression", 
      "relationalExpression", "additiveExpression", "rhsAdditiveExpression", 
      "rhsAdditiveExpressionSub", "multiplicativeExpression", "unaryExpression", 
      "primaryExpression", "builtInCall", "regexExpression", "subStringExpression", 
      "strReplaceExpression", "existsFunction", "notExistsFunction", "aggregate", 
      "iriOrFunction", "rdfLiteral", "numericLiteral", "numericLiteralUnsigned", 
      "numericLiteralPositive", "numericLiteralNegative", "booleanLiteral", 
      "string", "iri", "prefixedName", "blankNode", "anon"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "'a'", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "'^^'", "'<='", "'>='", 
      "'!='", "'&&'", "'||'", "'^'", "'('", "')'", "'{'", "'}'", "'['", 
      "']'", "';'", "'.'", "'+'", "'-'", "'*'", "'\\u003F'", "','", "'!'", 
      "'/'", "'='", "'<'", "'>'", "'|'"
    },
    std::vector<std::string>{
      "", "WS", "BASE", "PREFIX", "SELECT", "DISTINCT", "REDUCED", "CONSTRUCT", 
      "DESCRIBE", "ASK", "FROM", "NAMED", "WHERE", "ORDER", "BY", "ASC", 
      "DESC", "LIMIT", "OFFSET", "VALUES", "OPTIONAL", "GRAPH", "UNION", 
      "FILTER", "A", "STR", "LANG", "LANGMATCHES", "DATATYPE", "BOUND", 
      "SAMETERM", "ISIRI", "ISURI", "ISBLANK", "ISLITERAL", "REGEX", "SUBSTR", 
      "TRUE", "FALSE", "SILENT", "ALL", "AS", "GROUP", "HAVING", "UNDEF", 
      "BINDINGS", "SERVICE", "BIND", "MINUS", "IRI", "URI", "BNODE", "RAND", 
      "ABS", "CEIL", "FLOOR", "ROUND", "CONCAT", "STRLEN", "UCASE", "LCASE", 
      "ENCODE_FOR_URI", "CONTAINS", "STRSTARTS", "STRENDS", "STRBEFORE", 
      "STRAFTER", "REPLACE", "YEAR", "MONTH", "DAY", "HOURS", "MINUTES", 
      "SECONDS", "TIMEZONE", "TZ", "NOW", "UUID", "STRUUID", "MD5", "SHA1", 
      "SHA256", "SHA384", "SHA512", "COALESCE", "IF", "STRLANG", "STRDT", 
      "ISNUMERIC", "COUNT", "SUM", "MIN", "MAX", "AVG", "SAMPLE", "GROUP_CONCAT", 
      "NOT", "IN", "EXISTS", "SEPARATOR", "ANY", "SHORTEST", "SIMPLE", "ACYCLIC", 
      "WALKS", "SHOW", "TEXT", "INDEX", "IRIREF", "PNAME_NS", "PNAME_LN", 
      "BLANK_NODE_LABEL", "VAR1", "VAR2", "LANGTAG", "INTEGER", "DECIMAL", 
      "DOUBLE", "INTEGER_POSITIVE", "DECIMAL_POSITIVE", "DOUBLE_POSITIVE", 
      "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", "DOUBLE_NEGATIVE", "STRING_LITERAL1", 
      "STRING_LITERAL2", "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2", 
      "COMMENT", "REFERENCE", "LESS_EQUAL", "GREATER_EQUAL", "NOT_EQUAL", 
      "AND", "OR", "INVERSE", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_CURLY_BRACE", 
      "CLOSE_CURLY_BRACE", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
      "SEMICOLON", "DOT", "PLUS_SIGN", "MINUS_SIGN", "ASTERISK", "QUESTION_MARK", 
      "COMMA", "NEGATION", "DIVIDE", "EQUAL", "LESS", "GREATER", "PIPE", 
      "ANY_OTHER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,155,1384,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,1,0,
  	1,0,1,0,1,0,1,0,3,0,250,8,0,1,0,1,0,1,0,1,0,3,0,256,8,0,1,1,1,1,1,1,1,
  	1,1,2,1,2,5,2,264,8,2,10,2,12,2,267,9,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
  	5,1,5,5,5,278,8,5,10,5,12,5,281,9,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
  	7,1,7,3,7,293,8,7,1,7,4,7,296,8,7,11,7,12,7,297,1,7,3,7,301,8,7,1,8,1,
  	8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,312,8,9,1,10,1,10,1,10,5,10,317,8,10,
  	10,10,12,10,320,9,10,1,10,1,10,1,10,1,10,5,10,326,8,10,10,10,12,10,329,
  	9,10,1,10,1,10,1,10,3,10,334,8,10,1,10,1,10,3,10,338,8,10,1,11,1,11,4,
  	11,342,8,11,11,11,12,11,343,1,11,3,11,347,8,11,1,11,5,11,350,8,11,10,
  	11,12,11,353,9,11,1,11,3,11,356,8,11,1,11,1,11,1,12,1,12,5,12,362,8,12,
  	10,12,12,12,365,9,12,1,12,1,12,1,12,1,13,1,13,3,13,372,8,13,1,13,1,13,
  	1,14,3,14,377,8,14,1,14,1,14,1,15,3,15,382,8,15,1,15,3,15,385,8,15,1,
  	15,3,15,388,8,15,1,15,3,15,391,8,15,1,16,1,16,1,16,4,16,396,8,16,11,16,
  	12,16,397,1,17,1,17,1,17,1,17,1,17,1,17,3,17,406,8,17,1,17,1,17,1,17,
  	3,17,411,8,17,1,18,1,18,4,18,415,8,18,11,18,12,18,416,1,19,1,19,1,20,
  	1,20,1,20,4,20,424,8,20,11,20,12,20,425,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,3,21,435,8,21,1,22,1,22,3,22,439,8,22,1,22,1,22,3,22,443,8,22,3,
  	22,445,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,3,25,455,8,25,1,26,
  	1,26,1,26,3,26,460,8,26,5,26,462,8,26,10,26,12,26,465,9,26,1,27,1,27,
  	1,27,3,27,470,8,27,1,27,1,27,1,28,3,28,475,8,28,1,28,5,28,478,8,28,10,
  	28,12,28,481,9,28,1,29,1,29,3,29,485,8,29,1,29,3,29,488,8,29,1,30,1,30,
  	1,30,3,30,493,8,30,5,30,495,8,30,10,30,12,30,498,9,30,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,3,31,508,8,31,1,32,1,32,1,32,1,33,1,33,1,33,
  	1,33,1,34,1,34,3,34,519,8,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,36,1,36,1,36,1,37,1,37,3,37,536,8,37,1,38,1,38,1,38,5,38,
  	541,8,38,10,38,12,38,544,9,38,1,38,1,38,1,39,1,39,5,39,550,8,39,10,39,
  	12,39,553,9,39,1,39,1,39,1,39,5,39,558,8,39,10,39,12,39,561,9,39,1,39,
  	1,39,1,40,1,40,5,40,567,8,40,10,40,12,40,570,9,40,1,40,1,40,1,41,1,41,
  	1,41,1,41,1,41,3,41,579,8,41,1,42,1,42,1,42,1,43,1,43,1,43,5,43,587,8,
  	43,10,43,12,43,590,9,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,
  	3,45,601,8,45,1,46,1,46,1,46,1,47,1,47,3,47,608,8,47,1,47,1,47,3,47,612,
  	8,47,1,47,1,47,1,48,1,48,1,48,5,48,619,8,48,10,48,12,48,622,9,48,1,49,
  	1,49,3,49,626,8,49,1,49,1,49,1,50,1,50,1,50,3,50,633,8,50,5,50,635,8,
  	50,10,50,12,50,638,9,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,646,8,51,1,
  	52,3,52,649,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,657,8,53,5,53,659,
  	8,53,10,53,12,53,662,9,53,1,54,1,54,3,54,666,8,54,1,55,1,55,1,55,5,55,
  	671,8,55,10,55,12,55,674,9,55,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,
  	3,57,684,8,57,1,58,3,58,687,8,58,1,59,1,59,3,59,691,8,59,1,59,1,59,1,
  	59,3,59,696,8,59,5,59,698,8,59,10,59,12,59,701,9,59,1,60,1,60,3,60,705,
  	8,60,1,60,1,60,1,61,1,61,1,61,3,61,712,8,61,1,61,3,61,715,8,61,1,61,1,
  	61,1,61,1,61,1,61,1,61,3,61,723,8,61,1,62,1,62,1,63,1,63,1,63,5,63,730,
  	8,63,10,63,12,63,733,9,63,1,64,1,64,1,65,1,65,1,66,1,66,1,66,5,66,742,
  	8,66,10,66,12,66,745,9,66,1,67,1,67,1,67,5,67,750,8,67,10,67,12,67,753,
  	9,67,1,68,1,68,3,68,757,8,68,1,69,3,69,760,8,69,1,69,1,69,1,70,1,70,1,
  	70,1,70,1,70,1,70,1,70,3,70,771,8,70,1,71,1,71,1,71,1,71,3,71,777,8,71,
  	1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,1,75,1,76,1,76,
  	1,76,1,76,1,76,1,76,1,76,1,76,3,76,799,8,76,1,77,1,77,1,77,1,77,1,77,
  	5,77,806,8,77,10,77,12,77,809,9,77,3,77,811,8,77,1,77,3,77,814,8,77,1,
  	78,3,78,817,8,78,1,78,1,78,3,78,821,8,78,1,79,1,79,1,80,1,80,3,80,827,
  	8,80,1,81,1,81,1,81,1,81,1,82,1,82,3,82,835,8,82,1,83,1,83,1,83,1,83,
  	1,84,1,84,4,84,843,8,84,11,84,12,84,844,1,84,1,84,1,85,1,85,4,85,851,
  	8,85,11,85,12,85,852,1,85,1,85,1,86,1,86,3,86,859,8,86,1,87,1,87,3,87,
  	863,8,87,1,88,1,88,3,88,867,8,88,1,89,1,89,3,89,871,8,89,1,90,1,90,1,
  	91,1,91,1,91,1,91,1,91,1,91,3,91,881,8,91,1,92,1,92,1,92,1,93,1,93,1,
  	94,1,94,1,94,5,94,891,8,94,10,94,12,94,894,9,94,1,95,1,95,1,95,5,95,899,
  	8,95,10,95,12,95,902,9,95,1,96,1,96,1,96,3,96,907,8,96,1,96,1,96,3,96,
  	911,8,96,1,96,1,96,1,96,3,96,916,8,96,1,96,1,96,3,96,920,8,96,1,97,1,
  	97,5,97,924,8,97,10,97,12,97,927,9,97,1,98,1,98,1,98,5,98,932,8,98,10,
  	98,12,98,935,9,98,1,99,1,99,1,99,1,99,3,99,941,8,99,1,100,1,100,1,100,
  	5,100,946,8,100,10,100,12,100,949,9,100,1,101,3,101,952,8,101,1,101,1,
  	101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,
  	966,8,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1009,8,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,3,103,1038,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1175,8,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1236,8,103,
  	1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1245,8,104,1,104,1,104,
  	1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1256,8,105,1,105,1,105,
  	1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1269,8,106,
  	1,106,1,106,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,109,1,109,1,109,
  	3,109,1283,8,109,1,109,1,109,3,109,1287,8,109,1,109,1,109,1,109,1,109,
  	3,109,1293,8,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,1301,8,109,
  	1,109,1,109,1,109,1,109,1,109,1,109,3,109,1309,8,109,1,109,1,109,1,109,
  	1,109,1,109,1,109,3,109,1317,8,109,1,109,1,109,1,109,1,109,1,109,1,109,
  	3,109,1325,8,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,1333,8,109,
  	1,109,1,109,1,109,1,109,1,109,3,109,1340,8,109,1,109,1,109,3,109,1344,
  	8,109,1,110,1,110,3,110,1348,8,110,1,111,1,111,1,111,1,111,3,111,1354,
  	8,111,1,112,1,112,1,112,3,112,1359,8,112,1,113,1,113,1,114,1,114,1,115,
  	1,115,1,116,1,116,1,117,1,117,1,118,1,118,3,118,1373,8,118,1,119,1,119,
  	1,120,1,120,3,120,1379,8,120,1,121,1,121,1,121,1,121,0,0,122,0,2,4,6,
  	8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
  	56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
  	102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
  	138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
  	174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
  	210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,0,
  	15,1,0,5,6,1,0,15,16,2,0,40,40,100,100,1,0,102,104,1,0,112,113,2,0,130,
  	132,151,153,2,0,146,146,150,150,1,0,144,145,2,0,144,145,149,149,1,0,115,
  	117,1,0,118,120,1,0,121,123,1,0,37,38,1,0,124,127,1,0,109,110,1482,0,
  	255,1,0,0,0,2,257,1,0,0,0,4,265,1,0,0,0,6,268,1,0,0,0,8,271,1,0,0,0,10,
  	275,1,0,0,0,12,285,1,0,0,0,14,290,1,0,0,0,16,302,1,0,0,0,18,311,1,0,0,
  	0,20,313,1,0,0,0,22,339,1,0,0,0,24,359,1,0,0,0,26,369,1,0,0,0,28,376,
  	1,0,0,0,30,381,1,0,0,0,32,392,1,0,0,0,34,410,1,0,0,0,36,412,1,0,0,0,38,
  	418,1,0,0,0,40,420,1,0,0,0,42,434,1,0,0,0,44,444,1,0,0,0,46,446,1,0,0,
  	0,48,449,1,0,0,0,50,454,1,0,0,0,52,456,1,0,0,0,54,466,1,0,0,0,56,474,
  	1,0,0,0,58,482,1,0,0,0,60,489,1,0,0,0,62,507,1,0,0,0,64,509,1,0,0,0,66,
  	512,1,0,0,0,68,516,1,0,0,0,70,523,1,0,0,0,72,530,1,0,0,0,74,535,1,0,0,
  	0,76,537,1,0,0,0,78,547,1,0,0,0,80,564,1,0,0,0,82,578,1,0,0,0,84,580,
  	1,0,0,0,86,583,1,0,0,0,88,591,1,0,0,0,90,600,1,0,0,0,92,602,1,0,0,0,94,
  	605,1,0,0,0,96,615,1,0,0,0,98,623,1,0,0,0,100,629,1,0,0,0,102,645,1,0,
  	0,0,104,648,1,0,0,0,106,650,1,0,0,0,108,665,1,0,0,0,110,667,1,0,0,0,112,
  	675,1,0,0,0,114,683,1,0,0,0,116,686,1,0,0,0,118,690,1,0,0,0,120,704,1,
  	0,0,0,122,722,1,0,0,0,124,724,1,0,0,0,126,726,1,0,0,0,128,734,1,0,0,0,
  	130,736,1,0,0,0,132,738,1,0,0,0,134,746,1,0,0,0,136,754,1,0,0,0,138,759,
  	1,0,0,0,140,770,1,0,0,0,142,776,1,0,0,0,144,778,1,0,0,0,146,780,1,0,0,
  	0,148,784,1,0,0,0,150,787,1,0,0,0,152,798,1,0,0,0,154,813,1,0,0,0,156,
  	816,1,0,0,0,158,822,1,0,0,0,160,826,1,0,0,0,162,828,1,0,0,0,164,834,1,
  	0,0,0,166,836,1,0,0,0,168,840,1,0,0,0,170,848,1,0,0,0,172,858,1,0,0,0,
  	174,862,1,0,0,0,176,866,1,0,0,0,178,870,1,0,0,0,180,872,1,0,0,0,182,880,
  	1,0,0,0,184,882,1,0,0,0,186,885,1,0,0,0,188,887,1,0,0,0,190,895,1,0,0,
  	0,192,919,1,0,0,0,194,921,1,0,0,0,196,928,1,0,0,0,198,940,1,0,0,0,200,
  	942,1,0,0,0,202,951,1,0,0,0,204,965,1,0,0,0,206,1235,1,0,0,0,208,1237,
  	1,0,0,0,210,1248,1,0,0,0,212,1259,1,0,0,0,214,1272,1,0,0,0,216,1275,1,
  	0,0,0,218,1343,1,0,0,0,220,1345,1,0,0,0,222,1349,1,0,0,0,224,1358,1,0,
  	0,0,226,1360,1,0,0,0,228,1362,1,0,0,0,230,1364,1,0,0,0,232,1366,1,0,0,
  	0,234,1368,1,0,0,0,236,1372,1,0,0,0,238,1374,1,0,0,0,240,1378,1,0,0,0,
  	242,1380,1,0,0,0,244,249,3,4,2,0,245,250,3,10,5,0,246,250,3,20,10,0,247,
  	250,3,22,11,0,248,250,3,24,12,0,249,245,1,0,0,0,249,246,1,0,0,0,249,247,
  	1,0,0,0,249,248,1,0,0,0,250,251,1,0,0,0,251,252,3,50,25,0,252,253,5,0,
  	0,1,253,256,1,0,0,0,254,256,3,2,1,0,255,244,1,0,0,0,255,254,1,0,0,0,256,
  	1,1,0,0,0,257,258,5,105,0,0,258,259,5,106,0,0,259,260,5,107,0,0,260,3,
  	1,0,0,0,261,264,3,6,3,0,262,264,3,8,4,0,263,261,1,0,0,0,263,262,1,0,0,
  	0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,5,1,0,0,0,267,265,
  	1,0,0,0,268,269,5,2,0,0,269,270,5,108,0,0,270,7,1,0,0,0,271,272,5,3,0,
  	0,272,273,5,109,0,0,273,274,5,108,0,0,274,9,1,0,0,0,275,279,3,14,7,0,
  	276,278,3,26,13,0,277,276,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,
  	280,1,0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,283,3,28,14,0,283,284,
  	3,30,15,0,284,11,1,0,0,0,285,286,3,14,7,0,286,287,3,28,14,0,287,288,3,
  	30,15,0,288,289,3,50,25,0,289,13,1,0,0,0,290,292,5,4,0,0,291,293,3,16,
  	8,0,292,291,1,0,0,0,292,293,1,0,0,0,293,300,1,0,0,0,294,296,3,18,9,0,
  	295,294,1,0,0,0,296,297,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,301,
  	1,0,0,0,299,301,5,146,0,0,300,295,1,0,0,0,300,299,1,0,0,0,301,15,1,0,
  	0,0,302,303,7,0,0,0,303,17,1,0,0,0,304,312,3,180,90,0,305,306,5,136,0,
  	0,306,307,3,186,93,0,307,308,5,41,0,0,308,309,3,180,90,0,309,310,5,137,
  	0,0,310,312,1,0,0,0,311,304,1,0,0,0,311,305,1,0,0,0,312,19,1,0,0,0,313,
  	337,5,7,0,0,314,318,3,98,49,0,315,317,3,26,13,0,316,315,1,0,0,0,317,320,
  	1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,321,1,0,0,0,320,318,1,0,0,
  	0,321,322,3,28,14,0,322,323,3,30,15,0,323,338,1,0,0,0,324,326,3,26,13,
  	0,325,324,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,
  	330,1,0,0,0,329,327,1,0,0,0,330,331,5,12,0,0,331,333,5,138,0,0,332,334,
  	3,52,26,0,333,332,1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,336,5,139,
  	0,0,336,338,3,30,15,0,337,314,1,0,0,0,337,327,1,0,0,0,338,21,1,0,0,0,
  	339,346,5,8,0,0,340,342,3,178,89,0,341,340,1,0,0,0,342,343,1,0,0,0,343,
  	341,1,0,0,0,343,344,1,0,0,0,344,347,1,0,0,0,345,347,5,146,0,0,346,341,
  	1,0,0,0,346,345,1,0,0,0,347,351,1,0,0,0,348,350,3,26,13,0,349,348,1,0,
  	0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,355,1,0,0,0,353,
  	351,1,0,0,0,354,356,3,28,14,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,
  	1,0,0,0,357,358,3,30,15,0,358,23,1,0,0,0,359,363,5,9,0,0,360,362,3,26,
  	13,0,361,360,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,
  	364,366,1,0,0,0,365,363,1,0,0,0,366,367,3,28,14,0,367,368,3,30,15,0,368,
  	25,1,0,0,0,369,371,5,10,0,0,370,372,5,11,0,0,371,370,1,0,0,0,371,372,
  	1,0,0,0,372,373,1,0,0,0,373,374,3,236,118,0,374,27,1,0,0,0,375,377,5,
  	12,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,379,3,54,27,
  	0,379,29,1,0,0,0,380,382,3,32,16,0,381,380,1,0,0,0,381,382,1,0,0,0,382,
  	384,1,0,0,0,383,385,3,36,18,0,384,383,1,0,0,0,384,385,1,0,0,0,385,387,
  	1,0,0,0,386,388,3,40,20,0,387,386,1,0,0,0,387,388,1,0,0,0,388,390,1,0,
  	0,0,389,391,3,44,22,0,390,389,1,0,0,0,390,391,1,0,0,0,391,31,1,0,0,0,
  	392,393,5,42,0,0,393,395,5,14,0,0,394,396,3,34,17,0,395,394,1,0,0,0,396,
  	397,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,33,1,0,0,0,399,411,3,
  	206,103,0,400,411,3,92,46,0,401,402,5,136,0,0,402,405,3,186,93,0,403,
  	404,5,41,0,0,404,406,3,180,90,0,405,403,1,0,0,0,405,406,1,0,0,0,406,407,
  	1,0,0,0,407,408,5,137,0,0,408,411,1,0,0,0,409,411,3,180,90,0,410,399,
  	1,0,0,0,410,400,1,0,0,0,410,401,1,0,0,0,410,409,1,0,0,0,411,35,1,0,0,
  	0,412,414,5,43,0,0,413,415,3,38,19,0,414,413,1,0,0,0,415,416,1,0,0,0,
  	416,414,1,0,0,0,416,417,1,0,0,0,417,37,1,0,0,0,418,419,3,90,45,0,419,
  	39,1,0,0,0,420,421,5,13,0,0,421,423,5,14,0,0,422,424,3,42,21,0,423,422,
  	1,0,0,0,424,425,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,41,1,0,0,
  	0,427,428,7,1,0,0,428,429,5,136,0,0,429,430,3,186,93,0,430,431,5,137,
  	0,0,431,435,1,0,0,0,432,435,3,90,45,0,433,435,3,180,90,0,434,427,1,0,
  	0,0,434,432,1,0,0,0,434,433,1,0,0,0,435,43,1,0,0,0,436,438,3,46,23,0,
  	437,439,3,48,24,0,438,437,1,0,0,0,438,439,1,0,0,0,439,445,1,0,0,0,440,
  	442,3,48,24,0,441,443,3,46,23,0,442,441,1,0,0,0,442,443,1,0,0,0,443,445,
  	1,0,0,0,444,436,1,0,0,0,444,440,1,0,0,0,445,45,1,0,0,0,446,447,5,17,0,
  	0,447,448,5,115,0,0,448,47,1,0,0,0,449,450,5,18,0,0,450,451,5,115,0,0,
  	451,49,1,0,0,0,452,453,5,19,0,0,453,455,3,74,37,0,454,452,1,0,0,0,454,
  	455,1,0,0,0,455,51,1,0,0,0,456,463,3,102,51,0,457,459,5,143,0,0,458,460,
  	3,102,51,0,459,458,1,0,0,0,459,460,1,0,0,0,460,462,1,0,0,0,461,457,1,
  	0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,53,1,0,0,0,
  	465,463,1,0,0,0,466,469,5,138,0,0,467,470,3,12,6,0,468,470,3,56,28,0,
  	469,467,1,0,0,0,469,468,1,0,0,0,470,471,1,0,0,0,471,472,5,139,0,0,472,
  	55,1,0,0,0,473,475,3,60,30,0,474,473,1,0,0,0,474,475,1,0,0,0,475,479,
  	1,0,0,0,476,478,3,58,29,0,477,476,1,0,0,0,478,481,1,0,0,0,479,477,1,0,
  	0,0,479,480,1,0,0,0,480,57,1,0,0,0,481,479,1,0,0,0,482,484,3,62,31,0,
  	483,485,5,143,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,487,1,0,0,0,486,
  	488,3,60,30,0,487,486,1,0,0,0,487,488,1,0,0,0,488,59,1,0,0,0,489,496,
  	3,114,57,0,490,492,5,143,0,0,491,493,3,114,57,0,492,491,1,0,0,0,492,493,
  	1,0,0,0,493,495,1,0,0,0,494,490,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,
  	0,496,497,1,0,0,0,497,61,1,0,0,0,498,496,1,0,0,0,499,508,3,86,43,0,500,
  	508,3,64,32,0,501,508,3,84,42,0,502,508,3,66,33,0,503,508,3,68,34,0,504,
  	508,3,88,44,0,505,508,3,70,35,0,506,508,3,72,36,0,507,499,1,0,0,0,507,
  	500,1,0,0,0,507,501,1,0,0,0,507,502,1,0,0,0,507,503,1,0,0,0,507,504,1,
  	0,0,0,507,505,1,0,0,0,507,506,1,0,0,0,508,63,1,0,0,0,509,510,5,20,0,0,
  	510,511,3,54,27,0,511,65,1,0,0,0,512,513,5,21,0,0,513,514,3,178,89,0,
  	514,515,3,54,27,0,515,67,1,0,0,0,516,518,5,46,0,0,517,519,5,39,0,0,518,
  	517,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,521,3,178,89,0,521,522,
  	3,54,27,0,522,69,1,0,0,0,523,524,5,47,0,0,524,525,5,136,0,0,525,526,3,
  	186,93,0,526,527,5,41,0,0,527,528,3,180,90,0,528,529,5,137,0,0,529,71,
  	1,0,0,0,530,531,5,19,0,0,531,532,3,74,37,0,532,73,1,0,0,0,533,536,3,76,
  	38,0,534,536,3,78,39,0,535,533,1,0,0,0,535,534,1,0,0,0,536,75,1,0,0,0,
  	537,538,3,180,90,0,538,542,5,138,0,0,539,541,3,82,41,0,540,539,1,0,0,
  	0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,545,1,0,0,0,544,
  	542,1,0,0,0,545,546,5,139,0,0,546,77,1,0,0,0,547,551,5,136,0,0,548,550,
  	3,180,90,0,549,548,1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,0,551,552,1,
  	0,0,0,552,554,1,0,0,0,553,551,1,0,0,0,554,555,5,137,0,0,555,559,5,138,
  	0,0,556,558,3,80,40,0,557,556,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,
  	559,560,1,0,0,0,560,562,1,0,0,0,561,559,1,0,0,0,562,563,5,139,0,0,563,
  	79,1,0,0,0,564,568,5,136,0,0,565,567,3,82,41,0,566,565,1,0,0,0,567,570,
  	1,0,0,0,568,566,1,0,0,0,568,569,1,0,0,0,569,571,1,0,0,0,570,568,1,0,0,
  	0,571,572,5,137,0,0,572,81,1,0,0,0,573,579,3,236,118,0,574,579,3,222,
  	111,0,575,579,3,224,112,0,576,579,3,232,116,0,577,579,5,44,0,0,578,573,
  	1,0,0,0,578,574,1,0,0,0,578,575,1,0,0,0,578,576,1,0,0,0,578,577,1,0,0,
  	0,579,83,1,0,0,0,580,581,5,48,0,0,581,582,3,54,27,0,582,85,1,0,0,0,583,
  	588,3,54,27,0,584,585,5,22,0,0,585,587,3,54,27,0,586,584,1,0,0,0,587,
  	590,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,87,1,0,0,0,590,588,1,
  	0,0,0,591,592,5,23,0,0,592,593,3,90,45,0,593,89,1,0,0,0,594,595,5,136,
  	0,0,595,596,3,186,93,0,596,597,5,137,0,0,597,601,1,0,0,0,598,601,3,206,
  	103,0,599,601,3,92,46,0,600,594,1,0,0,0,600,598,1,0,0,0,600,599,1,0,0,
  	0,601,91,1,0,0,0,602,603,3,236,118,0,603,604,3,94,47,0,604,93,1,0,0,0,
  	605,611,5,136,0,0,606,608,5,5,0,0,607,606,1,0,0,0,607,608,1,0,0,0,608,
  	609,1,0,0,0,609,612,3,96,48,0,610,612,1,0,0,0,611,607,1,0,0,0,611,610,
  	1,0,0,0,612,613,1,0,0,0,613,614,5,137,0,0,614,95,1,0,0,0,615,620,3,186,
  	93,0,616,617,5,148,0,0,617,619,3,186,93,0,618,616,1,0,0,0,619,622,1,0,
  	0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,97,1,0,0,0,622,620,1,0,0,0,623,
  	625,5,138,0,0,624,626,3,100,50,0,625,624,1,0,0,0,625,626,1,0,0,0,626,
  	627,1,0,0,0,627,628,5,139,0,0,628,99,1,0,0,0,629,636,3,102,51,0,630,632,
  	5,143,0,0,631,633,3,100,50,0,632,631,1,0,0,0,632,633,1,0,0,0,633,635,
  	1,0,0,0,634,630,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,
  	0,637,101,1,0,0,0,638,636,1,0,0,0,639,640,3,176,88,0,640,641,3,106,53,
  	0,641,646,1,0,0,0,642,643,3,160,80,0,643,644,3,104,52,0,644,646,1,0,0,
  	0,645,639,1,0,0,0,645,642,1,0,0,0,646,103,1,0,0,0,647,649,3,106,53,0,
  	648,647,1,0,0,0,648,649,1,0,0,0,649,105,1,0,0,0,650,651,3,108,54,0,651,
  	660,3,110,55,0,652,656,5,142,0,0,653,654,3,108,54,0,654,655,3,110,55,
  	0,655,657,1,0,0,0,656,653,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,
  	652,1,0,0,0,659,662,1,0,0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,107,1,
  	0,0,0,662,660,1,0,0,0,663,666,3,178,89,0,664,666,5,24,0,0,665,663,1,0,
  	0,0,665,664,1,0,0,0,666,109,1,0,0,0,667,672,3,112,56,0,668,669,5,148,
  	0,0,669,671,3,112,56,0,670,668,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,
  	0,672,673,1,0,0,0,673,111,1,0,0,0,674,672,1,0,0,0,675,676,3,172,86,0,
  	676,113,1,0,0,0,677,678,3,176,88,0,678,679,3,118,59,0,679,684,1,0,0,0,
  	680,681,3,164,82,0,681,682,3,116,58,0,682,684,1,0,0,0,683,677,1,0,0,0,
  	683,680,1,0,0,0,684,115,1,0,0,0,685,687,3,118,59,0,686,685,1,0,0,0,686,
  	687,1,0,0,0,687,117,1,0,0,0,688,691,3,122,61,0,689,691,3,124,62,0,690,
  	688,1,0,0,0,690,689,1,0,0,0,691,692,1,0,0,0,692,699,3,126,63,0,693,695,
  	5,142,0,0,694,696,3,120,60,0,695,694,1,0,0,0,695,696,1,0,0,0,696,698,
  	1,0,0,0,697,693,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,700,1,0,0,
  	0,700,119,1,0,0,0,701,699,1,0,0,0,702,705,3,122,61,0,703,705,3,124,62,
  	0,704,702,1,0,0,0,704,703,1,0,0,0,705,706,1,0,0,0,706,707,3,110,55,0,
  	707,121,1,0,0,0,708,723,3,130,65,0,709,711,7,2,0,0,710,712,5,101,0,0,
  	711,710,1,0,0,0,711,712,1,0,0,0,712,714,1,0,0,0,713,715,7,3,0,0,714,713,
  	1,0,0,0,714,715,1,0,0,0,715,716,1,0,0,0,716,717,5,136,0,0,717,718,3,130,
  	65,0,718,719,5,41,0,0,719,720,3,180,90,0,720,721,5,137,0,0,721,723,1,
  	0,0,0,722,708,1,0,0,0,722,709,1,0,0,0,723,123,1,0,0,0,724,725,3,180,90,
  	0,725,125,1,0,0,0,726,731,3,128,64,0,727,728,5,148,0,0,728,730,3,128,
  	64,0,729,727,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,
  	732,127,1,0,0,0,733,731,1,0,0,0,734,735,3,174,87,0,735,129,1,0,0,0,736,
  	737,3,132,66,0,737,131,1,0,0,0,738,743,3,134,67,0,739,740,5,154,0,0,740,
  	742,3,134,67,0,741,739,1,0,0,0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,
  	1,0,0,0,744,133,1,0,0,0,745,743,1,0,0,0,746,751,3,138,69,0,747,748,5,
  	150,0,0,748,750,3,138,69,0,749,747,1,0,0,0,750,753,1,0,0,0,751,749,1,
  	0,0,0,751,752,1,0,0,0,752,135,1,0,0,0,753,751,1,0,0,0,754,756,3,152,76,
  	0,755,757,3,140,70,0,756,755,1,0,0,0,756,757,1,0,0,0,757,137,1,0,0,0,
  	758,760,5,135,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,
  	762,3,136,68,0,762,139,1,0,0,0,763,771,5,147,0,0,764,771,5,146,0,0,765,
  	771,5,144,0,0,766,767,5,138,0,0,767,768,3,142,71,0,768,769,5,139,0,0,
  	769,771,1,0,0,0,770,763,1,0,0,0,770,764,1,0,0,0,770,765,1,0,0,0,770,766,
  	1,0,0,0,771,141,1,0,0,0,772,777,3,144,72,0,773,777,3,146,73,0,774,777,
  	3,148,74,0,775,777,3,150,75,0,776,772,1,0,0,0,776,773,1,0,0,0,776,774,
  	1,0,0,0,776,775,1,0,0,0,777,143,1,0,0,0,778,779,5,115,0,0,779,145,1,0,
  	0,0,780,781,5,115,0,0,781,782,5,148,0,0,782,783,5,115,0,0,783,147,1,0,
  	0,0,784,785,5,115,0,0,785,786,5,148,0,0,786,149,1,0,0,0,787,788,5,148,
  	0,0,788,789,5,115,0,0,789,151,1,0,0,0,790,799,3,236,118,0,791,799,5,24,
  	0,0,792,793,5,149,0,0,793,799,3,154,77,0,794,795,5,136,0,0,795,796,3,
  	130,65,0,796,797,5,137,0,0,797,799,1,0,0,0,798,790,1,0,0,0,798,791,1,
  	0,0,0,798,792,1,0,0,0,798,794,1,0,0,0,799,153,1,0,0,0,800,814,3,156,78,
  	0,801,810,5,136,0,0,802,807,3,156,78,0,803,804,5,154,0,0,804,806,3,156,
  	78,0,805,803,1,0,0,0,806,809,1,0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,
  	808,811,1,0,0,0,809,807,1,0,0,0,810,802,1,0,0,0,810,811,1,0,0,0,811,812,
  	1,0,0,0,812,814,5,137,0,0,813,800,1,0,0,0,813,801,1,0,0,0,814,155,1,0,
  	0,0,815,817,5,135,0,0,816,815,1,0,0,0,816,817,1,0,0,0,817,820,1,0,0,0,
  	818,821,3,236,118,0,819,821,5,24,0,0,820,818,1,0,0,0,820,819,1,0,0,0,
  	821,157,1,0,0,0,822,823,5,115,0,0,823,159,1,0,0,0,824,827,3,168,84,0,
  	825,827,3,162,81,0,826,824,1,0,0,0,826,825,1,0,0,0,827,161,1,0,0,0,828,
  	829,5,140,0,0,829,830,3,106,53,0,830,831,5,141,0,0,831,163,1,0,0,0,832,
  	835,3,170,85,0,833,835,3,166,83,0,834,832,1,0,0,0,834,833,1,0,0,0,835,
  	165,1,0,0,0,836,837,5,140,0,0,837,838,3,118,59,0,838,839,5,141,0,0,839,
  	167,1,0,0,0,840,842,5,136,0,0,841,843,3,172,86,0,842,841,1,0,0,0,843,
  	844,1,0,0,0,844,842,1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,847,5,
  	137,0,0,847,169,1,0,0,0,848,850,5,136,0,0,849,851,3,174,87,0,850,849,
  	1,0,0,0,851,852,1,0,0,0,852,850,1,0,0,0,852,853,1,0,0,0,853,854,1,0,0,
  	0,854,855,5,137,0,0,855,171,1,0,0,0,856,859,3,176,88,0,857,859,3,160,
  	80,0,858,856,1,0,0,0,858,857,1,0,0,0,859,173,1,0,0,0,860,863,3,176,88,
  	0,861,863,3,164,82,0,862,860,1,0,0,0,862,861,1,0,0,0,863,175,1,0,0,0,
  	864,867,3,180,90,0,865,867,3,182,91,0,866,864,1,0,0,0,866,865,1,0,0,0,
  	867,177,1,0,0,0,868,871,3,180,90,0,869,871,3,236,118,0,870,868,1,0,0,
  	0,870,869,1,0,0,0,871,179,1,0,0,0,872,873,7,4,0,0,873,181,1,0,0,0,874,
  	881,3,236,118,0,875,881,3,222,111,0,876,881,3,224,112,0,877,881,3,232,
  	116,0,878,881,3,240,120,0,879,881,3,184,92,0,880,874,1,0,0,0,880,875,
  	1,0,0,0,880,876,1,0,0,0,880,877,1,0,0,0,880,878,1,0,0,0,880,879,1,0,0,
  	0,881,183,1,0,0,0,882,883,5,136,0,0,883,884,5,137,0,0,884,185,1,0,0,0,
  	885,886,3,188,94,0,886,187,1,0,0,0,887,892,3,190,95,0,888,889,5,134,0,
  	0,889,891,3,190,95,0,890,888,1,0,0,0,891,894,1,0,0,0,892,890,1,0,0,0,
  	892,893,1,0,0,0,893,189,1,0,0,0,894,892,1,0,0,0,895,900,3,192,96,0,896,
  	897,5,133,0,0,897,899,3,192,96,0,898,896,1,0,0,0,899,902,1,0,0,0,900,
  	898,1,0,0,0,900,901,1,0,0,0,901,191,1,0,0,0,902,900,1,0,0,0,903,906,3,
  	194,97,0,904,905,7,5,0,0,905,907,3,194,97,0,906,904,1,0,0,0,906,907,1,
  	0,0,0,907,920,1,0,0,0,908,910,3,194,97,0,909,911,5,96,0,0,910,909,1,0,
  	0,0,910,911,1,0,0,0,911,912,1,0,0,0,912,913,5,97,0,0,913,915,5,136,0,
  	0,914,916,3,96,48,0,915,914,1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,
  	918,5,137,0,0,918,920,1,0,0,0,919,903,1,0,0,0,919,908,1,0,0,0,920,193,
  	1,0,0,0,921,925,3,200,100,0,922,924,3,196,98,0,923,922,1,0,0,0,924,927,
  	1,0,0,0,925,923,1,0,0,0,925,926,1,0,0,0,926,195,1,0,0,0,927,925,1,0,0,
  	0,928,933,3,198,99,0,929,930,7,6,0,0,930,932,3,202,101,0,931,929,1,0,
  	0,0,932,935,1,0,0,0,933,931,1,0,0,0,933,934,1,0,0,0,934,197,1,0,0,0,935,
  	933,1,0,0,0,936,937,7,7,0,0,937,941,3,200,100,0,938,941,3,228,114,0,939,
  	941,3,230,115,0,940,936,1,0,0,0,940,938,1,0,0,0,940,939,1,0,0,0,941,199,
  	1,0,0,0,942,947,3,202,101,0,943,944,7,6,0,0,944,946,3,202,101,0,945,943,
  	1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,947,948,1,0,0,0,948,201,1,0,0,
  	0,949,947,1,0,0,0,950,952,7,8,0,0,951,950,1,0,0,0,951,952,1,0,0,0,952,
  	953,1,0,0,0,953,954,3,204,102,0,954,203,1,0,0,0,955,956,5,136,0,0,956,
  	957,3,186,93,0,957,958,5,137,0,0,958,966,1,0,0,0,959,966,3,206,103,0,
  	960,966,3,220,110,0,961,966,3,222,111,0,962,966,3,224,112,0,963,966,3,
  	232,116,0,964,966,3,180,90,0,965,955,1,0,0,0,965,959,1,0,0,0,965,960,
  	1,0,0,0,965,961,1,0,0,0,965,962,1,0,0,0,965,963,1,0,0,0,965,964,1,0,0,
  	0,966,205,1,0,0,0,967,1236,3,218,109,0,968,969,5,25,0,0,969,970,5,136,
  	0,0,970,971,3,186,93,0,971,972,5,137,0,0,972,1236,1,0,0,0,973,974,5,26,
  	0,0,974,975,5,136,0,0,975,976,3,186,93,0,976,977,5,137,0,0,977,1236,1,
  	0,0,0,978,979,5,27,0,0,979,980,5,136,0,0,980,981,3,186,93,0,981,982,5,
  	148,0,0,982,983,3,186,93,0,983,984,5,137,0,0,984,1236,1,0,0,0,985,986,
  	5,28,0,0,986,987,5,136,0,0,987,988,3,186,93,0,988,989,5,137,0,0,989,1236,
  	1,0,0,0,990,991,5,29,0,0,991,992,5,136,0,0,992,993,3,180,90,0,993,994,
  	5,137,0,0,994,1236,1,0,0,0,995,996,5,49,0,0,996,997,5,136,0,0,997,998,
  	3,186,93,0,998,999,5,137,0,0,999,1236,1,0,0,0,1000,1001,5,50,0,0,1001,
  	1002,5,136,0,0,1002,1003,3,186,93,0,1003,1004,5,137,0,0,1004,1236,1,0,
  	0,0,1005,1006,5,51,0,0,1006,1008,5,136,0,0,1007,1009,3,186,93,0,1008,
  	1007,1,0,0,0,1008,1009,1,0,0,0,1009,1010,1,0,0,0,1010,1236,5,137,0,0,
  	1011,1012,5,52,0,0,1012,1013,5,136,0,0,1013,1236,5,137,0,0,1014,1015,
  	5,53,0,0,1015,1016,5,136,0,0,1016,1017,3,186,93,0,1017,1018,5,137,0,0,
  	1018,1236,1,0,0,0,1019,1020,5,54,0,0,1020,1021,5,136,0,0,1021,1022,3,
  	186,93,0,1022,1023,5,137,0,0,1023,1236,1,0,0,0,1024,1025,5,55,0,0,1025,
  	1026,5,136,0,0,1026,1027,3,186,93,0,1027,1028,5,137,0,0,1028,1236,1,0,
  	0,0,1029,1030,5,56,0,0,1030,1031,5,136,0,0,1031,1032,3,186,93,0,1032,
  	1033,5,137,0,0,1033,1236,1,0,0,0,1034,1035,5,57,0,0,1035,1037,5,136,0,
  	0,1036,1038,3,96,48,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,1039,1,
  	0,0,0,1039,1236,5,137,0,0,1040,1236,3,210,105,0,1041,1042,5,58,0,0,1042,
  	1043,5,136,0,0,1043,1044,3,186,93,0,1044,1045,5,137,0,0,1045,1236,1,0,
  	0,0,1046,1236,3,212,106,0,1047,1048,5,59,0,0,1048,1049,5,136,0,0,1049,
  	1050,3,186,93,0,1050,1051,5,137,0,0,1051,1236,1,0,0,0,1052,1053,5,60,
  	0,0,1053,1054,5,136,0,0,1054,1055,3,186,93,0,1055,1056,5,137,0,0,1056,
  	1236,1,0,0,0,1057,1058,5,61,0,0,1058,1059,5,136,0,0,1059,1060,3,186,93,
  	0,1060,1061,5,137,0,0,1061,1236,1,0,0,0,1062,1063,5,62,0,0,1063,1064,
  	5,136,0,0,1064,1065,3,186,93,0,1065,1066,5,148,0,0,1066,1067,3,186,93,
  	0,1067,1068,5,137,0,0,1068,1236,1,0,0,0,1069,1070,5,63,0,0,1070,1071,
  	5,136,0,0,1071,1072,3,186,93,0,1072,1073,5,148,0,0,1073,1074,3,186,93,
  	0,1074,1075,5,137,0,0,1075,1236,1,0,0,0,1076,1077,5,64,0,0,1077,1078,
  	5,136,0,0,1078,1079,3,186,93,0,1079,1080,5,148,0,0,1080,1081,3,186,93,
  	0,1081,1082,5,137,0,0,1082,1236,1,0,0,0,1083,1084,5,65,0,0,1084,1085,
  	5,136,0,0,1085,1086,3,186,93,0,1086,1087,5,148,0,0,1087,1088,3,186,93,
  	0,1088,1089,5,137,0,0,1089,1236,1,0,0,0,1090,1091,5,66,0,0,1091,1092,
  	5,136,0,0,1092,1093,3,186,93,0,1093,1094,5,148,0,0,1094,1095,3,186,93,
  	0,1095,1096,5,137,0,0,1096,1236,1,0,0,0,1097,1098,5,68,0,0,1098,1099,
  	5,136,0,0,1099,1100,3,186,93,0,1100,1101,5,137,0,0,1101,1236,1,0,0,0,
  	1102,1103,5,69,0,0,1103,1104,5,136,0,0,1104,1105,3,186,93,0,1105,1106,
  	5,137,0,0,1106,1236,1,0,0,0,1107,1108,5,70,0,0,1108,1109,5,136,0,0,1109,
  	1110,3,186,93,0,1110,1111,5,137,0,0,1111,1236,1,0,0,0,1112,1113,5,71,
  	0,0,1113,1114,5,136,0,0,1114,1115,3,186,93,0,1115,1116,5,137,0,0,1116,
  	1236,1,0,0,0,1117,1118,5,72,0,0,1118,1119,5,136,0,0,1119,1120,3,186,93,
  	0,1120,1121,5,137,0,0,1121,1236,1,0,0,0,1122,1123,5,73,0,0,1123,1124,
  	5,136,0,0,1124,1125,3,186,93,0,1125,1126,5,137,0,0,1126,1236,1,0,0,0,
  	1127,1128,5,74,0,0,1128,1129,5,136,0,0,1129,1130,3,186,93,0,1130,1131,
  	5,137,0,0,1131,1236,1,0,0,0,1132,1133,5,75,0,0,1133,1134,5,136,0,0,1134,
  	1135,3,186,93,0,1135,1136,5,137,0,0,1136,1236,1,0,0,0,1137,1138,5,76,
  	0,0,1138,1139,5,136,0,0,1139,1236,5,137,0,0,1140,1141,5,77,0,0,1141,1142,
  	5,136,0,0,1142,1236,5,137,0,0,1143,1144,5,78,0,0,1144,1145,5,136,0,0,
  	1145,1236,5,137,0,0,1146,1147,5,79,0,0,1147,1148,5,136,0,0,1148,1149,
  	3,186,93,0,1149,1150,5,137,0,0,1150,1236,1,0,0,0,1151,1152,5,80,0,0,1152,
  	1153,5,136,0,0,1153,1154,3,186,93,0,1154,1155,5,137,0,0,1155,1236,1,0,
  	0,0,1156,1157,5,81,0,0,1157,1158,5,136,0,0,1158,1159,3,186,93,0,1159,
  	1160,5,137,0,0,1160,1236,1,0,0,0,1161,1162,5,82,0,0,1162,1163,5,136,0,
  	0,1163,1164,3,186,93,0,1164,1165,5,137,0,0,1165,1236,1,0,0,0,1166,1167,
  	5,83,0,0,1167,1168,5,136,0,0,1168,1169,3,186,93,0,1169,1170,5,137,0,0,
  	1170,1236,1,0,0,0,1171,1172,5,84,0,0,1172,1174,5,136,0,0,1173,1175,3,
  	96,48,0,1174,1173,1,0,0,0,1174,1175,1,0,0,0,1175,1176,1,0,0,0,1176,1236,
  	5,137,0,0,1177,1178,5,85,0,0,1178,1179,5,136,0,0,1179,1180,3,186,93,0,
  	1180,1181,5,148,0,0,1181,1182,3,186,93,0,1182,1183,5,148,0,0,1183,1184,
  	3,186,93,0,1184,1185,5,137,0,0,1185,1236,1,0,0,0,1186,1187,5,86,0,0,1187,
  	1188,5,136,0,0,1188,1189,3,186,93,0,1189,1190,5,148,0,0,1190,1191,3,186,
  	93,0,1191,1192,5,137,0,0,1192,1236,1,0,0,0,1193,1194,5,87,0,0,1194,1195,
  	5,136,0,0,1195,1196,3,186,93,0,1196,1197,5,148,0,0,1197,1198,3,186,93,
  	0,1198,1199,5,137,0,0,1199,1236,1,0,0,0,1200,1201,5,30,0,0,1201,1202,
  	5,136,0,0,1202,1203,3,186,93,0,1203,1204,5,148,0,0,1204,1205,3,186,93,
  	0,1205,1206,5,137,0,0,1206,1236,1,0,0,0,1207,1208,5,31,0,0,1208,1209,
  	5,136,0,0,1209,1210,3,186,93,0,1210,1211,5,137,0,0,1211,1236,1,0,0,0,
  	1212,1213,5,32,0,0,1213,1214,5,136,0,0,1214,1215,3,186,93,0,1215,1216,
  	5,137,0,0,1216,1236,1,0,0,0,1217,1218,5,33,0,0,1218,1219,5,136,0,0,1219,
  	1220,3,186,93,0,1220,1221,5,137,0,0,1221,1236,1,0,0,0,1222,1223,5,34,
  	0,0,1223,1224,5,136,0,0,1224,1225,3,186,93,0,1225,1226,5,137,0,0,1226,
  	1236,1,0,0,0,1227,1228,5,88,0,0,1228,1229,5,136,0,0,1229,1230,3,186,93,
  	0,1230,1231,5,137,0,0,1231,1236,1,0,0,0,1232,1236,3,208,104,0,1233,1236,
  	3,214,107,0,1234,1236,3,216,108,0,1235,967,1,0,0,0,1235,968,1,0,0,0,1235,
  	973,1,0,0,0,1235,978,1,0,0,0,1235,985,1,0,0,0,1235,990,1,0,0,0,1235,995,
  	1,0,0,0,1235,1000,1,0,0,0,1235,1005,1,0,0,0,1235,1011,1,0,0,0,1235,1014,
  	1,0,0,0,1235,1019,1,0,0,0,1235,1024,1,0,0,0,1235,1029,1,0,0,0,1235,1034,
  	1,0,0,0,1235,1040,1,0,0,0,1235,1041,1,0,0,0,1235,1046,1,0,0,0,1235,1047,
  	1,0,0,0,1235,1052,1,0,0,0,1235,1057,1,0,0,0,1235,1062,1,0,0,0,1235,1069,
  	1,0,0,0,1235,1076,1,0,0,0,1235,1083,1,0,0,0,1235,1090,1,0,0,0,1235,1097,
  	1,0,0,0,1235,1102,1,0,0,0,1235,1107,1,0,0,0,1235,1112,1,0,0,0,1235,1117,
  	1,0,0,0,1235,1122,1,0,0,0,1235,1127,1,0,0,0,1235,1132,1,0,0,0,1235,1137,
  	1,0,0,0,1235,1140,1,0,0,0,1235,1143,1,0,0,0,1235,1146,1,0,0,0,1235,1151,
  	1,0,0,0,1235,1156,1,0,0,0,1235,1161,1,0,0,0,1235,1166,1,0,0,0,1235,1171,
  	1,0,0,0,1235,1177,1,0,0,0,1235,1186,1,0,0,0,1235,1193,1,0,0,0,1235,1200,
  	1,0,0,0,1235,1207,1,0,0,0,1235,1212,1,0,0,0,1235,1217,1,0,0,0,1235,1222,
  	1,0,0,0,1235,1227,1,0,0,0,1235,1232,1,0,0,0,1235,1233,1,0,0,0,1235,1234,
  	1,0,0,0,1236,207,1,0,0,0,1237,1238,5,35,0,0,1238,1239,5,136,0,0,1239,
  	1240,3,186,93,0,1240,1241,5,148,0,0,1241,1244,3,186,93,0,1242,1243,5,
  	148,0,0,1243,1245,3,186,93,0,1244,1242,1,0,0,0,1244,1245,1,0,0,0,1245,
  	1246,1,0,0,0,1246,1247,5,137,0,0,1247,209,1,0,0,0,1248,1249,5,36,0,0,
  	1249,1250,5,136,0,0,1250,1251,3,186,93,0,1251,1252,5,148,0,0,1252,1255,
  	3,186,93,0,1253,1254,5,148,0,0,1254,1256,3,186,93,0,1255,1253,1,0,0,0,
  	1255,1256,1,0,0,0,1256,1257,1,0,0,0,1257,1258,5,137,0,0,1258,211,1,0,
  	0,0,1259,1260,5,67,0,0,1260,1261,5,136,0,0,1261,1262,3,186,93,0,1262,
  	1263,5,148,0,0,1263,1264,3,186,93,0,1264,1265,5,148,0,0,1265,1268,3,186,
  	93,0,1266,1267,5,148,0,0,1267,1269,3,186,93,0,1268,1266,1,0,0,0,1268,
  	1269,1,0,0,0,1269,1270,1,0,0,0,1270,1271,5,137,0,0,1271,213,1,0,0,0,1272,
  	1273,5,98,0,0,1273,1274,3,54,27,0,1274,215,1,0,0,0,1275,1276,5,96,0,0,
  	1276,1277,5,98,0,0,1277,1278,3,54,27,0,1278,217,1,0,0,0,1279,1280,5,89,
  	0,0,1280,1282,5,136,0,0,1281,1283,5,5,0,0,1282,1281,1,0,0,0,1282,1283,
  	1,0,0,0,1283,1286,1,0,0,0,1284,1287,5,146,0,0,1285,1287,3,186,93,0,1286,
  	1284,1,0,0,0,1286,1285,1,0,0,0,1287,1288,1,0,0,0,1288,1344,5,137,0,0,
  	1289,1290,5,90,0,0,1290,1292,5,136,0,0,1291,1293,5,5,0,0,1292,1291,1,
  	0,0,0,1292,1293,1,0,0,0,1293,1294,1,0,0,0,1294,1295,3,186,93,0,1295,1296,
  	5,137,0,0,1296,1344,1,0,0,0,1297,1298,5,91,0,0,1298,1300,5,136,0,0,1299,
  	1301,5,5,0,0,1300,1299,1,0,0,0,1300,1301,1,0,0,0,1301,1302,1,0,0,0,1302,
  	1303,3,186,93,0,1303,1304,5,137,0,0,1304,1344,1,0,0,0,1305,1306,5,92,
  	0,0,1306,1308,5,136,0,0,1307,1309,5,5,0,0,1308,1307,1,0,0,0,1308,1309,
  	1,0,0,0,1309,1310,1,0,0,0,1310,1311,3,186,93,0,1311,1312,5,137,0,0,1312,
  	1344,1,0,0,0,1313,1314,5,93,0,0,1314,1316,5,136,0,0,1315,1317,5,5,0,0,
  	1316,1315,1,0,0,0,1316,1317,1,0,0,0,1317,1318,1,0,0,0,1318,1319,3,186,
  	93,0,1319,1320,5,137,0,0,1320,1344,1,0,0,0,1321,1322,5,94,0,0,1322,1324,
  	5,136,0,0,1323,1325,5,5,0,0,1324,1323,1,0,0,0,1324,1325,1,0,0,0,1325,
  	1326,1,0,0,0,1326,1327,3,186,93,0,1327,1328,5,137,0,0,1328,1344,1,0,0,
  	0,1329,1330,5,95,0,0,1330,1332,5,136,0,0,1331,1333,5,5,0,0,1332,1331,
  	1,0,0,0,1332,1333,1,0,0,0,1333,1334,1,0,0,0,1334,1339,3,186,93,0,1335,
  	1336,5,142,0,0,1336,1337,5,99,0,0,1337,1338,5,151,0,0,1338,1340,3,234,
  	117,0,1339,1335,1,0,0,0,1339,1340,1,0,0,0,1340,1341,1,0,0,0,1341,1342,
  	5,137,0,0,1342,1344,1,0,0,0,1343,1279,1,0,0,0,1343,1289,1,0,0,0,1343,
  	1297,1,0,0,0,1343,1305,1,0,0,0,1343,1313,1,0,0,0,1343,1321,1,0,0,0,1343,
  	1329,1,0,0,0,1344,219,1,0,0,0,1345,1347,3,236,118,0,1346,1348,3,94,47,
  	0,1347,1346,1,0,0,0,1347,1348,1,0,0,0,1348,221,1,0,0,0,1349,1353,3,234,
  	117,0,1350,1354,5,114,0,0,1351,1352,5,129,0,0,1352,1354,3,236,118,0,1353,
  	1350,1,0,0,0,1353,1351,1,0,0,0,1353,1354,1,0,0,0,1354,223,1,0,0,0,1355,
  	1359,3,226,113,0,1356,1359,3,228,114,0,1357,1359,3,230,115,0,1358,1355,
  	1,0,0,0,1358,1356,1,0,0,0,1358,1357,1,0,0,0,1359,225,1,0,0,0,1360,1361,
  	7,9,0,0,1361,227,1,0,0,0,1362,1363,7,10,0,0,1363,229,1,0,0,0,1364,1365,
  	7,11,0,0,1365,231,1,0,0,0,1366,1367,7,12,0,0,1367,233,1,0,0,0,1368,1369,
  	7,13,0,0,1369,235,1,0,0,0,1370,1373,5,108,0,0,1371,1373,3,238,119,0,1372,
  	1370,1,0,0,0,1372,1371,1,0,0,0,1373,237,1,0,0,0,1374,1375,7,14,0,0,1375,
  	239,1,0,0,0,1376,1379,5,111,0,0,1377,1379,3,242,121,0,1378,1376,1,0,0,
  	0,1378,1377,1,0,0,0,1379,241,1,0,0,0,1380,1381,5,140,0,0,1381,1382,5,
  	141,0,0,1382,243,1,0,0,0,130,249,255,263,265,279,292,297,300,311,318,
  	327,333,337,343,346,351,355,363,371,376,381,384,387,390,397,405,410,416,
  	425,434,438,442,444,454,459,463,469,474,479,484,487,492,496,507,518,535,
  	542,551,559,568,578,588,600,607,611,620,625,632,636,645,648,656,660,665,
  	672,683,686,690,695,699,704,711,714,722,731,743,751,756,759,770,776,798,
  	807,810,813,816,820,826,834,844,852,858,862,866,870,880,892,900,906,910,
  	915,919,925,933,940,947,951,965,1008,1037,1174,1235,1244,1255,1268,1282,
  	1286,1292,1300,1308,1316,1324,1332,1339,1343,1347,1353,1358,1372,1378
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sparqlqueryparserParserStaticData = staticData.release();
}

}

SparqlQueryParser::SparqlQueryParser(TokenStream *input) : SparqlQueryParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

SparqlQueryParser::SparqlQueryParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  SparqlQueryParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *sparqlqueryparserParserStaticData->atn, sparqlqueryparserParserStaticData->decisionToDFA, sparqlqueryparserParserStaticData->sharedContextCache, options);
}

SparqlQueryParser::~SparqlQueryParser() {
  delete _interpreter;
}

const atn::ATN& SparqlQueryParser::getATN() const {
  return *sparqlqueryparserParserStaticData->atn;
}

std::string SparqlQueryParser::getGrammarFileName() const {
  return "SparqlQueryParser.g4";
}

const std::vector<std::string>& SparqlQueryParser::getRuleNames() const {
  return sparqlqueryparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& SparqlQueryParser::getVocabulary() const {
  return sparqlqueryparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SparqlQueryParser::getSerializedATN() const {
  return sparqlqueryparserParserStaticData->serializedATN;
}


//----------------- QueryContext ------------------------------------------------------------------

SparqlQueryParser::QueryContext::QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PrologueContext* SparqlQueryParser::QueryContext::prologue() {
  return getRuleContext<SparqlQueryParser::PrologueContext>(0);
}

SparqlQueryParser::ValuesClauseContext* SparqlQueryParser::QueryContext::valuesClause() {
  return getRuleContext<SparqlQueryParser::ValuesClauseContext>(0);
}

tree::TerminalNode* SparqlQueryParser::QueryContext::EOF() {
  return getToken(SparqlQueryParser::EOF, 0);
}

SparqlQueryParser::SelectQueryContext* SparqlQueryParser::QueryContext::selectQuery() {
  return getRuleContext<SparqlQueryParser::SelectQueryContext>(0);
}

SparqlQueryParser::ConstructQueryContext* SparqlQueryParser::QueryContext::constructQuery() {
  return getRuleContext<SparqlQueryParser::ConstructQueryContext>(0);
}

SparqlQueryParser::DescribeQueryContext* SparqlQueryParser::QueryContext::describeQuery() {
  return getRuleContext<SparqlQueryParser::DescribeQueryContext>(0);
}

SparqlQueryParser::AskQueryContext* SparqlQueryParser::QueryContext::askQuery() {
  return getRuleContext<SparqlQueryParser::AskQueryContext>(0);
}

SparqlQueryParser::ShowQueryContext* SparqlQueryParser::QueryContext::showQuery() {
  return getRuleContext<SparqlQueryParser::ShowQueryContext>(0);
}


size_t SparqlQueryParser::QueryContext::getRuleIndex() const {
  return SparqlQueryParser::RuleQuery;
}


std::any SparqlQueryParser::QueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitQuery(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::QueryContext* SparqlQueryParser::query() {
  QueryContext *_localctx = _tracker.createInstance<QueryContext>(_ctx, getState());
  enterRule(_localctx, 0, SparqlQueryParser::RuleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(255);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::BASE:
      case SparqlQueryParser::PREFIX:
      case SparqlQueryParser::SELECT:
      case SparqlQueryParser::CONSTRUCT:
      case SparqlQueryParser::DESCRIBE:
      case SparqlQueryParser::ASK: {
        enterOuterAlt(_localctx, 1);
        setState(244);
        prologue();
        setState(249);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case SparqlQueryParser::SELECT: {
            setState(245);
            selectQuery();
            break;
          }

          case SparqlQueryParser::CONSTRUCT: {
            setState(246);
            constructQuery();
            break;
          }

          case SparqlQueryParser::DESCRIBE: {
            setState(247);
            describeQuery();
            break;
          }

          case SparqlQueryParser::ASK: {
            setState(248);
            askQuery();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(251);
        valuesClause();
        setState(252);
        match(SparqlQueryParser::EOF);
        break;
      }

      case SparqlQueryParser::SHOW: {
        enterOuterAlt(_localctx, 2);
        setState(254);
        showQuery();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShowQueryContext ------------------------------------------------------------------

SparqlQueryParser::ShowQueryContext::ShowQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ShowQueryContext::SHOW() {
  return getToken(SparqlQueryParser::SHOW, 0);
}

tree::TerminalNode* SparqlQueryParser::ShowQueryContext::TEXT() {
  return getToken(SparqlQueryParser::TEXT, 0);
}

tree::TerminalNode* SparqlQueryParser::ShowQueryContext::INDEX() {
  return getToken(SparqlQueryParser::INDEX, 0);
}


size_t SparqlQueryParser::ShowQueryContext::getRuleIndex() const {
  return SparqlQueryParser::RuleShowQuery;
}


std::any SparqlQueryParser::ShowQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitShowQuery(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ShowQueryContext* SparqlQueryParser::showQuery() {
  ShowQueryContext *_localctx = _tracker.createInstance<ShowQueryContext>(_ctx, getState());
  enterRule(_localctx, 2, SparqlQueryParser::RuleShowQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(257);
    match(SparqlQueryParser::SHOW);
    setState(258);
    match(SparqlQueryParser::TEXT);
    setState(259);
    match(SparqlQueryParser::INDEX);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrologueContext ------------------------------------------------------------------

SparqlQueryParser::PrologueContext::PrologueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::BaseDeclContext *> SparqlQueryParser::PrologueContext::baseDecl() {
  return getRuleContexts<SparqlQueryParser::BaseDeclContext>();
}

SparqlQueryParser::BaseDeclContext* SparqlQueryParser::PrologueContext::baseDecl(size_t i) {
  return getRuleContext<SparqlQueryParser::BaseDeclContext>(i);
}

std::vector<SparqlQueryParser::PrefixDeclContext *> SparqlQueryParser::PrologueContext::prefixDecl() {
  return getRuleContexts<SparqlQueryParser::PrefixDeclContext>();
}

SparqlQueryParser::PrefixDeclContext* SparqlQueryParser::PrologueContext::prefixDecl(size_t i) {
  return getRuleContext<SparqlQueryParser::PrefixDeclContext>(i);
}


size_t SparqlQueryParser::PrologueContext::getRuleIndex() const {
  return SparqlQueryParser::RulePrologue;
}


std::any SparqlQueryParser::PrologueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPrologue(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PrologueContext* SparqlQueryParser::prologue() {
  PrologueContext *_localctx = _tracker.createInstance<PrologueContext>(_ctx, getState());
  enterRule(_localctx, 4, SparqlQueryParser::RulePrologue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(265);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::BASE

    || _la == SparqlQueryParser::PREFIX) {
      setState(263);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SparqlQueryParser::BASE: {
          setState(261);
          baseDecl();
          break;
        }

        case SparqlQueryParser::PREFIX: {
          setState(262);
          prefixDecl();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(267);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseDeclContext ------------------------------------------------------------------

SparqlQueryParser::BaseDeclContext::BaseDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::BaseDeclContext::BASE() {
  return getToken(SparqlQueryParser::BASE, 0);
}

tree::TerminalNode* SparqlQueryParser::BaseDeclContext::IRIREF() {
  return getToken(SparqlQueryParser::IRIREF, 0);
}


size_t SparqlQueryParser::BaseDeclContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBaseDecl;
}


std::any SparqlQueryParser::BaseDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBaseDecl(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BaseDeclContext* SparqlQueryParser::baseDecl() {
  BaseDeclContext *_localctx = _tracker.createInstance<BaseDeclContext>(_ctx, getState());
  enterRule(_localctx, 6, SparqlQueryParser::RuleBaseDecl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(268);
    match(SparqlQueryParser::BASE);
    setState(269);
    match(SparqlQueryParser::IRIREF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrefixDeclContext ------------------------------------------------------------------

SparqlQueryParser::PrefixDeclContext::PrefixDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PrefixDeclContext::PREFIX() {
  return getToken(SparqlQueryParser::PREFIX, 0);
}

tree::TerminalNode* SparqlQueryParser::PrefixDeclContext::PNAME_NS() {
  return getToken(SparqlQueryParser::PNAME_NS, 0);
}

tree::TerminalNode* SparqlQueryParser::PrefixDeclContext::IRIREF() {
  return getToken(SparqlQueryParser::IRIREF, 0);
}


size_t SparqlQueryParser::PrefixDeclContext::getRuleIndex() const {
  return SparqlQueryParser::RulePrefixDecl;
}


std::any SparqlQueryParser::PrefixDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPrefixDecl(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PrefixDeclContext* SparqlQueryParser::prefixDecl() {
  PrefixDeclContext *_localctx = _tracker.createInstance<PrefixDeclContext>(_ctx, getState());
  enterRule(_localctx, 8, SparqlQueryParser::RulePrefixDecl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(271);
    match(SparqlQueryParser::PREFIX);
    setState(272);
    match(SparqlQueryParser::PNAME_NS);
    setState(273);
    match(SparqlQueryParser::IRIREF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectQueryContext ------------------------------------------------------------------

SparqlQueryParser::SelectQueryContext::SelectQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::SelectClauseContext* SparqlQueryParser::SelectQueryContext::selectClause() {
  return getRuleContext<SparqlQueryParser::SelectClauseContext>(0);
}

SparqlQueryParser::WhereClauseContext* SparqlQueryParser::SelectQueryContext::whereClause() {
  return getRuleContext<SparqlQueryParser::WhereClauseContext>(0);
}

SparqlQueryParser::SolutionModifierContext* SparqlQueryParser::SelectQueryContext::solutionModifier() {
  return getRuleContext<SparqlQueryParser::SolutionModifierContext>(0);
}

std::vector<SparqlQueryParser::DatasetClauseContext *> SparqlQueryParser::SelectQueryContext::datasetClause() {
  return getRuleContexts<SparqlQueryParser::DatasetClauseContext>();
}

SparqlQueryParser::DatasetClauseContext* SparqlQueryParser::SelectQueryContext::datasetClause(size_t i) {
  return getRuleContext<SparqlQueryParser::DatasetClauseContext>(i);
}


size_t SparqlQueryParser::SelectQueryContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSelectQuery;
}


std::any SparqlQueryParser::SelectQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSelectQuery(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::SelectQueryContext* SparqlQueryParser::selectQuery() {
  SelectQueryContext *_localctx = _tracker.createInstance<SelectQueryContext>(_ctx, getState());
  enterRule(_localctx, 10, SparqlQueryParser::RuleSelectQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(275);
    selectClause();
    setState(279);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::FROM) {
      setState(276);
      datasetClause();
      setState(281);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(282);
    whereClause();
    setState(283);
    solutionModifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubSelectContext ------------------------------------------------------------------

SparqlQueryParser::SubSelectContext::SubSelectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::SelectClauseContext* SparqlQueryParser::SubSelectContext::selectClause() {
  return getRuleContext<SparqlQueryParser::SelectClauseContext>(0);
}

SparqlQueryParser::WhereClauseContext* SparqlQueryParser::SubSelectContext::whereClause() {
  return getRuleContext<SparqlQueryParser::WhereClauseContext>(0);
}

SparqlQueryParser::SolutionModifierContext* SparqlQueryParser::SubSelectContext::solutionModifier() {
  return getRuleContext<SparqlQueryParser::SolutionModifierContext>(0);
}

SparqlQueryParser::ValuesClauseContext* SparqlQueryParser::SubSelectContext::valuesClause() {
  return getRuleContext<SparqlQueryParser::ValuesClauseContext>(0);
}


size_t SparqlQueryParser::SubSelectContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSubSelect;
}


std::any SparqlQueryParser::SubSelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSubSelect(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::SubSelectContext* SparqlQueryParser::subSelect() {
  SubSelectContext *_localctx = _tracker.createInstance<SubSelectContext>(_ctx, getState());
  enterRule(_localctx, 12, SparqlQueryParser::RuleSubSelect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(285);
    selectClause();
    setState(286);
    whereClause();
    setState(287);
    solutionModifier();
    setState(288);
    valuesClause();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectClauseContext ------------------------------------------------------------------

SparqlQueryParser::SelectClauseContext::SelectClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::SelectClauseContext::SELECT() {
  return getToken(SparqlQueryParser::SELECT, 0);
}

tree::TerminalNode* SparqlQueryParser::SelectClauseContext::ASTERISK() {
  return getToken(SparqlQueryParser::ASTERISK, 0);
}

SparqlQueryParser::SelectModifierContext* SparqlQueryParser::SelectClauseContext::selectModifier() {
  return getRuleContext<SparqlQueryParser::SelectModifierContext>(0);
}

std::vector<SparqlQueryParser::SelectVariablesContext *> SparqlQueryParser::SelectClauseContext::selectVariables() {
  return getRuleContexts<SparqlQueryParser::SelectVariablesContext>();
}

SparqlQueryParser::SelectVariablesContext* SparqlQueryParser::SelectClauseContext::selectVariables(size_t i) {
  return getRuleContext<SparqlQueryParser::SelectVariablesContext>(i);
}


size_t SparqlQueryParser::SelectClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSelectClause;
}


std::any SparqlQueryParser::SelectClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSelectClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::SelectClauseContext* SparqlQueryParser::selectClause() {
  SelectClauseContext *_localctx = _tracker.createInstance<SelectClauseContext>(_ctx, getState());
  enterRule(_localctx, 14, SparqlQueryParser::RuleSelectClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(290);
    match(SparqlQueryParser::SELECT);
    setState(292);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::DISTINCT

    || _la == SparqlQueryParser::REDUCED) {
      setState(291);
      selectModifier();
    }
    setState(300);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2:
      case SparqlQueryParser::OPEN_BRACE: {
        setState(295); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(294);
          selectVariables();
          setState(297); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 112) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 112)) & 16777219) != 0));
        break;
      }

      case SparqlQueryParser::ASTERISK: {
        setState(299);
        match(SparqlQueryParser::ASTERISK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectModifierContext ------------------------------------------------------------------

SparqlQueryParser::SelectModifierContext::SelectModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::SelectModifierContext::DISTINCT() {
  return getToken(SparqlQueryParser::DISTINCT, 0);
}

tree::TerminalNode* SparqlQueryParser::SelectModifierContext::REDUCED() {
  return getToken(SparqlQueryParser::REDUCED, 0);
}


size_t SparqlQueryParser::SelectModifierContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSelectModifier;
}


std::any SparqlQueryParser::SelectModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSelectModifier(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::SelectModifierContext* SparqlQueryParser::selectModifier() {
  SelectModifierContext *_localctx = _tracker.createInstance<SelectModifierContext>(_ctx, getState());
  enterRule(_localctx, 16, SparqlQueryParser::RuleSelectModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(302);
    _la = _input->LA(1);
    if (!(_la == SparqlQueryParser::DISTINCT

    || _la == SparqlQueryParser::REDUCED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectVariablesContext ------------------------------------------------------------------

SparqlQueryParser::SelectVariablesContext::SelectVariablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SparqlQueryParser::SelectVariablesContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSelectVariables;
}

void SparqlQueryParser::SelectVariablesContext::copyFrom(SelectVariablesContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SelectSingleVariableContext ------------------------------------------------------------------

SparqlQueryParser::VarContext* SparqlQueryParser::SelectSingleVariableContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

SparqlQueryParser::SelectSingleVariableContext::SelectSingleVariableContext(SelectVariablesContext *ctx) { copyFrom(ctx); }


std::any SparqlQueryParser::SelectSingleVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSelectSingleVariable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectExpressionAsVariableContext ------------------------------------------------------------------

tree::TerminalNode* SparqlQueryParser::SelectExpressionAsVariableContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::SelectExpressionAsVariableContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::SelectExpressionAsVariableContext::AS() {
  return getToken(SparqlQueryParser::AS, 0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::SelectExpressionAsVariableContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

tree::TerminalNode* SparqlQueryParser::SelectExpressionAsVariableContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

SparqlQueryParser::SelectExpressionAsVariableContext::SelectExpressionAsVariableContext(SelectVariablesContext *ctx) { copyFrom(ctx); }


std::any SparqlQueryParser::SelectExpressionAsVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSelectExpressionAsVariable(this);
  else
    return visitor->visitChildren(this);
}
SparqlQueryParser::SelectVariablesContext* SparqlQueryParser::selectVariables() {
  SelectVariablesContext *_localctx = _tracker.createInstance<SelectVariablesContext>(_ctx, getState());
  enterRule(_localctx, 18, SparqlQueryParser::RuleSelectVariables);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(311);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        _localctx = _tracker.createInstance<SparqlQueryParser::SelectSingleVariableContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(304);
        var();
        break;
      }

      case SparqlQueryParser::OPEN_BRACE: {
        _localctx = _tracker.createInstance<SparqlQueryParser::SelectExpressionAsVariableContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(305);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(306);
        expression();
        setState(307);
        match(SparqlQueryParser::AS);
        setState(308);
        var();
        setState(309);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructQueryContext ------------------------------------------------------------------

SparqlQueryParser::ConstructQueryContext::ConstructQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ConstructQueryContext::CONSTRUCT() {
  return getToken(SparqlQueryParser::CONSTRUCT, 0);
}

SparqlQueryParser::ConstructTemplateContext* SparqlQueryParser::ConstructQueryContext::constructTemplate() {
  return getRuleContext<SparqlQueryParser::ConstructTemplateContext>(0);
}

SparqlQueryParser::WhereClauseContext* SparqlQueryParser::ConstructQueryContext::whereClause() {
  return getRuleContext<SparqlQueryParser::WhereClauseContext>(0);
}

SparqlQueryParser::SolutionModifierContext* SparqlQueryParser::ConstructQueryContext::solutionModifier() {
  return getRuleContext<SparqlQueryParser::SolutionModifierContext>(0);
}

tree::TerminalNode* SparqlQueryParser::ConstructQueryContext::WHERE() {
  return getToken(SparqlQueryParser::WHERE, 0);
}

tree::TerminalNode* SparqlQueryParser::ConstructQueryContext::OPEN_CURLY_BRACE() {
  return getToken(SparqlQueryParser::OPEN_CURLY_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::ConstructQueryContext::CLOSE_CURLY_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_CURLY_BRACE, 0);
}

std::vector<SparqlQueryParser::DatasetClauseContext *> SparqlQueryParser::ConstructQueryContext::datasetClause() {
  return getRuleContexts<SparqlQueryParser::DatasetClauseContext>();
}

SparqlQueryParser::DatasetClauseContext* SparqlQueryParser::ConstructQueryContext::datasetClause(size_t i) {
  return getRuleContext<SparqlQueryParser::DatasetClauseContext>(i);
}

SparqlQueryParser::TriplesTemplateContext* SparqlQueryParser::ConstructQueryContext::triplesTemplate() {
  return getRuleContext<SparqlQueryParser::TriplesTemplateContext>(0);
}


size_t SparqlQueryParser::ConstructQueryContext::getRuleIndex() const {
  return SparqlQueryParser::RuleConstructQuery;
}


std::any SparqlQueryParser::ConstructQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitConstructQuery(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ConstructQueryContext* SparqlQueryParser::constructQuery() {
  ConstructQueryContext *_localctx = _tracker.createInstance<ConstructQueryContext>(_ctx, getState());
  enterRule(_localctx, 20, SparqlQueryParser::RuleConstructQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(313);
    match(SparqlQueryParser::CONSTRUCT);
    setState(337);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::OPEN_CURLY_BRACE: {
        setState(314);
        constructTemplate();
        setState(318);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == SparqlQueryParser::FROM) {
          setState(315);
          datasetClause();
          setState(320);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(321);
        whereClause();
        setState(322);
        solutionModifier();
        break;
      }

      case SparqlQueryParser::FROM:
      case SparqlQueryParser::WHERE: {
        setState(327);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == SparqlQueryParser::FROM) {
          setState(324);
          datasetClause();
          setState(329);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(330);
        match(SparqlQueryParser::WHERE);
        setState(331);
        match(SparqlQueryParser::OPEN_CURLY_BRACE);
        setState(333);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::TRUE

        || _la == SparqlQueryParser::FALSE || ((((_la - 108) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 108)) & 4564451263) != 0)) {
          setState(332);
          triplesTemplate();
        }
        setState(335);
        match(SparqlQueryParser::CLOSE_CURLY_BRACE);
        setState(336);
        solutionModifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DescribeQueryContext ------------------------------------------------------------------

SparqlQueryParser::DescribeQueryContext::DescribeQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::DescribeQueryContext::DESCRIBE() {
  return getToken(SparqlQueryParser::DESCRIBE, 0);
}

SparqlQueryParser::SolutionModifierContext* SparqlQueryParser::DescribeQueryContext::solutionModifier() {
  return getRuleContext<SparqlQueryParser::SolutionModifierContext>(0);
}

tree::TerminalNode* SparqlQueryParser::DescribeQueryContext::ASTERISK() {
  return getToken(SparqlQueryParser::ASTERISK, 0);
}

std::vector<SparqlQueryParser::DatasetClauseContext *> SparqlQueryParser::DescribeQueryContext::datasetClause() {
  return getRuleContexts<SparqlQueryParser::DatasetClauseContext>();
}

SparqlQueryParser::DatasetClauseContext* SparqlQueryParser::DescribeQueryContext::datasetClause(size_t i) {
  return getRuleContext<SparqlQueryParser::DatasetClauseContext>(i);
}

SparqlQueryParser::WhereClauseContext* SparqlQueryParser::DescribeQueryContext::whereClause() {
  return getRuleContext<SparqlQueryParser::WhereClauseContext>(0);
}

std::vector<SparqlQueryParser::VarOrIRIContext *> SparqlQueryParser::DescribeQueryContext::varOrIRI() {
  return getRuleContexts<SparqlQueryParser::VarOrIRIContext>();
}

SparqlQueryParser::VarOrIRIContext* SparqlQueryParser::DescribeQueryContext::varOrIRI(size_t i) {
  return getRuleContext<SparqlQueryParser::VarOrIRIContext>(i);
}


size_t SparqlQueryParser::DescribeQueryContext::getRuleIndex() const {
  return SparqlQueryParser::RuleDescribeQuery;
}


std::any SparqlQueryParser::DescribeQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitDescribeQuery(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::DescribeQueryContext* SparqlQueryParser::describeQuery() {
  DescribeQueryContext *_localctx = _tracker.createInstance<DescribeQueryContext>(_ctx, getState());
  enterRule(_localctx, 22, SparqlQueryParser::RuleDescribeQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(339);
    match(SparqlQueryParser::DESCRIBE);
    setState(346);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        setState(341); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(340);
          varOrIRI();
          setState(343); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 108) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 108)) & 55) != 0));
        break;
      }

      case SparqlQueryParser::ASTERISK: {
        setState(345);
        match(SparqlQueryParser::ASTERISK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(351);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::FROM) {
      setState(348);
      datasetClause();
      setState(353);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(355);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::WHERE || _la == SparqlQueryParser::OPEN_CURLY_BRACE) {
      setState(354);
      whereClause();
    }
    setState(357);
    solutionModifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AskQueryContext ------------------------------------------------------------------

SparqlQueryParser::AskQueryContext::AskQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::AskQueryContext::ASK() {
  return getToken(SparqlQueryParser::ASK, 0);
}

SparqlQueryParser::WhereClauseContext* SparqlQueryParser::AskQueryContext::whereClause() {
  return getRuleContext<SparqlQueryParser::WhereClauseContext>(0);
}

SparqlQueryParser::SolutionModifierContext* SparqlQueryParser::AskQueryContext::solutionModifier() {
  return getRuleContext<SparqlQueryParser::SolutionModifierContext>(0);
}

std::vector<SparqlQueryParser::DatasetClauseContext *> SparqlQueryParser::AskQueryContext::datasetClause() {
  return getRuleContexts<SparqlQueryParser::DatasetClauseContext>();
}

SparqlQueryParser::DatasetClauseContext* SparqlQueryParser::AskQueryContext::datasetClause(size_t i) {
  return getRuleContext<SparqlQueryParser::DatasetClauseContext>(i);
}


size_t SparqlQueryParser::AskQueryContext::getRuleIndex() const {
  return SparqlQueryParser::RuleAskQuery;
}


std::any SparqlQueryParser::AskQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitAskQuery(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::AskQueryContext* SparqlQueryParser::askQuery() {
  AskQueryContext *_localctx = _tracker.createInstance<AskQueryContext>(_ctx, getState());
  enterRule(_localctx, 24, SparqlQueryParser::RuleAskQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(359);
    match(SparqlQueryParser::ASK);
    setState(363);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::FROM) {
      setState(360);
      datasetClause();
      setState(365);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(366);
    whereClause();
    setState(367);
    solutionModifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatasetClauseContext ------------------------------------------------------------------

SparqlQueryParser::DatasetClauseContext::DatasetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::DatasetClauseContext::FROM() {
  return getToken(SparqlQueryParser::FROM, 0);
}

SparqlQueryParser::IriContext* SparqlQueryParser::DatasetClauseContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

tree::TerminalNode* SparqlQueryParser::DatasetClauseContext::NAMED() {
  return getToken(SparqlQueryParser::NAMED, 0);
}


size_t SparqlQueryParser::DatasetClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleDatasetClause;
}


std::any SparqlQueryParser::DatasetClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitDatasetClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::DatasetClauseContext* SparqlQueryParser::datasetClause() {
  DatasetClauseContext *_localctx = _tracker.createInstance<DatasetClauseContext>(_ctx, getState());
  enterRule(_localctx, 26, SparqlQueryParser::RuleDatasetClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(369);
    match(SparqlQueryParser::FROM);
    setState(371);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::NAMED) {
      setState(370);
      match(SparqlQueryParser::NAMED);
    }
    setState(373);
    iri();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereClauseContext ------------------------------------------------------------------

SparqlQueryParser::WhereClauseContext::WhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::WhereClauseContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}

tree::TerminalNode* SparqlQueryParser::WhereClauseContext::WHERE() {
  return getToken(SparqlQueryParser::WHERE, 0);
}


size_t SparqlQueryParser::WhereClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleWhereClause;
}


std::any SparqlQueryParser::WhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitWhereClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::WhereClauseContext* SparqlQueryParser::whereClause() {
  WhereClauseContext *_localctx = _tracker.createInstance<WhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 28, SparqlQueryParser::RuleWhereClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::WHERE) {
      setState(375);
      match(SparqlQueryParser::WHERE);
    }
    setState(378);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SolutionModifierContext ------------------------------------------------------------------

SparqlQueryParser::SolutionModifierContext::SolutionModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::GroupClauseContext* SparqlQueryParser::SolutionModifierContext::groupClause() {
  return getRuleContext<SparqlQueryParser::GroupClauseContext>(0);
}

SparqlQueryParser::HavingClauseContext* SparqlQueryParser::SolutionModifierContext::havingClause() {
  return getRuleContext<SparqlQueryParser::HavingClauseContext>(0);
}

SparqlQueryParser::OrderClauseContext* SparqlQueryParser::SolutionModifierContext::orderClause() {
  return getRuleContext<SparqlQueryParser::OrderClauseContext>(0);
}

SparqlQueryParser::LimitOffsetClausesContext* SparqlQueryParser::SolutionModifierContext::limitOffsetClauses() {
  return getRuleContext<SparqlQueryParser::LimitOffsetClausesContext>(0);
}


size_t SparqlQueryParser::SolutionModifierContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSolutionModifier;
}


std::any SparqlQueryParser::SolutionModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSolutionModifier(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::SolutionModifierContext* SparqlQueryParser::solutionModifier() {
  SolutionModifierContext *_localctx = _tracker.createInstance<SolutionModifierContext>(_ctx, getState());
  enterRule(_localctx, 30, SparqlQueryParser::RuleSolutionModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(381);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::GROUP) {
      setState(380);
      groupClause();
    }
    setState(384);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::HAVING) {
      setState(383);
      havingClause();
    }
    setState(387);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::ORDER) {
      setState(386);
      orderClause();
    }
    setState(390);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::LIMIT

    || _la == SparqlQueryParser::OFFSET) {
      setState(389);
      limitOffsetClauses();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupClauseContext ------------------------------------------------------------------

SparqlQueryParser::GroupClauseContext::GroupClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::GroupClauseContext::GROUP() {
  return getToken(SparqlQueryParser::GROUP, 0);
}

tree::TerminalNode* SparqlQueryParser::GroupClauseContext::BY() {
  return getToken(SparqlQueryParser::BY, 0);
}

std::vector<SparqlQueryParser::GroupConditionContext *> SparqlQueryParser::GroupClauseContext::groupCondition() {
  return getRuleContexts<SparqlQueryParser::GroupConditionContext>();
}

SparqlQueryParser::GroupConditionContext* SparqlQueryParser::GroupClauseContext::groupCondition(size_t i) {
  return getRuleContext<SparqlQueryParser::GroupConditionContext>(i);
}


size_t SparqlQueryParser::GroupClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGroupClause;
}


std::any SparqlQueryParser::GroupClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGroupClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GroupClauseContext* SparqlQueryParser::groupClause() {
  GroupClauseContext *_localctx = _tracker.createInstance<GroupClauseContext>(_ctx, getState());
  enterRule(_localctx, 32, SparqlQueryParser::RuleGroupClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(392);
    match(SparqlQueryParser::GROUP);
    setState(393);
    match(SparqlQueryParser::BY);
    setState(395); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(394);
      groupCondition();
      setState(397); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 25) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 25)) & -16773121) != 0) || ((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & 140737517191935) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupConditionContext ------------------------------------------------------------------

SparqlQueryParser::GroupConditionContext::GroupConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::BuiltInCallContext* SparqlQueryParser::GroupConditionContext::builtInCall() {
  return getRuleContext<SparqlQueryParser::BuiltInCallContext>(0);
}

SparqlQueryParser::FunctionCallContext* SparqlQueryParser::GroupConditionContext::functionCall() {
  return getRuleContext<SparqlQueryParser::FunctionCallContext>(0);
}

tree::TerminalNode* SparqlQueryParser::GroupConditionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::GroupConditionContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::GroupConditionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::GroupConditionContext::AS() {
  return getToken(SparqlQueryParser::AS, 0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::GroupConditionContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}


size_t SparqlQueryParser::GroupConditionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGroupCondition;
}


std::any SparqlQueryParser::GroupConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGroupCondition(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GroupConditionContext* SparqlQueryParser::groupCondition() {
  GroupConditionContext *_localctx = _tracker.createInstance<GroupConditionContext>(_ctx, getState());
  enterRule(_localctx, 34, SparqlQueryParser::RuleGroupCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(410);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::STR:
      case SparqlQueryParser::LANG:
      case SparqlQueryParser::LANGMATCHES:
      case SparqlQueryParser::DATATYPE:
      case SparqlQueryParser::BOUND:
      case SparqlQueryParser::SAMETERM:
      case SparqlQueryParser::ISIRI:
      case SparqlQueryParser::ISURI:
      case SparqlQueryParser::ISBLANK:
      case SparqlQueryParser::ISLITERAL:
      case SparqlQueryParser::REGEX:
      case SparqlQueryParser::SUBSTR:
      case SparqlQueryParser::IRI:
      case SparqlQueryParser::URI:
      case SparqlQueryParser::BNODE:
      case SparqlQueryParser::RAND:
      case SparqlQueryParser::ABS:
      case SparqlQueryParser::CEIL:
      case SparqlQueryParser::FLOOR:
      case SparqlQueryParser::ROUND:
      case SparqlQueryParser::CONCAT:
      case SparqlQueryParser::STRLEN:
      case SparqlQueryParser::UCASE:
      case SparqlQueryParser::LCASE:
      case SparqlQueryParser::ENCODE_FOR_URI:
      case SparqlQueryParser::CONTAINS:
      case SparqlQueryParser::STRSTARTS:
      case SparqlQueryParser::STRENDS:
      case SparqlQueryParser::STRBEFORE:
      case SparqlQueryParser::STRAFTER:
      case SparqlQueryParser::REPLACE:
      case SparqlQueryParser::YEAR:
      case SparqlQueryParser::MONTH:
      case SparqlQueryParser::DAY:
      case SparqlQueryParser::HOURS:
      case SparqlQueryParser::MINUTES:
      case SparqlQueryParser::SECONDS:
      case SparqlQueryParser::TIMEZONE:
      case SparqlQueryParser::TZ:
      case SparqlQueryParser::NOW:
      case SparqlQueryParser::UUID:
      case SparqlQueryParser::STRUUID:
      case SparqlQueryParser::MD5:
      case SparqlQueryParser::SHA1:
      case SparqlQueryParser::SHA256:
      case SparqlQueryParser::SHA384:
      case SparqlQueryParser::SHA512:
      case SparqlQueryParser::COALESCE:
      case SparqlQueryParser::IF:
      case SparqlQueryParser::STRLANG:
      case SparqlQueryParser::STRDT:
      case SparqlQueryParser::ISNUMERIC:
      case SparqlQueryParser::COUNT:
      case SparqlQueryParser::SUM:
      case SparqlQueryParser::MIN:
      case SparqlQueryParser::MAX:
      case SparqlQueryParser::AVG:
      case SparqlQueryParser::SAMPLE:
      case SparqlQueryParser::GROUP_CONCAT:
      case SparqlQueryParser::NOT:
      case SparqlQueryParser::EXISTS: {
        enterOuterAlt(_localctx, 1);
        setState(399);
        builtInCall();
        break;
      }

      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 2);
        setState(400);
        functionCall();
        break;
      }

      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 3);
        setState(401);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(402);
        expression();
        setState(405);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::AS) {
          setState(403);
          match(SparqlQueryParser::AS);
          setState(404);
          var();
        }
        setState(407);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 4);
        setState(409);
        var();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingClauseContext ------------------------------------------------------------------

SparqlQueryParser::HavingClauseContext::HavingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::HavingClauseContext::HAVING() {
  return getToken(SparqlQueryParser::HAVING, 0);
}

std::vector<SparqlQueryParser::HavingConditionContext *> SparqlQueryParser::HavingClauseContext::havingCondition() {
  return getRuleContexts<SparqlQueryParser::HavingConditionContext>();
}

SparqlQueryParser::HavingConditionContext* SparqlQueryParser::HavingClauseContext::havingCondition(size_t i) {
  return getRuleContext<SparqlQueryParser::HavingConditionContext>(i);
}


size_t SparqlQueryParser::HavingClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleHavingClause;
}


std::any SparqlQueryParser::HavingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitHavingClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::HavingClauseContext* SparqlQueryParser::havingClause() {
  HavingClauseContext *_localctx = _tracker.createInstance<HavingClauseContext>(_ctx, getState());
  enterRule(_localctx, 36, SparqlQueryParser::RuleHavingClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(412);
    match(SparqlQueryParser::HAVING);
    setState(414); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(413);
      havingCondition();
      setState(416); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 25) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 25)) & -16773121) != 0) || ((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & 140737492026111) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingConditionContext ------------------------------------------------------------------

SparqlQueryParser::HavingConditionContext::HavingConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::ConstraintContext* SparqlQueryParser::HavingConditionContext::constraint() {
  return getRuleContext<SparqlQueryParser::ConstraintContext>(0);
}


size_t SparqlQueryParser::HavingConditionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleHavingCondition;
}


std::any SparqlQueryParser::HavingConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitHavingCondition(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::HavingConditionContext* SparqlQueryParser::havingCondition() {
  HavingConditionContext *_localctx = _tracker.createInstance<HavingConditionContext>(_ctx, getState());
  enterRule(_localctx, 38, SparqlQueryParser::RuleHavingCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(418);
    constraint();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderClauseContext ------------------------------------------------------------------

SparqlQueryParser::OrderClauseContext::OrderClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::OrderClauseContext::ORDER() {
  return getToken(SparqlQueryParser::ORDER, 0);
}

tree::TerminalNode* SparqlQueryParser::OrderClauseContext::BY() {
  return getToken(SparqlQueryParser::BY, 0);
}

std::vector<SparqlQueryParser::OrderConditionContext *> SparqlQueryParser::OrderClauseContext::orderCondition() {
  return getRuleContexts<SparqlQueryParser::OrderConditionContext>();
}

SparqlQueryParser::OrderConditionContext* SparqlQueryParser::OrderClauseContext::orderCondition(size_t i) {
  return getRuleContext<SparqlQueryParser::OrderConditionContext>(i);
}


size_t SparqlQueryParser::OrderClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleOrderClause;
}


std::any SparqlQueryParser::OrderClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitOrderClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::OrderClauseContext* SparqlQueryParser::orderClause() {
  OrderClauseContext *_localctx = _tracker.createInstance<OrderClauseContext>(_ctx, getState());
  enterRule(_localctx, 40, SparqlQueryParser::RuleOrderClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(420);
    match(SparqlQueryParser::ORDER);
    setState(421);
    match(SparqlQueryParser::BY);
    setState(423); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(422);
      orderCondition();
      setState(425); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 15) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 15)) & -17175675901) != 0) || ((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & 144115217604542463) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderConditionContext ------------------------------------------------------------------

SparqlQueryParser::OrderConditionContext::OrderConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::OrderConditionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::OrderConditionContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::OrderConditionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::OrderConditionContext::ASC() {
  return getToken(SparqlQueryParser::ASC, 0);
}

tree::TerminalNode* SparqlQueryParser::OrderConditionContext::DESC() {
  return getToken(SparqlQueryParser::DESC, 0);
}

SparqlQueryParser::ConstraintContext* SparqlQueryParser::OrderConditionContext::constraint() {
  return getRuleContext<SparqlQueryParser::ConstraintContext>(0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::OrderConditionContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}


size_t SparqlQueryParser::OrderConditionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleOrderCondition;
}


std::any SparqlQueryParser::OrderConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitOrderCondition(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::OrderConditionContext* SparqlQueryParser::orderCondition() {
  OrderConditionContext *_localctx = _tracker.createInstance<OrderConditionContext>(_ctx, getState());
  enterRule(_localctx, 42, SparqlQueryParser::RuleOrderCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(434);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::ASC:
      case SparqlQueryParser::DESC: {
        enterOuterAlt(_localctx, 1);
        setState(427);
        _la = _input->LA(1);
        if (!(_la == SparqlQueryParser::ASC

        || _la == SparqlQueryParser::DESC)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(428);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(429);
        expression();
        setState(430);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STR:
      case SparqlQueryParser::LANG:
      case SparqlQueryParser::LANGMATCHES:
      case SparqlQueryParser::DATATYPE:
      case SparqlQueryParser::BOUND:
      case SparqlQueryParser::SAMETERM:
      case SparqlQueryParser::ISIRI:
      case SparqlQueryParser::ISURI:
      case SparqlQueryParser::ISBLANK:
      case SparqlQueryParser::ISLITERAL:
      case SparqlQueryParser::REGEX:
      case SparqlQueryParser::SUBSTR:
      case SparqlQueryParser::IRI:
      case SparqlQueryParser::URI:
      case SparqlQueryParser::BNODE:
      case SparqlQueryParser::RAND:
      case SparqlQueryParser::ABS:
      case SparqlQueryParser::CEIL:
      case SparqlQueryParser::FLOOR:
      case SparqlQueryParser::ROUND:
      case SparqlQueryParser::CONCAT:
      case SparqlQueryParser::STRLEN:
      case SparqlQueryParser::UCASE:
      case SparqlQueryParser::LCASE:
      case SparqlQueryParser::ENCODE_FOR_URI:
      case SparqlQueryParser::CONTAINS:
      case SparqlQueryParser::STRSTARTS:
      case SparqlQueryParser::STRENDS:
      case SparqlQueryParser::STRBEFORE:
      case SparqlQueryParser::STRAFTER:
      case SparqlQueryParser::REPLACE:
      case SparqlQueryParser::YEAR:
      case SparqlQueryParser::MONTH:
      case SparqlQueryParser::DAY:
      case SparqlQueryParser::HOURS:
      case SparqlQueryParser::MINUTES:
      case SparqlQueryParser::SECONDS:
      case SparqlQueryParser::TIMEZONE:
      case SparqlQueryParser::TZ:
      case SparqlQueryParser::NOW:
      case SparqlQueryParser::UUID:
      case SparqlQueryParser::STRUUID:
      case SparqlQueryParser::MD5:
      case SparqlQueryParser::SHA1:
      case SparqlQueryParser::SHA256:
      case SparqlQueryParser::SHA384:
      case SparqlQueryParser::SHA512:
      case SparqlQueryParser::COALESCE:
      case SparqlQueryParser::IF:
      case SparqlQueryParser::STRLANG:
      case SparqlQueryParser::STRDT:
      case SparqlQueryParser::ISNUMERIC:
      case SparqlQueryParser::COUNT:
      case SparqlQueryParser::SUM:
      case SparqlQueryParser::MIN:
      case SparqlQueryParser::MAX:
      case SparqlQueryParser::AVG:
      case SparqlQueryParser::SAMPLE:
      case SparqlQueryParser::GROUP_CONCAT:
      case SparqlQueryParser::NOT:
      case SparqlQueryParser::EXISTS:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(432);
        constraint();
        break;
      }

      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 3);
        setState(433);
        var();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitOffsetClausesContext ------------------------------------------------------------------

SparqlQueryParser::LimitOffsetClausesContext::LimitOffsetClausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::LimitClauseContext* SparqlQueryParser::LimitOffsetClausesContext::limitClause() {
  return getRuleContext<SparqlQueryParser::LimitClauseContext>(0);
}

SparqlQueryParser::OffsetClauseContext* SparqlQueryParser::LimitOffsetClausesContext::offsetClause() {
  return getRuleContext<SparqlQueryParser::OffsetClauseContext>(0);
}


size_t SparqlQueryParser::LimitOffsetClausesContext::getRuleIndex() const {
  return SparqlQueryParser::RuleLimitOffsetClauses;
}


std::any SparqlQueryParser::LimitOffsetClausesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitLimitOffsetClauses(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::LimitOffsetClausesContext* SparqlQueryParser::limitOffsetClauses() {
  LimitOffsetClausesContext *_localctx = _tracker.createInstance<LimitOffsetClausesContext>(_ctx, getState());
  enterRule(_localctx, 44, SparqlQueryParser::RuleLimitOffsetClauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(444);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::LIMIT: {
        enterOuterAlt(_localctx, 1);
        setState(436);
        limitClause();
        setState(438);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::OFFSET) {
          setState(437);
          offsetClause();
        }
        break;
      }

      case SparqlQueryParser::OFFSET: {
        enterOuterAlt(_localctx, 2);
        setState(440);
        offsetClause();
        setState(442);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::LIMIT) {
          setState(441);
          limitClause();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitClauseContext ------------------------------------------------------------------

SparqlQueryParser::LimitClauseContext::LimitClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::LimitClauseContext::LIMIT() {
  return getToken(SparqlQueryParser::LIMIT, 0);
}

tree::TerminalNode* SparqlQueryParser::LimitClauseContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}


size_t SparqlQueryParser::LimitClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleLimitClause;
}


std::any SparqlQueryParser::LimitClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitLimitClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::LimitClauseContext* SparqlQueryParser::limitClause() {
  LimitClauseContext *_localctx = _tracker.createInstance<LimitClauseContext>(_ctx, getState());
  enterRule(_localctx, 46, SparqlQueryParser::RuleLimitClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(446);
    match(SparqlQueryParser::LIMIT);
    setState(447);
    match(SparqlQueryParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetClauseContext ------------------------------------------------------------------

SparqlQueryParser::OffsetClauseContext::OffsetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::OffsetClauseContext::OFFSET() {
  return getToken(SparqlQueryParser::OFFSET, 0);
}

tree::TerminalNode* SparqlQueryParser::OffsetClauseContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}


size_t SparqlQueryParser::OffsetClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleOffsetClause;
}


std::any SparqlQueryParser::OffsetClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitOffsetClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::OffsetClauseContext* SparqlQueryParser::offsetClause() {
  OffsetClauseContext *_localctx = _tracker.createInstance<OffsetClauseContext>(_ctx, getState());
  enterRule(_localctx, 48, SparqlQueryParser::RuleOffsetClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(449);
    match(SparqlQueryParser::OFFSET);
    setState(450);
    match(SparqlQueryParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValuesClauseContext ------------------------------------------------------------------

SparqlQueryParser::ValuesClauseContext::ValuesClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ValuesClauseContext::VALUES() {
  return getToken(SparqlQueryParser::VALUES, 0);
}

SparqlQueryParser::DataBlockContext* SparqlQueryParser::ValuesClauseContext::dataBlock() {
  return getRuleContext<SparqlQueryParser::DataBlockContext>(0);
}


size_t SparqlQueryParser::ValuesClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleValuesClause;
}


std::any SparqlQueryParser::ValuesClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitValuesClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ValuesClauseContext* SparqlQueryParser::valuesClause() {
  ValuesClauseContext *_localctx = _tracker.createInstance<ValuesClauseContext>(_ctx, getState());
  enterRule(_localctx, 50, SparqlQueryParser::RuleValuesClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::VALUES) {
      setState(452);
      match(SparqlQueryParser::VALUES);
      setState(453);
      dataBlock();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TriplesTemplateContext ------------------------------------------------------------------

SparqlQueryParser::TriplesTemplateContext::TriplesTemplateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::TriplesSameSubjectContext *> SparqlQueryParser::TriplesTemplateContext::triplesSameSubject() {
  return getRuleContexts<SparqlQueryParser::TriplesSameSubjectContext>();
}

SparqlQueryParser::TriplesSameSubjectContext* SparqlQueryParser::TriplesTemplateContext::triplesSameSubject(size_t i) {
  return getRuleContext<SparqlQueryParser::TriplesSameSubjectContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::TriplesTemplateContext::DOT() {
  return getTokens(SparqlQueryParser::DOT);
}

tree::TerminalNode* SparqlQueryParser::TriplesTemplateContext::DOT(size_t i) {
  return getToken(SparqlQueryParser::DOT, i);
}


size_t SparqlQueryParser::TriplesTemplateContext::getRuleIndex() const {
  return SparqlQueryParser::RuleTriplesTemplate;
}


std::any SparqlQueryParser::TriplesTemplateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitTriplesTemplate(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::TriplesTemplateContext* SparqlQueryParser::triplesTemplate() {
  TriplesTemplateContext *_localctx = _tracker.createInstance<TriplesTemplateContext>(_ctx, getState());
  enterRule(_localctx, 52, SparqlQueryParser::RuleTriplesTemplate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(456);
    triplesSameSubject();
    setState(463);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::DOT) {
      setState(457);
      match(SparqlQueryParser::DOT);
      setState(459);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SparqlQueryParser::TRUE

      || _la == SparqlQueryParser::FALSE || ((((_la - 108) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 108)) & 4564451263) != 0)) {
        setState(458);
        triplesSameSubject();
      }
      setState(465);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupGraphPatternContext ------------------------------------------------------------------

SparqlQueryParser::GroupGraphPatternContext::GroupGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::GroupGraphPatternContext::OPEN_CURLY_BRACE() {
  return getToken(SparqlQueryParser::OPEN_CURLY_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::GroupGraphPatternContext::CLOSE_CURLY_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_CURLY_BRACE, 0);
}

SparqlQueryParser::SubSelectContext* SparqlQueryParser::GroupGraphPatternContext::subSelect() {
  return getRuleContext<SparqlQueryParser::SubSelectContext>(0);
}

SparqlQueryParser::GroupGraphPatternSubContext* SparqlQueryParser::GroupGraphPatternContext::groupGraphPatternSub() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternSubContext>(0);
}


size_t SparqlQueryParser::GroupGraphPatternContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGroupGraphPattern;
}


std::any SparqlQueryParser::GroupGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGroupGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::groupGraphPattern() {
  GroupGraphPatternContext *_localctx = _tracker.createInstance<GroupGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 54, SparqlQueryParser::RuleGroupGraphPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(466);
    match(SparqlQueryParser::OPEN_CURLY_BRACE);
    setState(469);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::SELECT: {
        setState(467);
        subSelect();
        break;
      }

      case SparqlQueryParser::VALUES:
      case SparqlQueryParser::OPTIONAL:
      case SparqlQueryParser::GRAPH:
      case SparqlQueryParser::FILTER:
      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE:
      case SparqlQueryParser::SERVICE:
      case SparqlQueryParser::BIND:
      case SparqlQueryParser::MINUS:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::BLANK_NODE_LABEL:
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2:
      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE:
      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::OPEN_CURLY_BRACE:
      case SparqlQueryParser::CLOSE_CURLY_BRACE:
      case SparqlQueryParser::OPEN_SQUARE_BRACKET: {
        setState(468);
        groupGraphPatternSub();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(471);
    match(SparqlQueryParser::CLOSE_CURLY_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupGraphPatternSubContext ------------------------------------------------------------------

SparqlQueryParser::GroupGraphPatternSubContext::GroupGraphPatternSubContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::TriplesBlockContext* SparqlQueryParser::GroupGraphPatternSubContext::triplesBlock() {
  return getRuleContext<SparqlQueryParser::TriplesBlockContext>(0);
}

std::vector<SparqlQueryParser::GroupGraphPatternSubListContext *> SparqlQueryParser::GroupGraphPatternSubContext::groupGraphPatternSubList() {
  return getRuleContexts<SparqlQueryParser::GroupGraphPatternSubListContext>();
}

SparqlQueryParser::GroupGraphPatternSubListContext* SparqlQueryParser::GroupGraphPatternSubContext::groupGraphPatternSubList(size_t i) {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternSubListContext>(i);
}


size_t SparqlQueryParser::GroupGraphPatternSubContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGroupGraphPatternSub;
}


std::any SparqlQueryParser::GroupGraphPatternSubContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGroupGraphPatternSub(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GroupGraphPatternSubContext* SparqlQueryParser::groupGraphPatternSub() {
  GroupGraphPatternSubContext *_localctx = _tracker.createInstance<GroupGraphPatternSubContext>(_ctx, getState());
  enterRule(_localctx, 56, SparqlQueryParser::RuleGroupGraphPatternSub);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(474);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::TRUE

    || _la == SparqlQueryParser::FALSE || ((((_la - 108) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 108)) & 4564451263) != 0)) {
      setState(473);
      triplesBlock();
    }
    setState(479);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 492581221302272) != 0) || _la == SparqlQueryParser::OPEN_CURLY_BRACE) {
      setState(476);
      groupGraphPatternSubList();
      setState(481);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupGraphPatternSubListContext ------------------------------------------------------------------

SparqlQueryParser::GroupGraphPatternSubListContext::GroupGraphPatternSubListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::GraphPatternNotTriplesContext* SparqlQueryParser::GroupGraphPatternSubListContext::graphPatternNotTriples() {
  return getRuleContext<SparqlQueryParser::GraphPatternNotTriplesContext>(0);
}

tree::TerminalNode* SparqlQueryParser::GroupGraphPatternSubListContext::DOT() {
  return getToken(SparqlQueryParser::DOT, 0);
}

SparqlQueryParser::TriplesBlockContext* SparqlQueryParser::GroupGraphPatternSubListContext::triplesBlock() {
  return getRuleContext<SparqlQueryParser::TriplesBlockContext>(0);
}


size_t SparqlQueryParser::GroupGraphPatternSubListContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGroupGraphPatternSubList;
}


std::any SparqlQueryParser::GroupGraphPatternSubListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGroupGraphPatternSubList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GroupGraphPatternSubListContext* SparqlQueryParser::groupGraphPatternSubList() {
  GroupGraphPatternSubListContext *_localctx = _tracker.createInstance<GroupGraphPatternSubListContext>(_ctx, getState());
  enterRule(_localctx, 58, SparqlQueryParser::RuleGroupGraphPatternSubList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(482);
    graphPatternNotTriples();
    setState(484);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::DOT) {
      setState(483);
      match(SparqlQueryParser::DOT);
    }
    setState(487);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::TRUE

    || _la == SparqlQueryParser::FALSE || ((((_la - 108) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 108)) & 4564451263) != 0)) {
      setState(486);
      triplesBlock();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TriplesBlockContext ------------------------------------------------------------------

SparqlQueryParser::TriplesBlockContext::TriplesBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::TriplesSameSubjectPathContext *> SparqlQueryParser::TriplesBlockContext::triplesSameSubjectPath() {
  return getRuleContexts<SparqlQueryParser::TriplesSameSubjectPathContext>();
}

SparqlQueryParser::TriplesSameSubjectPathContext* SparqlQueryParser::TriplesBlockContext::triplesSameSubjectPath(size_t i) {
  return getRuleContext<SparqlQueryParser::TriplesSameSubjectPathContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::TriplesBlockContext::DOT() {
  return getTokens(SparqlQueryParser::DOT);
}

tree::TerminalNode* SparqlQueryParser::TriplesBlockContext::DOT(size_t i) {
  return getToken(SparqlQueryParser::DOT, i);
}


size_t SparqlQueryParser::TriplesBlockContext::getRuleIndex() const {
  return SparqlQueryParser::RuleTriplesBlock;
}


std::any SparqlQueryParser::TriplesBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitTriplesBlock(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::TriplesBlockContext* SparqlQueryParser::triplesBlock() {
  TriplesBlockContext *_localctx = _tracker.createInstance<TriplesBlockContext>(_ctx, getState());
  enterRule(_localctx, 60, SparqlQueryParser::RuleTriplesBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(489);
    triplesSameSubjectPath();
    setState(496);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::DOT) {
      setState(490);
      match(SparqlQueryParser::DOT);
      setState(492);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SparqlQueryParser::TRUE

      || _la == SparqlQueryParser::FALSE || ((((_la - 108) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 108)) & 4564451263) != 0)) {
        setState(491);
        triplesSameSubjectPath();
      }
      setState(498);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternNotTriplesContext ------------------------------------------------------------------

SparqlQueryParser::GraphPatternNotTriplesContext::GraphPatternNotTriplesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::GroupOrUnionGraphPatternContext* SparqlQueryParser::GraphPatternNotTriplesContext::groupOrUnionGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupOrUnionGraphPatternContext>(0);
}

SparqlQueryParser::OptionalGraphPatternContext* SparqlQueryParser::GraphPatternNotTriplesContext::optionalGraphPattern() {
  return getRuleContext<SparqlQueryParser::OptionalGraphPatternContext>(0);
}

SparqlQueryParser::MinusGraphPatternContext* SparqlQueryParser::GraphPatternNotTriplesContext::minusGraphPattern() {
  return getRuleContext<SparqlQueryParser::MinusGraphPatternContext>(0);
}

SparqlQueryParser::GraphGraphPatternContext* SparqlQueryParser::GraphPatternNotTriplesContext::graphGraphPattern() {
  return getRuleContext<SparqlQueryParser::GraphGraphPatternContext>(0);
}

SparqlQueryParser::ServiceGraphPatternContext* SparqlQueryParser::GraphPatternNotTriplesContext::serviceGraphPattern() {
  return getRuleContext<SparqlQueryParser::ServiceGraphPatternContext>(0);
}

SparqlQueryParser::FilterContext* SparqlQueryParser::GraphPatternNotTriplesContext::filter() {
  return getRuleContext<SparqlQueryParser::FilterContext>(0);
}

SparqlQueryParser::BindContext* SparqlQueryParser::GraphPatternNotTriplesContext::bind() {
  return getRuleContext<SparqlQueryParser::BindContext>(0);
}

SparqlQueryParser::InlineDataContext* SparqlQueryParser::GraphPatternNotTriplesContext::inlineData() {
  return getRuleContext<SparqlQueryParser::InlineDataContext>(0);
}


size_t SparqlQueryParser::GraphPatternNotTriplesContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGraphPatternNotTriples;
}


std::any SparqlQueryParser::GraphPatternNotTriplesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGraphPatternNotTriples(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GraphPatternNotTriplesContext* SparqlQueryParser::graphPatternNotTriples() {
  GraphPatternNotTriplesContext *_localctx = _tracker.createInstance<GraphPatternNotTriplesContext>(_ctx, getState());
  enterRule(_localctx, 62, SparqlQueryParser::RuleGraphPatternNotTriples);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(507);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::OPEN_CURLY_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(499);
        groupOrUnionGraphPattern();
        break;
      }

      case SparqlQueryParser::OPTIONAL: {
        enterOuterAlt(_localctx, 2);
        setState(500);
        optionalGraphPattern();
        break;
      }

      case SparqlQueryParser::MINUS: {
        enterOuterAlt(_localctx, 3);
        setState(501);
        minusGraphPattern();
        break;
      }

      case SparqlQueryParser::GRAPH: {
        enterOuterAlt(_localctx, 4);
        setState(502);
        graphGraphPattern();
        break;
      }

      case SparqlQueryParser::SERVICE: {
        enterOuterAlt(_localctx, 5);
        setState(503);
        serviceGraphPattern();
        break;
      }

      case SparqlQueryParser::FILTER: {
        enterOuterAlt(_localctx, 6);
        setState(504);
        filter();
        break;
      }

      case SparqlQueryParser::BIND: {
        enterOuterAlt(_localctx, 7);
        setState(505);
        bind();
        break;
      }

      case SparqlQueryParser::VALUES: {
        enterOuterAlt(_localctx, 8);
        setState(506);
        inlineData();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalGraphPatternContext ------------------------------------------------------------------

SparqlQueryParser::OptionalGraphPatternContext::OptionalGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::OptionalGraphPatternContext::OPTIONAL() {
  return getToken(SparqlQueryParser::OPTIONAL, 0);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::OptionalGraphPatternContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}


size_t SparqlQueryParser::OptionalGraphPatternContext::getRuleIndex() const {
  return SparqlQueryParser::RuleOptionalGraphPattern;
}


std::any SparqlQueryParser::OptionalGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitOptionalGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::OptionalGraphPatternContext* SparqlQueryParser::optionalGraphPattern() {
  OptionalGraphPatternContext *_localctx = _tracker.createInstance<OptionalGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 64, SparqlQueryParser::RuleOptionalGraphPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(509);
    match(SparqlQueryParser::OPTIONAL);
    setState(510);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphGraphPatternContext ------------------------------------------------------------------

SparqlQueryParser::GraphGraphPatternContext::GraphGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::GraphGraphPatternContext::GRAPH() {
  return getToken(SparqlQueryParser::GRAPH, 0);
}

SparqlQueryParser::VarOrIRIContext* SparqlQueryParser::GraphGraphPatternContext::varOrIRI() {
  return getRuleContext<SparqlQueryParser::VarOrIRIContext>(0);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::GraphGraphPatternContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}


size_t SparqlQueryParser::GraphGraphPatternContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGraphGraphPattern;
}


std::any SparqlQueryParser::GraphGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGraphGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GraphGraphPatternContext* SparqlQueryParser::graphGraphPattern() {
  GraphGraphPatternContext *_localctx = _tracker.createInstance<GraphGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 66, SparqlQueryParser::RuleGraphGraphPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(512);
    match(SparqlQueryParser::GRAPH);
    setState(513);
    varOrIRI();
    setState(514);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ServiceGraphPatternContext ------------------------------------------------------------------

SparqlQueryParser::ServiceGraphPatternContext::ServiceGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ServiceGraphPatternContext::SERVICE() {
  return getToken(SparqlQueryParser::SERVICE, 0);
}

SparqlQueryParser::VarOrIRIContext* SparqlQueryParser::ServiceGraphPatternContext::varOrIRI() {
  return getRuleContext<SparqlQueryParser::VarOrIRIContext>(0);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::ServiceGraphPatternContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}

tree::TerminalNode* SparqlQueryParser::ServiceGraphPatternContext::SILENT() {
  return getToken(SparqlQueryParser::SILENT, 0);
}


size_t SparqlQueryParser::ServiceGraphPatternContext::getRuleIndex() const {
  return SparqlQueryParser::RuleServiceGraphPattern;
}


std::any SparqlQueryParser::ServiceGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitServiceGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ServiceGraphPatternContext* SparqlQueryParser::serviceGraphPattern() {
  ServiceGraphPatternContext *_localctx = _tracker.createInstance<ServiceGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 68, SparqlQueryParser::RuleServiceGraphPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(516);
    match(SparqlQueryParser::SERVICE);
    setState(518);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::SILENT) {
      setState(517);
      match(SparqlQueryParser::SILENT);
    }
    setState(520);
    varOrIRI();
    setState(521);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindContext ------------------------------------------------------------------

SparqlQueryParser::BindContext::BindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::BindContext::BIND() {
  return getToken(SparqlQueryParser::BIND, 0);
}

tree::TerminalNode* SparqlQueryParser::BindContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::BindContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BindContext::AS() {
  return getToken(SparqlQueryParser::AS, 0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::BindContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BindContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}


size_t SparqlQueryParser::BindContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBind;
}


std::any SparqlQueryParser::BindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBind(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BindContext* SparqlQueryParser::bind() {
  BindContext *_localctx = _tracker.createInstance<BindContext>(_ctx, getState());
  enterRule(_localctx, 70, SparqlQueryParser::RuleBind);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(523);
    match(SparqlQueryParser::BIND);
    setState(524);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(525);
    expression();
    setState(526);
    match(SparqlQueryParser::AS);
    setState(527);
    var();
    setState(528);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlineDataContext ------------------------------------------------------------------

SparqlQueryParser::InlineDataContext::InlineDataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::InlineDataContext::VALUES() {
  return getToken(SparqlQueryParser::VALUES, 0);
}

SparqlQueryParser::DataBlockContext* SparqlQueryParser::InlineDataContext::dataBlock() {
  return getRuleContext<SparqlQueryParser::DataBlockContext>(0);
}


size_t SparqlQueryParser::InlineDataContext::getRuleIndex() const {
  return SparqlQueryParser::RuleInlineData;
}


std::any SparqlQueryParser::InlineDataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitInlineData(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::InlineDataContext* SparqlQueryParser::inlineData() {
  InlineDataContext *_localctx = _tracker.createInstance<InlineDataContext>(_ctx, getState());
  enterRule(_localctx, 72, SparqlQueryParser::RuleInlineData);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(530);
    match(SparqlQueryParser::VALUES);
    setState(531);
    dataBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataBlockContext ------------------------------------------------------------------

SparqlQueryParser::DataBlockContext::DataBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::InlineDataOneVarContext* SparqlQueryParser::DataBlockContext::inlineDataOneVar() {
  return getRuleContext<SparqlQueryParser::InlineDataOneVarContext>(0);
}

SparqlQueryParser::InlineDataFullContext* SparqlQueryParser::DataBlockContext::inlineDataFull() {
  return getRuleContext<SparqlQueryParser::InlineDataFullContext>(0);
}


size_t SparqlQueryParser::DataBlockContext::getRuleIndex() const {
  return SparqlQueryParser::RuleDataBlock;
}


std::any SparqlQueryParser::DataBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitDataBlock(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::DataBlockContext* SparqlQueryParser::dataBlock() {
  DataBlockContext *_localctx = _tracker.createInstance<DataBlockContext>(_ctx, getState());
  enterRule(_localctx, 74, SparqlQueryParser::RuleDataBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(535);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 1);
        setState(533);
        inlineDataOneVar();
        break;
      }

      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(534);
        inlineDataFull();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlineDataOneVarContext ------------------------------------------------------------------

SparqlQueryParser::InlineDataOneVarContext::InlineDataOneVarContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarContext* SparqlQueryParser::InlineDataOneVarContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

tree::TerminalNode* SparqlQueryParser::InlineDataOneVarContext::OPEN_CURLY_BRACE() {
  return getToken(SparqlQueryParser::OPEN_CURLY_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::InlineDataOneVarContext::CLOSE_CURLY_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_CURLY_BRACE, 0);
}

std::vector<SparqlQueryParser::DataBlockValueContext *> SparqlQueryParser::InlineDataOneVarContext::dataBlockValue() {
  return getRuleContexts<SparqlQueryParser::DataBlockValueContext>();
}

SparqlQueryParser::DataBlockValueContext* SparqlQueryParser::InlineDataOneVarContext::dataBlockValue(size_t i) {
  return getRuleContext<SparqlQueryParser::DataBlockValueContext>(i);
}


size_t SparqlQueryParser::InlineDataOneVarContext::getRuleIndex() const {
  return SparqlQueryParser::RuleInlineDataOneVar;
}


std::any SparqlQueryParser::InlineDataOneVarContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitInlineDataOneVar(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::InlineDataOneVarContext* SparqlQueryParser::inlineDataOneVar() {
  InlineDataOneVarContext *_localctx = _tracker.createInstance<InlineDataOneVarContext>(_ctx, getState());
  enterRule(_localctx, 76, SparqlQueryParser::RuleInlineDataOneVar);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(537);
    var();
    setState(538);
    match(SparqlQueryParser::OPEN_CURLY_BRACE);
    setState(542);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18004502904832) != 0) || ((((_la - 108) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 108)) & 1048455) != 0)) {
      setState(539);
      dataBlockValue();
      setState(544);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(545);
    match(SparqlQueryParser::CLOSE_CURLY_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlineDataFullContext ------------------------------------------------------------------

SparqlQueryParser::InlineDataFullContext::InlineDataFullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::InlineDataFullContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::InlineDataFullContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::InlineDataFullContext::OPEN_CURLY_BRACE() {
  return getToken(SparqlQueryParser::OPEN_CURLY_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::InlineDataFullContext::CLOSE_CURLY_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_CURLY_BRACE, 0);
}

std::vector<SparqlQueryParser::VarContext *> SparqlQueryParser::InlineDataFullContext::var() {
  return getRuleContexts<SparqlQueryParser::VarContext>();
}

SparqlQueryParser::VarContext* SparqlQueryParser::InlineDataFullContext::var(size_t i) {
  return getRuleContext<SparqlQueryParser::VarContext>(i);
}

std::vector<SparqlQueryParser::DataBlockValuesContext *> SparqlQueryParser::InlineDataFullContext::dataBlockValues() {
  return getRuleContexts<SparqlQueryParser::DataBlockValuesContext>();
}

SparqlQueryParser::DataBlockValuesContext* SparqlQueryParser::InlineDataFullContext::dataBlockValues(size_t i) {
  return getRuleContext<SparqlQueryParser::DataBlockValuesContext>(i);
}


size_t SparqlQueryParser::InlineDataFullContext::getRuleIndex() const {
  return SparqlQueryParser::RuleInlineDataFull;
}


std::any SparqlQueryParser::InlineDataFullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitInlineDataFull(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::InlineDataFullContext* SparqlQueryParser::inlineDataFull() {
  InlineDataFullContext *_localctx = _tracker.createInstance<InlineDataFullContext>(_ctx, getState());
  enterRule(_localctx, 78, SparqlQueryParser::RuleInlineDataFull);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(547);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(551);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::VAR1

    || _la == SparqlQueryParser::VAR2) {
      setState(548);
      var();
      setState(553);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(554);
    match(SparqlQueryParser::CLOSE_BRACE);
    setState(555);
    match(SparqlQueryParser::OPEN_CURLY_BRACE);
    setState(559);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::OPEN_BRACE) {
      setState(556);
      dataBlockValues();
      setState(561);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(562);
    match(SparqlQueryParser::CLOSE_CURLY_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataBlockValuesContext ------------------------------------------------------------------

SparqlQueryParser::DataBlockValuesContext::DataBlockValuesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::DataBlockValuesContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::DataBlockValuesContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

std::vector<SparqlQueryParser::DataBlockValueContext *> SparqlQueryParser::DataBlockValuesContext::dataBlockValue() {
  return getRuleContexts<SparqlQueryParser::DataBlockValueContext>();
}

SparqlQueryParser::DataBlockValueContext* SparqlQueryParser::DataBlockValuesContext::dataBlockValue(size_t i) {
  return getRuleContext<SparqlQueryParser::DataBlockValueContext>(i);
}


size_t SparqlQueryParser::DataBlockValuesContext::getRuleIndex() const {
  return SparqlQueryParser::RuleDataBlockValues;
}


std::any SparqlQueryParser::DataBlockValuesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitDataBlockValues(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::DataBlockValuesContext* SparqlQueryParser::dataBlockValues() {
  DataBlockValuesContext *_localctx = _tracker.createInstance<DataBlockValuesContext>(_ctx, getState());
  enterRule(_localctx, 80, SparqlQueryParser::RuleDataBlockValues);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(564);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(568);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18004502904832) != 0) || ((((_la - 108) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 108)) & 1048455) != 0)) {
      setState(565);
      dataBlockValue();
      setState(570);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(571);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataBlockValueContext ------------------------------------------------------------------

SparqlQueryParser::DataBlockValueContext::DataBlockValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::IriContext* SparqlQueryParser::DataBlockValueContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

SparqlQueryParser::RdfLiteralContext* SparqlQueryParser::DataBlockValueContext::rdfLiteral() {
  return getRuleContext<SparqlQueryParser::RdfLiteralContext>(0);
}

SparqlQueryParser::NumericLiteralContext* SparqlQueryParser::DataBlockValueContext::numericLiteral() {
  return getRuleContext<SparqlQueryParser::NumericLiteralContext>(0);
}

SparqlQueryParser::BooleanLiteralContext* SparqlQueryParser::DataBlockValueContext::booleanLiteral() {
  return getRuleContext<SparqlQueryParser::BooleanLiteralContext>(0);
}

tree::TerminalNode* SparqlQueryParser::DataBlockValueContext::UNDEF() {
  return getToken(SparqlQueryParser::UNDEF, 0);
}


size_t SparqlQueryParser::DataBlockValueContext::getRuleIndex() const {
  return SparqlQueryParser::RuleDataBlockValue;
}


std::any SparqlQueryParser::DataBlockValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitDataBlockValue(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::DataBlockValueContext* SparqlQueryParser::dataBlockValue() {
  DataBlockValueContext *_localctx = _tracker.createInstance<DataBlockValueContext>(_ctx, getState());
  enterRule(_localctx, 82, SparqlQueryParser::RuleDataBlockValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(578);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 1);
        setState(573);
        iri();
        break;
      }

      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2: {
        enterOuterAlt(_localctx, 2);
        setState(574);
        rdfLiteral();
        break;
      }

      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE: {
        enterOuterAlt(_localctx, 3);
        setState(575);
        numericLiteral();
        break;
      }

      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE: {
        enterOuterAlt(_localctx, 4);
        setState(576);
        booleanLiteral();
        break;
      }

      case SparqlQueryParser::UNDEF: {
        enterOuterAlt(_localctx, 5);
        setState(577);
        match(SparqlQueryParser::UNDEF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MinusGraphPatternContext ------------------------------------------------------------------

SparqlQueryParser::MinusGraphPatternContext::MinusGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::MinusGraphPatternContext::MINUS() {
  return getToken(SparqlQueryParser::MINUS, 0);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::MinusGraphPatternContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}


size_t SparqlQueryParser::MinusGraphPatternContext::getRuleIndex() const {
  return SparqlQueryParser::RuleMinusGraphPattern;
}


std::any SparqlQueryParser::MinusGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitMinusGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::MinusGraphPatternContext* SparqlQueryParser::minusGraphPattern() {
  MinusGraphPatternContext *_localctx = _tracker.createInstance<MinusGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 84, SparqlQueryParser::RuleMinusGraphPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(580);
    match(SparqlQueryParser::MINUS);
    setState(581);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupOrUnionGraphPatternContext ------------------------------------------------------------------

SparqlQueryParser::GroupOrUnionGraphPatternContext::GroupOrUnionGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::GroupGraphPatternContext *> SparqlQueryParser::GroupOrUnionGraphPatternContext::groupGraphPattern() {
  return getRuleContexts<SparqlQueryParser::GroupGraphPatternContext>();
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::GroupOrUnionGraphPatternContext::groupGraphPattern(size_t i) {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::GroupOrUnionGraphPatternContext::UNION() {
  return getTokens(SparqlQueryParser::UNION);
}

tree::TerminalNode* SparqlQueryParser::GroupOrUnionGraphPatternContext::UNION(size_t i) {
  return getToken(SparqlQueryParser::UNION, i);
}


size_t SparqlQueryParser::GroupOrUnionGraphPatternContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGroupOrUnionGraphPattern;
}


std::any SparqlQueryParser::GroupOrUnionGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGroupOrUnionGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GroupOrUnionGraphPatternContext* SparqlQueryParser::groupOrUnionGraphPattern() {
  GroupOrUnionGraphPatternContext *_localctx = _tracker.createInstance<GroupOrUnionGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 86, SparqlQueryParser::RuleGroupOrUnionGraphPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(583);
    groupGraphPattern();
    setState(588);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::UNION) {
      setState(584);
      match(SparqlQueryParser::UNION);
      setState(585);
      groupGraphPattern();
      setState(590);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FilterContext ------------------------------------------------------------------

SparqlQueryParser::FilterContext::FilterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::FilterContext::FILTER() {
  return getToken(SparqlQueryParser::FILTER, 0);
}

SparqlQueryParser::ConstraintContext* SparqlQueryParser::FilterContext::constraint() {
  return getRuleContext<SparqlQueryParser::ConstraintContext>(0);
}


size_t SparqlQueryParser::FilterContext::getRuleIndex() const {
  return SparqlQueryParser::RuleFilter;
}


std::any SparqlQueryParser::FilterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitFilter(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::FilterContext* SparqlQueryParser::filter() {
  FilterContext *_localctx = _tracker.createInstance<FilterContext>(_ctx, getState());
  enterRule(_localctx, 88, SparqlQueryParser::RuleFilter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(591);
    match(SparqlQueryParser::FILTER);
    setState(592);
    constraint();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstraintContext ------------------------------------------------------------------

SparqlQueryParser::ConstraintContext::ConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ConstraintContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::ConstraintContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::ConstraintContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

SparqlQueryParser::BuiltInCallContext* SparqlQueryParser::ConstraintContext::builtInCall() {
  return getRuleContext<SparqlQueryParser::BuiltInCallContext>(0);
}

SparqlQueryParser::FunctionCallContext* SparqlQueryParser::ConstraintContext::functionCall() {
  return getRuleContext<SparqlQueryParser::FunctionCallContext>(0);
}


size_t SparqlQueryParser::ConstraintContext::getRuleIndex() const {
  return SparqlQueryParser::RuleConstraint;
}


std::any SparqlQueryParser::ConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitConstraint(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ConstraintContext* SparqlQueryParser::constraint() {
  ConstraintContext *_localctx = _tracker.createInstance<ConstraintContext>(_ctx, getState());
  enterRule(_localctx, 90, SparqlQueryParser::RuleConstraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(600);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(594);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(595);
        expression();
        setState(596);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STR:
      case SparqlQueryParser::LANG:
      case SparqlQueryParser::LANGMATCHES:
      case SparqlQueryParser::DATATYPE:
      case SparqlQueryParser::BOUND:
      case SparqlQueryParser::SAMETERM:
      case SparqlQueryParser::ISIRI:
      case SparqlQueryParser::ISURI:
      case SparqlQueryParser::ISBLANK:
      case SparqlQueryParser::ISLITERAL:
      case SparqlQueryParser::REGEX:
      case SparqlQueryParser::SUBSTR:
      case SparqlQueryParser::IRI:
      case SparqlQueryParser::URI:
      case SparqlQueryParser::BNODE:
      case SparqlQueryParser::RAND:
      case SparqlQueryParser::ABS:
      case SparqlQueryParser::CEIL:
      case SparqlQueryParser::FLOOR:
      case SparqlQueryParser::ROUND:
      case SparqlQueryParser::CONCAT:
      case SparqlQueryParser::STRLEN:
      case SparqlQueryParser::UCASE:
      case SparqlQueryParser::LCASE:
      case SparqlQueryParser::ENCODE_FOR_URI:
      case SparqlQueryParser::CONTAINS:
      case SparqlQueryParser::STRSTARTS:
      case SparqlQueryParser::STRENDS:
      case SparqlQueryParser::STRBEFORE:
      case SparqlQueryParser::STRAFTER:
      case SparqlQueryParser::REPLACE:
      case SparqlQueryParser::YEAR:
      case SparqlQueryParser::MONTH:
      case SparqlQueryParser::DAY:
      case SparqlQueryParser::HOURS:
      case SparqlQueryParser::MINUTES:
      case SparqlQueryParser::SECONDS:
      case SparqlQueryParser::TIMEZONE:
      case SparqlQueryParser::TZ:
      case SparqlQueryParser::NOW:
      case SparqlQueryParser::UUID:
      case SparqlQueryParser::STRUUID:
      case SparqlQueryParser::MD5:
      case SparqlQueryParser::SHA1:
      case SparqlQueryParser::SHA256:
      case SparqlQueryParser::SHA384:
      case SparqlQueryParser::SHA512:
      case SparqlQueryParser::COALESCE:
      case SparqlQueryParser::IF:
      case SparqlQueryParser::STRLANG:
      case SparqlQueryParser::STRDT:
      case SparqlQueryParser::ISNUMERIC:
      case SparqlQueryParser::COUNT:
      case SparqlQueryParser::SUM:
      case SparqlQueryParser::MIN:
      case SparqlQueryParser::MAX:
      case SparqlQueryParser::AVG:
      case SparqlQueryParser::SAMPLE:
      case SparqlQueryParser::GROUP_CONCAT:
      case SparqlQueryParser::NOT:
      case SparqlQueryParser::EXISTS: {
        enterOuterAlt(_localctx, 2);
        setState(598);
        builtInCall();
        break;
      }

      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 3);
        setState(599);
        functionCall();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionCallContext ------------------------------------------------------------------

SparqlQueryParser::FunctionCallContext::FunctionCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::IriContext* SparqlQueryParser::FunctionCallContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

SparqlQueryParser::ArgListContext* SparqlQueryParser::FunctionCallContext::argList() {
  return getRuleContext<SparqlQueryParser::ArgListContext>(0);
}


size_t SparqlQueryParser::FunctionCallContext::getRuleIndex() const {
  return SparqlQueryParser::RuleFunctionCall;
}


std::any SparqlQueryParser::FunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitFunctionCall(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::FunctionCallContext* SparqlQueryParser::functionCall() {
  FunctionCallContext *_localctx = _tracker.createInstance<FunctionCallContext>(_ctx, getState());
  enterRule(_localctx, 92, SparqlQueryParser::RuleFunctionCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(602);
    iri();
    setState(603);
    argList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgListContext ------------------------------------------------------------------

SparqlQueryParser::ArgListContext::ArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ArgListContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::ArgListContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

SparqlQueryParser::ExpressionListContext* SparqlQueryParser::ArgListContext::expressionList() {
  return getRuleContext<SparqlQueryParser::ExpressionListContext>(0);
}

tree::TerminalNode* SparqlQueryParser::ArgListContext::DISTINCT() {
  return getToken(SparqlQueryParser::DISTINCT, 0);
}


size_t SparqlQueryParser::ArgListContext::getRuleIndex() const {
  return SparqlQueryParser::RuleArgList;
}


std::any SparqlQueryParser::ArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitArgList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ArgListContext* SparqlQueryParser::argList() {
  ArgListContext *_localctx = _tracker.createInstance<ArgListContext>(_ctx, getState());
  enterRule(_localctx, 94, SparqlQueryParser::RuleArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(605);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(611);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::DISTINCT:
      case SparqlQueryParser::STR:
      case SparqlQueryParser::LANG:
      case SparqlQueryParser::LANGMATCHES:
      case SparqlQueryParser::DATATYPE:
      case SparqlQueryParser::BOUND:
      case SparqlQueryParser::SAMETERM:
      case SparqlQueryParser::ISIRI:
      case SparqlQueryParser::ISURI:
      case SparqlQueryParser::ISBLANK:
      case SparqlQueryParser::ISLITERAL:
      case SparqlQueryParser::REGEX:
      case SparqlQueryParser::SUBSTR:
      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE:
      case SparqlQueryParser::IRI:
      case SparqlQueryParser::URI:
      case SparqlQueryParser::BNODE:
      case SparqlQueryParser::RAND:
      case SparqlQueryParser::ABS:
      case SparqlQueryParser::CEIL:
      case SparqlQueryParser::FLOOR:
      case SparqlQueryParser::ROUND:
      case SparqlQueryParser::CONCAT:
      case SparqlQueryParser::STRLEN:
      case SparqlQueryParser::UCASE:
      case SparqlQueryParser::LCASE:
      case SparqlQueryParser::ENCODE_FOR_URI:
      case SparqlQueryParser::CONTAINS:
      case SparqlQueryParser::STRSTARTS:
      case SparqlQueryParser::STRENDS:
      case SparqlQueryParser::STRBEFORE:
      case SparqlQueryParser::STRAFTER:
      case SparqlQueryParser::REPLACE:
      case SparqlQueryParser::YEAR:
      case SparqlQueryParser::MONTH:
      case SparqlQueryParser::DAY:
      case SparqlQueryParser::HOURS:
      case SparqlQueryParser::MINUTES:
      case SparqlQueryParser::SECONDS:
      case SparqlQueryParser::TIMEZONE:
      case SparqlQueryParser::TZ:
      case SparqlQueryParser::NOW:
      case SparqlQueryParser::UUID:
      case SparqlQueryParser::STRUUID:
      case SparqlQueryParser::MD5:
      case SparqlQueryParser::SHA1:
      case SparqlQueryParser::SHA256:
      case SparqlQueryParser::SHA384:
      case SparqlQueryParser::SHA512:
      case SparqlQueryParser::COALESCE:
      case SparqlQueryParser::IF:
      case SparqlQueryParser::STRLANG:
      case SparqlQueryParser::STRDT:
      case SparqlQueryParser::ISNUMERIC:
      case SparqlQueryParser::COUNT:
      case SparqlQueryParser::SUM:
      case SparqlQueryParser::MIN:
      case SparqlQueryParser::MAX:
      case SparqlQueryParser::AVG:
      case SparqlQueryParser::SAMPLE:
      case SparqlQueryParser::GROUP_CONCAT:
      case SparqlQueryParser::NOT:
      case SparqlQueryParser::EXISTS:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2:
      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE:
      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::PLUS_SIGN:
      case SparqlQueryParser::MINUS_SIGN:
      case SparqlQueryParser::NEGATION: {
        setState(607);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(606);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(609);
        expressionList();
        break;
      }

      case SparqlQueryParser::CLOSE_BRACE: {
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(613);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionListContext ------------------------------------------------------------------

SparqlQueryParser::ExpressionListContext::ExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::ExpressionContext *> SparqlQueryParser::ExpressionListContext::expression() {
  return getRuleContexts<SparqlQueryParser::ExpressionContext>();
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::ExpressionListContext::expression(size_t i) {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::ExpressionListContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::ExpressionListContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}


size_t SparqlQueryParser::ExpressionListContext::getRuleIndex() const {
  return SparqlQueryParser::RuleExpressionList;
}


std::any SparqlQueryParser::ExpressionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitExpressionList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ExpressionListContext* SparqlQueryParser::expressionList() {
  ExpressionListContext *_localctx = _tracker.createInstance<ExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 96, SparqlQueryParser::RuleExpressionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(615);
    expression();
    setState(620);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::COMMA) {
      setState(616);
      match(SparqlQueryParser::COMMA);
      setState(617);
      expression();
      setState(622);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructTemplateContext ------------------------------------------------------------------

SparqlQueryParser::ConstructTemplateContext::ConstructTemplateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ConstructTemplateContext::OPEN_CURLY_BRACE() {
  return getToken(SparqlQueryParser::OPEN_CURLY_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::ConstructTemplateContext::CLOSE_CURLY_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_CURLY_BRACE, 0);
}

SparqlQueryParser::ConstructTriplesContext* SparqlQueryParser::ConstructTemplateContext::constructTriples() {
  return getRuleContext<SparqlQueryParser::ConstructTriplesContext>(0);
}


size_t SparqlQueryParser::ConstructTemplateContext::getRuleIndex() const {
  return SparqlQueryParser::RuleConstructTemplate;
}


std::any SparqlQueryParser::ConstructTemplateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitConstructTemplate(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ConstructTemplateContext* SparqlQueryParser::constructTemplate() {
  ConstructTemplateContext *_localctx = _tracker.createInstance<ConstructTemplateContext>(_ctx, getState());
  enterRule(_localctx, 98, SparqlQueryParser::RuleConstructTemplate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(623);
    match(SparqlQueryParser::OPEN_CURLY_BRACE);
    setState(625);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::TRUE

    || _la == SparqlQueryParser::FALSE || ((((_la - 108) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 108)) & 4564451263) != 0)) {
      setState(624);
      constructTriples();
    }
    setState(627);
    match(SparqlQueryParser::CLOSE_CURLY_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructTriplesContext ------------------------------------------------------------------

SparqlQueryParser::ConstructTriplesContext::ConstructTriplesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::TriplesSameSubjectContext* SparqlQueryParser::ConstructTriplesContext::triplesSameSubject() {
  return getRuleContext<SparqlQueryParser::TriplesSameSubjectContext>(0);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::ConstructTriplesContext::DOT() {
  return getTokens(SparqlQueryParser::DOT);
}

tree::TerminalNode* SparqlQueryParser::ConstructTriplesContext::DOT(size_t i) {
  return getToken(SparqlQueryParser::DOT, i);
}

std::vector<SparqlQueryParser::ConstructTriplesContext *> SparqlQueryParser::ConstructTriplesContext::constructTriples() {
  return getRuleContexts<SparqlQueryParser::ConstructTriplesContext>();
}

SparqlQueryParser::ConstructTriplesContext* SparqlQueryParser::ConstructTriplesContext::constructTriples(size_t i) {
  return getRuleContext<SparqlQueryParser::ConstructTriplesContext>(i);
}


size_t SparqlQueryParser::ConstructTriplesContext::getRuleIndex() const {
  return SparqlQueryParser::RuleConstructTriples;
}


std::any SparqlQueryParser::ConstructTriplesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitConstructTriples(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ConstructTriplesContext* SparqlQueryParser::constructTriples() {
  ConstructTriplesContext *_localctx = _tracker.createInstance<ConstructTriplesContext>(_ctx, getState());
  enterRule(_localctx, 100, SparqlQueryParser::RuleConstructTriples);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(629);
    triplesSameSubject();
    setState(636);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(630);
        match(SparqlQueryParser::DOT);
        setState(632);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::TRUE

        || _la == SparqlQueryParser::FALSE || ((((_la - 108) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 108)) & 4564451263) != 0)) {
          setState(631);
          constructTriples();
        } 
      }
      setState(638);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TriplesSameSubjectContext ------------------------------------------------------------------

SparqlQueryParser::TriplesSameSubjectContext::TriplesSameSubjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarOrTermContext* SparqlQueryParser::TriplesSameSubjectContext::varOrTerm() {
  return getRuleContext<SparqlQueryParser::VarOrTermContext>(0);
}

SparqlQueryParser::PropertyListNotEmptyContext* SparqlQueryParser::TriplesSameSubjectContext::propertyListNotEmpty() {
  return getRuleContext<SparqlQueryParser::PropertyListNotEmptyContext>(0);
}

SparqlQueryParser::TriplesNodeContext* SparqlQueryParser::TriplesSameSubjectContext::triplesNode() {
  return getRuleContext<SparqlQueryParser::TriplesNodeContext>(0);
}

SparqlQueryParser::PropertyListContext* SparqlQueryParser::TriplesSameSubjectContext::propertyList() {
  return getRuleContext<SparqlQueryParser::PropertyListContext>(0);
}


size_t SparqlQueryParser::TriplesSameSubjectContext::getRuleIndex() const {
  return SparqlQueryParser::RuleTriplesSameSubject;
}


std::any SparqlQueryParser::TriplesSameSubjectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitTriplesSameSubject(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::TriplesSameSubjectContext* SparqlQueryParser::triplesSameSubject() {
  TriplesSameSubjectContext *_localctx = _tracker.createInstance<TriplesSameSubjectContext>(_ctx, getState());
  enterRule(_localctx, 102, SparqlQueryParser::RuleTriplesSameSubject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(645);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(639);
      varOrTerm();
      setState(640);
      propertyListNotEmpty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(642);
      triplesNode();
      setState(643);
      propertyList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListContext ------------------------------------------------------------------

SparqlQueryParser::PropertyListContext::PropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PropertyListNotEmptyContext* SparqlQueryParser::PropertyListContext::propertyListNotEmpty() {
  return getRuleContext<SparqlQueryParser::PropertyListNotEmptyContext>(0);
}


size_t SparqlQueryParser::PropertyListContext::getRuleIndex() const {
  return SparqlQueryParser::RulePropertyList;
}


std::any SparqlQueryParser::PropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPropertyList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PropertyListContext* SparqlQueryParser::propertyList() {
  PropertyListContext *_localctx = _tracker.createInstance<PropertyListContext>(_ctx, getState());
  enterRule(_localctx, 104, SparqlQueryParser::RulePropertyList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(648);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::A || ((((_la - 108) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 108)) & 55) != 0)) {
      setState(647);
      propertyListNotEmpty();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListNotEmptyContext ------------------------------------------------------------------

SparqlQueryParser::PropertyListNotEmptyContext::PropertyListNotEmptyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::VerbContext *> SparqlQueryParser::PropertyListNotEmptyContext::verb() {
  return getRuleContexts<SparqlQueryParser::VerbContext>();
}

SparqlQueryParser::VerbContext* SparqlQueryParser::PropertyListNotEmptyContext::verb(size_t i) {
  return getRuleContext<SparqlQueryParser::VerbContext>(i);
}

std::vector<SparqlQueryParser::ObjectListContext *> SparqlQueryParser::PropertyListNotEmptyContext::objectList() {
  return getRuleContexts<SparqlQueryParser::ObjectListContext>();
}

SparqlQueryParser::ObjectListContext* SparqlQueryParser::PropertyListNotEmptyContext::objectList(size_t i) {
  return getRuleContext<SparqlQueryParser::ObjectListContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::PropertyListNotEmptyContext::SEMICOLON() {
  return getTokens(SparqlQueryParser::SEMICOLON);
}

tree::TerminalNode* SparqlQueryParser::PropertyListNotEmptyContext::SEMICOLON(size_t i) {
  return getToken(SparqlQueryParser::SEMICOLON, i);
}


size_t SparqlQueryParser::PropertyListNotEmptyContext::getRuleIndex() const {
  return SparqlQueryParser::RulePropertyListNotEmpty;
}


std::any SparqlQueryParser::PropertyListNotEmptyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPropertyListNotEmpty(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PropertyListNotEmptyContext* SparqlQueryParser::propertyListNotEmpty() {
  PropertyListNotEmptyContext *_localctx = _tracker.createInstance<PropertyListNotEmptyContext>(_ctx, getState());
  enterRule(_localctx, 106, SparqlQueryParser::RulePropertyListNotEmpty);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(650);
    verb();
    setState(651);
    objectList();
    setState(660);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::SEMICOLON) {
      setState(652);
      match(SparqlQueryParser::SEMICOLON);
      setState(656);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SparqlQueryParser::A || ((((_la - 108) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 108)) & 55) != 0)) {
        setState(653);
        verb();
        setState(654);
        objectList();
      }
      setState(662);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VerbContext ------------------------------------------------------------------

SparqlQueryParser::VerbContext::VerbContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarOrIRIContext* SparqlQueryParser::VerbContext::varOrIRI() {
  return getRuleContext<SparqlQueryParser::VarOrIRIContext>(0);
}

tree::TerminalNode* SparqlQueryParser::VerbContext::A() {
  return getToken(SparqlQueryParser::A, 0);
}


size_t SparqlQueryParser::VerbContext::getRuleIndex() const {
  return SparqlQueryParser::RuleVerb;
}


std::any SparqlQueryParser::VerbContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitVerb(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::VerbContext* SparqlQueryParser::verb() {
  VerbContext *_localctx = _tracker.createInstance<VerbContext>(_ctx, getState());
  enterRule(_localctx, 108, SparqlQueryParser::RuleVerb);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(665);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 1);
        setState(663);
        varOrIRI();
        break;
      }

      case SparqlQueryParser::A: {
        enterOuterAlt(_localctx, 2);
        setState(664);
        match(SparqlQueryParser::A);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectListContext ------------------------------------------------------------------

SparqlQueryParser::ObjectListContext::ObjectListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::ObjectContext *> SparqlQueryParser::ObjectListContext::object() {
  return getRuleContexts<SparqlQueryParser::ObjectContext>();
}

SparqlQueryParser::ObjectContext* SparqlQueryParser::ObjectListContext::object(size_t i) {
  return getRuleContext<SparqlQueryParser::ObjectContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::ObjectListContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::ObjectListContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}


size_t SparqlQueryParser::ObjectListContext::getRuleIndex() const {
  return SparqlQueryParser::RuleObjectList;
}


std::any SparqlQueryParser::ObjectListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitObjectList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ObjectListContext* SparqlQueryParser::objectList() {
  ObjectListContext *_localctx = _tracker.createInstance<ObjectListContext>(_ctx, getState());
  enterRule(_localctx, 110, SparqlQueryParser::RuleObjectList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(667);
    object();
    setState(672);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::COMMA) {
      setState(668);
      match(SparqlQueryParser::COMMA);
      setState(669);
      object();
      setState(674);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectContext ------------------------------------------------------------------

SparqlQueryParser::ObjectContext::ObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::GraphNodeContext* SparqlQueryParser::ObjectContext::graphNode() {
  return getRuleContext<SparqlQueryParser::GraphNodeContext>(0);
}


size_t SparqlQueryParser::ObjectContext::getRuleIndex() const {
  return SparqlQueryParser::RuleObject;
}


std::any SparqlQueryParser::ObjectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitObject(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ObjectContext* SparqlQueryParser::object() {
  ObjectContext *_localctx = _tracker.createInstance<ObjectContext>(_ctx, getState());
  enterRule(_localctx, 112, SparqlQueryParser::RuleObject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(675);
    graphNode();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TriplesSameSubjectPathContext ------------------------------------------------------------------

SparqlQueryParser::TriplesSameSubjectPathContext::TriplesSameSubjectPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarOrTermContext* SparqlQueryParser::TriplesSameSubjectPathContext::varOrTerm() {
  return getRuleContext<SparqlQueryParser::VarOrTermContext>(0);
}

SparqlQueryParser::PropertyListPathNotEmptyContext* SparqlQueryParser::TriplesSameSubjectPathContext::propertyListPathNotEmpty() {
  return getRuleContext<SparqlQueryParser::PropertyListPathNotEmptyContext>(0);
}

SparqlQueryParser::TriplesNodePathContext* SparqlQueryParser::TriplesSameSubjectPathContext::triplesNodePath() {
  return getRuleContext<SparqlQueryParser::TriplesNodePathContext>(0);
}

SparqlQueryParser::PropertyListPathContext* SparqlQueryParser::TriplesSameSubjectPathContext::propertyListPath() {
  return getRuleContext<SparqlQueryParser::PropertyListPathContext>(0);
}


size_t SparqlQueryParser::TriplesSameSubjectPathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleTriplesSameSubjectPath;
}


std::any SparqlQueryParser::TriplesSameSubjectPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitTriplesSameSubjectPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::TriplesSameSubjectPathContext* SparqlQueryParser::triplesSameSubjectPath() {
  TriplesSameSubjectPathContext *_localctx = _tracker.createInstance<TriplesSameSubjectPathContext>(_ctx, getState());
  enterRule(_localctx, 114, SparqlQueryParser::RuleTriplesSameSubjectPath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(683);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(677);
      varOrTerm();
      setState(678);
      propertyListPathNotEmpty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(680);
      triplesNodePath();
      setState(681);
      propertyListPath();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListPathContext ------------------------------------------------------------------

SparqlQueryParser::PropertyListPathContext::PropertyListPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PropertyListPathNotEmptyContext* SparqlQueryParser::PropertyListPathContext::propertyListPathNotEmpty() {
  return getRuleContext<SparqlQueryParser::PropertyListPathNotEmptyContext>(0);
}


size_t SparqlQueryParser::PropertyListPathContext::getRuleIndex() const {
  return SparqlQueryParser::RulePropertyListPath;
}


std::any SparqlQueryParser::PropertyListPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPropertyListPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PropertyListPathContext* SparqlQueryParser::propertyListPath() {
  PropertyListPathContext *_localctx = _tracker.createInstance<PropertyListPathContext>(_ctx, getState());
  enterRule(_localctx, 116, SparqlQueryParser::RulePropertyListPath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(686);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::A

    || _la == SparqlQueryParser::ALL || ((((_la - 100) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 100)) & 563053032650497) != 0)) {
      setState(685);
      propertyListPathNotEmpty();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListPathNotEmptyContext ------------------------------------------------------------------

SparqlQueryParser::PropertyListPathNotEmptyContext::PropertyListPathNotEmptyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::ObjectListPathContext* SparqlQueryParser::PropertyListPathNotEmptyContext::objectListPath() {
  return getRuleContext<SparqlQueryParser::ObjectListPathContext>(0);
}

SparqlQueryParser::VerbPathContext* SparqlQueryParser::PropertyListPathNotEmptyContext::verbPath() {
  return getRuleContext<SparqlQueryParser::VerbPathContext>(0);
}

SparqlQueryParser::VerbSimpleContext* SparqlQueryParser::PropertyListPathNotEmptyContext::verbSimple() {
  return getRuleContext<SparqlQueryParser::VerbSimpleContext>(0);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::PropertyListPathNotEmptyContext::SEMICOLON() {
  return getTokens(SparqlQueryParser::SEMICOLON);
}

tree::TerminalNode* SparqlQueryParser::PropertyListPathNotEmptyContext::SEMICOLON(size_t i) {
  return getToken(SparqlQueryParser::SEMICOLON, i);
}

std::vector<SparqlQueryParser::PropertyListPathNotEmptyListContext *> SparqlQueryParser::PropertyListPathNotEmptyContext::propertyListPathNotEmptyList() {
  return getRuleContexts<SparqlQueryParser::PropertyListPathNotEmptyListContext>();
}

SparqlQueryParser::PropertyListPathNotEmptyListContext* SparqlQueryParser::PropertyListPathNotEmptyContext::propertyListPathNotEmptyList(size_t i) {
  return getRuleContext<SparqlQueryParser::PropertyListPathNotEmptyListContext>(i);
}


size_t SparqlQueryParser::PropertyListPathNotEmptyContext::getRuleIndex() const {
  return SparqlQueryParser::RulePropertyListPathNotEmpty;
}


std::any SparqlQueryParser::PropertyListPathNotEmptyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPropertyListPathNotEmpty(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PropertyListPathNotEmptyContext* SparqlQueryParser::propertyListPathNotEmpty() {
  PropertyListPathNotEmptyContext *_localctx = _tracker.createInstance<PropertyListPathNotEmptyContext>(_ctx, getState());
  enterRule(_localctx, 118, SparqlQueryParser::RulePropertyListPathNotEmpty);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(690);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::A:
      case SparqlQueryParser::ALL:
      case SparqlQueryParser::ANY:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::INVERSE:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::NEGATION: {
        setState(688);
        verbPath();
        break;
      }

      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        setState(689);
        verbSimple();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(692);
    objectListPath();
    setState(699);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::SEMICOLON) {
      setState(693);
      match(SparqlQueryParser::SEMICOLON);
      setState(695);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SparqlQueryParser::A

      || _la == SparqlQueryParser::ALL || ((((_la - 100) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 100)) & 563053032650497) != 0)) {
        setState(694);
        propertyListPathNotEmptyList();
      }
      setState(701);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListPathNotEmptyListContext ------------------------------------------------------------------

SparqlQueryParser::PropertyListPathNotEmptyListContext::PropertyListPathNotEmptyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::ObjectListContext* SparqlQueryParser::PropertyListPathNotEmptyListContext::objectList() {
  return getRuleContext<SparqlQueryParser::ObjectListContext>(0);
}

SparqlQueryParser::VerbPathContext* SparqlQueryParser::PropertyListPathNotEmptyListContext::verbPath() {
  return getRuleContext<SparqlQueryParser::VerbPathContext>(0);
}

SparqlQueryParser::VerbSimpleContext* SparqlQueryParser::PropertyListPathNotEmptyListContext::verbSimple() {
  return getRuleContext<SparqlQueryParser::VerbSimpleContext>(0);
}


size_t SparqlQueryParser::PropertyListPathNotEmptyListContext::getRuleIndex() const {
  return SparqlQueryParser::RulePropertyListPathNotEmptyList;
}


std::any SparqlQueryParser::PropertyListPathNotEmptyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPropertyListPathNotEmptyList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PropertyListPathNotEmptyListContext* SparqlQueryParser::propertyListPathNotEmptyList() {
  PropertyListPathNotEmptyListContext *_localctx = _tracker.createInstance<PropertyListPathNotEmptyListContext>(_ctx, getState());
  enterRule(_localctx, 120, SparqlQueryParser::RulePropertyListPathNotEmptyList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(704);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::A:
      case SparqlQueryParser::ALL:
      case SparqlQueryParser::ANY:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::INVERSE:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::NEGATION: {
        setState(702);
        verbPath();
        break;
      }

      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        setState(703);
        verbSimple();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(706);
    objectList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VerbPathContext ------------------------------------------------------------------

SparqlQueryParser::VerbPathContext::VerbPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PathContext* SparqlQueryParser::VerbPathContext::path() {
  return getRuleContext<SparqlQueryParser::PathContext>(0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::AS() {
  return getToken(SparqlQueryParser::AS, 0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::VerbPathContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::ANY() {
  return getToken(SparqlQueryParser::ANY, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::ALL() {
  return getToken(SparqlQueryParser::ALL, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::SHORTEST() {
  return getToken(SparqlQueryParser::SHORTEST, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::WALKS() {
  return getToken(SparqlQueryParser::WALKS, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::SIMPLE() {
  return getToken(SparqlQueryParser::SIMPLE, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::ACYCLIC() {
  return getToken(SparqlQueryParser::ACYCLIC, 0);
}


size_t SparqlQueryParser::VerbPathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleVerbPath;
}


std::any SparqlQueryParser::VerbPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitVerbPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::VerbPathContext* SparqlQueryParser::verbPath() {
  VerbPathContext *_localctx = _tracker.createInstance<VerbPathContext>(_ctx, getState());
  enterRule(_localctx, 122, SparqlQueryParser::RuleVerbPath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(722);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::A:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::INVERSE:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::NEGATION: {
        enterOuterAlt(_localctx, 1);
        setState(708);
        path();
        break;
      }

      case SparqlQueryParser::ALL:
      case SparqlQueryParser::ANY: {
        enterOuterAlt(_localctx, 2);
        setState(709);
        _la = _input->LA(1);
        if (!(_la == SparqlQueryParser::ALL

        || _la == SparqlQueryParser::ANY)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(711);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::SHORTEST) {
          setState(710);
          match(SparqlQueryParser::SHORTEST);
        }
        setState(714);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 102) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 102)) & 7) != 0)) {
          setState(713);
          _la = _input->LA(1);
          if (!(((((_la - 102) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 102)) & 7) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(716);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(717);
        path();
        setState(718);
        match(SparqlQueryParser::AS);
        setState(719);
        var();
        setState(720);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VerbSimpleContext ------------------------------------------------------------------

SparqlQueryParser::VerbSimpleContext::VerbSimpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarContext* SparqlQueryParser::VerbSimpleContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}


size_t SparqlQueryParser::VerbSimpleContext::getRuleIndex() const {
  return SparqlQueryParser::RuleVerbSimple;
}


std::any SparqlQueryParser::VerbSimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitVerbSimple(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::VerbSimpleContext* SparqlQueryParser::verbSimple() {
  VerbSimpleContext *_localctx = _tracker.createInstance<VerbSimpleContext>(_ctx, getState());
  enterRule(_localctx, 124, SparqlQueryParser::RuleVerbSimple);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(724);
    var();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectListPathContext ------------------------------------------------------------------

SparqlQueryParser::ObjectListPathContext::ObjectListPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::ObjectPathContext *> SparqlQueryParser::ObjectListPathContext::objectPath() {
  return getRuleContexts<SparqlQueryParser::ObjectPathContext>();
}

SparqlQueryParser::ObjectPathContext* SparqlQueryParser::ObjectListPathContext::objectPath(size_t i) {
  return getRuleContext<SparqlQueryParser::ObjectPathContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::ObjectListPathContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::ObjectListPathContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}


size_t SparqlQueryParser::ObjectListPathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleObjectListPath;
}


std::any SparqlQueryParser::ObjectListPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitObjectListPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ObjectListPathContext* SparqlQueryParser::objectListPath() {
  ObjectListPathContext *_localctx = _tracker.createInstance<ObjectListPathContext>(_ctx, getState());
  enterRule(_localctx, 126, SparqlQueryParser::RuleObjectListPath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(726);
    objectPath();
    setState(731);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::COMMA) {
      setState(727);
      match(SparqlQueryParser::COMMA);
      setState(728);
      objectPath();
      setState(733);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectPathContext ------------------------------------------------------------------

SparqlQueryParser::ObjectPathContext::ObjectPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::GraphNodePathContext* SparqlQueryParser::ObjectPathContext::graphNodePath() {
  return getRuleContext<SparqlQueryParser::GraphNodePathContext>(0);
}


size_t SparqlQueryParser::ObjectPathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleObjectPath;
}


std::any SparqlQueryParser::ObjectPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitObjectPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ObjectPathContext* SparqlQueryParser::objectPath() {
  ObjectPathContext *_localctx = _tracker.createInstance<ObjectPathContext>(_ctx, getState());
  enterRule(_localctx, 128, SparqlQueryParser::RuleObjectPath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(734);
    graphNodePath();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathContext ------------------------------------------------------------------

SparqlQueryParser::PathContext::PathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PathAlternativeContext* SparqlQueryParser::PathContext::pathAlternative() {
  return getRuleContext<SparqlQueryParser::PathAlternativeContext>(0);
}


size_t SparqlQueryParser::PathContext::getRuleIndex() const {
  return SparqlQueryParser::RulePath;
}


std::any SparqlQueryParser::PathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathContext* SparqlQueryParser::path() {
  PathContext *_localctx = _tracker.createInstance<PathContext>(_ctx, getState());
  enterRule(_localctx, 130, SparqlQueryParser::RulePath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(736);
    pathAlternative();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathAlternativeContext ------------------------------------------------------------------

SparqlQueryParser::PathAlternativeContext::PathAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::PathSequenceContext *> SparqlQueryParser::PathAlternativeContext::pathSequence() {
  return getRuleContexts<SparqlQueryParser::PathSequenceContext>();
}

SparqlQueryParser::PathSequenceContext* SparqlQueryParser::PathAlternativeContext::pathSequence(size_t i) {
  return getRuleContext<SparqlQueryParser::PathSequenceContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::PathAlternativeContext::PIPE() {
  return getTokens(SparqlQueryParser::PIPE);
}

tree::TerminalNode* SparqlQueryParser::PathAlternativeContext::PIPE(size_t i) {
  return getToken(SparqlQueryParser::PIPE, i);
}


size_t SparqlQueryParser::PathAlternativeContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathAlternative;
}


std::any SparqlQueryParser::PathAlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathAlternative(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathAlternativeContext* SparqlQueryParser::pathAlternative() {
  PathAlternativeContext *_localctx = _tracker.createInstance<PathAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 132, SparqlQueryParser::RulePathAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(738);
    pathSequence();
    setState(743);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::PIPE) {
      setState(739);
      match(SparqlQueryParser::PIPE);
      setState(740);
      pathSequence();
      setState(745);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathSequenceContext ------------------------------------------------------------------

SparqlQueryParser::PathSequenceContext::PathSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::PathEltOrInverseContext *> SparqlQueryParser::PathSequenceContext::pathEltOrInverse() {
  return getRuleContexts<SparqlQueryParser::PathEltOrInverseContext>();
}

SparqlQueryParser::PathEltOrInverseContext* SparqlQueryParser::PathSequenceContext::pathEltOrInverse(size_t i) {
  return getRuleContext<SparqlQueryParser::PathEltOrInverseContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::PathSequenceContext::DIVIDE() {
  return getTokens(SparqlQueryParser::DIVIDE);
}

tree::TerminalNode* SparqlQueryParser::PathSequenceContext::DIVIDE(size_t i) {
  return getToken(SparqlQueryParser::DIVIDE, i);
}


size_t SparqlQueryParser::PathSequenceContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathSequence;
}


std::any SparqlQueryParser::PathSequenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathSequence(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathSequenceContext* SparqlQueryParser::pathSequence() {
  PathSequenceContext *_localctx = _tracker.createInstance<PathSequenceContext>(_ctx, getState());
  enterRule(_localctx, 134, SparqlQueryParser::RulePathSequence);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(746);
    pathEltOrInverse();
    setState(751);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::DIVIDE) {
      setState(747);
      match(SparqlQueryParser::DIVIDE);
      setState(748);
      pathEltOrInverse();
      setState(753);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathEltContext ------------------------------------------------------------------

SparqlQueryParser::PathEltContext::PathEltContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PathPrimaryContext* SparqlQueryParser::PathEltContext::pathPrimary() {
  return getRuleContext<SparqlQueryParser::PathPrimaryContext>(0);
}

SparqlQueryParser::PathModContext* SparqlQueryParser::PathEltContext::pathMod() {
  return getRuleContext<SparqlQueryParser::PathModContext>(0);
}


size_t SparqlQueryParser::PathEltContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathElt;
}


std::any SparqlQueryParser::PathEltContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathElt(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathEltContext* SparqlQueryParser::pathElt() {
  PathEltContext *_localctx = _tracker.createInstance<PathEltContext>(_ctx, getState());
  enterRule(_localctx, 136, SparqlQueryParser::RulePathElt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(754);
    pathPrimary();
    setState(756);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 833) != 0)) {
      setState(755);
      pathMod();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathEltOrInverseContext ------------------------------------------------------------------

SparqlQueryParser::PathEltOrInverseContext::PathEltOrInverseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PathEltContext* SparqlQueryParser::PathEltOrInverseContext::pathElt() {
  return getRuleContext<SparqlQueryParser::PathEltContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PathEltOrInverseContext::INVERSE() {
  return getToken(SparqlQueryParser::INVERSE, 0);
}


size_t SparqlQueryParser::PathEltOrInverseContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathEltOrInverse;
}


std::any SparqlQueryParser::PathEltOrInverseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathEltOrInverse(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathEltOrInverseContext* SparqlQueryParser::pathEltOrInverse() {
  PathEltOrInverseContext *_localctx = _tracker.createInstance<PathEltOrInverseContext>(_ctx, getState());
  enterRule(_localctx, 138, SparqlQueryParser::RulePathEltOrInverse);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(759);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::INVERSE) {
      setState(758);
      match(SparqlQueryParser::INVERSE);
    }
    setState(761);
    pathElt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathModContext ------------------------------------------------------------------

SparqlQueryParser::PathModContext::PathModContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PathModContext::QUESTION_MARK() {
  return getToken(SparqlQueryParser::QUESTION_MARK, 0);
}

tree::TerminalNode* SparqlQueryParser::PathModContext::ASTERISK() {
  return getToken(SparqlQueryParser::ASTERISK, 0);
}

tree::TerminalNode* SparqlQueryParser::PathModContext::PLUS_SIGN() {
  return getToken(SparqlQueryParser::PLUS_SIGN, 0);
}

tree::TerminalNode* SparqlQueryParser::PathModContext::OPEN_CURLY_BRACE() {
  return getToken(SparqlQueryParser::OPEN_CURLY_BRACE, 0);
}

SparqlQueryParser::PathQuantityContext* SparqlQueryParser::PathModContext::pathQuantity() {
  return getRuleContext<SparqlQueryParser::PathQuantityContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PathModContext::CLOSE_CURLY_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_CURLY_BRACE, 0);
}


size_t SparqlQueryParser::PathModContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathMod;
}


std::any SparqlQueryParser::PathModContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathMod(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathModContext* SparqlQueryParser::pathMod() {
  PathModContext *_localctx = _tracker.createInstance<PathModContext>(_ctx, getState());
  enterRule(_localctx, 140, SparqlQueryParser::RulePathMod);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(770);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::QUESTION_MARK: {
        enterOuterAlt(_localctx, 1);
        setState(763);
        match(SparqlQueryParser::QUESTION_MARK);
        break;
      }

      case SparqlQueryParser::ASTERISK: {
        enterOuterAlt(_localctx, 2);
        setState(764);
        match(SparqlQueryParser::ASTERISK);
        break;
      }

      case SparqlQueryParser::PLUS_SIGN: {
        enterOuterAlt(_localctx, 3);
        setState(765);
        match(SparqlQueryParser::PLUS_SIGN);
        break;
      }

      case SparqlQueryParser::OPEN_CURLY_BRACE: {
        enterOuterAlt(_localctx, 4);
        setState(766);
        match(SparqlQueryParser::OPEN_CURLY_BRACE);
        setState(767);
        pathQuantity();
        setState(768);
        match(SparqlQueryParser::CLOSE_CURLY_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathQuantityContext ------------------------------------------------------------------

SparqlQueryParser::PathQuantityContext::PathQuantityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PathQuantityExactContext* SparqlQueryParser::PathQuantityContext::pathQuantityExact() {
  return getRuleContext<SparqlQueryParser::PathQuantityExactContext>(0);
}

SparqlQueryParser::PathQuantityRangeContext* SparqlQueryParser::PathQuantityContext::pathQuantityRange() {
  return getRuleContext<SparqlQueryParser::PathQuantityRangeContext>(0);
}

SparqlQueryParser::PathQuantityMinContext* SparqlQueryParser::PathQuantityContext::pathQuantityMin() {
  return getRuleContext<SparqlQueryParser::PathQuantityMinContext>(0);
}

SparqlQueryParser::PathQuantityMaxContext* SparqlQueryParser::PathQuantityContext::pathQuantityMax() {
  return getRuleContext<SparqlQueryParser::PathQuantityMaxContext>(0);
}


size_t SparqlQueryParser::PathQuantityContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathQuantity;
}


std::any SparqlQueryParser::PathQuantityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathQuantity(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathQuantityContext* SparqlQueryParser::pathQuantity() {
  PathQuantityContext *_localctx = _tracker.createInstance<PathQuantityContext>(_ctx, getState());
  enterRule(_localctx, 142, SparqlQueryParser::RulePathQuantity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(776);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(772);
      pathQuantityExact();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(773);
      pathQuantityRange();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(774);
      pathQuantityMin();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(775);
      pathQuantityMax();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathQuantityExactContext ------------------------------------------------------------------

SparqlQueryParser::PathQuantityExactContext::PathQuantityExactContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PathQuantityExactContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}


size_t SparqlQueryParser::PathQuantityExactContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathQuantityExact;
}


std::any SparqlQueryParser::PathQuantityExactContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathQuantityExact(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathQuantityExactContext* SparqlQueryParser::pathQuantityExact() {
  PathQuantityExactContext *_localctx = _tracker.createInstance<PathQuantityExactContext>(_ctx, getState());
  enterRule(_localctx, 144, SparqlQueryParser::RulePathQuantityExact);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(778);
    match(SparqlQueryParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathQuantityRangeContext ------------------------------------------------------------------

SparqlQueryParser::PathQuantityRangeContext::PathQuantityRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PathQuantityRangeContext::COMMA() {
  return getToken(SparqlQueryParser::COMMA, 0);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::PathQuantityRangeContext::INTEGER() {
  return getTokens(SparqlQueryParser::INTEGER);
}

tree::TerminalNode* SparqlQueryParser::PathQuantityRangeContext::INTEGER(size_t i) {
  return getToken(SparqlQueryParser::INTEGER, i);
}


size_t SparqlQueryParser::PathQuantityRangeContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathQuantityRange;
}


std::any SparqlQueryParser::PathQuantityRangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathQuantityRange(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathQuantityRangeContext* SparqlQueryParser::pathQuantityRange() {
  PathQuantityRangeContext *_localctx = _tracker.createInstance<PathQuantityRangeContext>(_ctx, getState());
  enterRule(_localctx, 146, SparqlQueryParser::RulePathQuantityRange);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(780);
    antlrcpp::downCast<PathQuantityRangeContext *>(_localctx)->min = match(SparqlQueryParser::INTEGER);
    setState(781);
    match(SparqlQueryParser::COMMA);
    setState(782);
    antlrcpp::downCast<PathQuantityRangeContext *>(_localctx)->max = match(SparqlQueryParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathQuantityMinContext ------------------------------------------------------------------

SparqlQueryParser::PathQuantityMinContext::PathQuantityMinContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PathQuantityMinContext::COMMA() {
  return getToken(SparqlQueryParser::COMMA, 0);
}

tree::TerminalNode* SparqlQueryParser::PathQuantityMinContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}


size_t SparqlQueryParser::PathQuantityMinContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathQuantityMin;
}


std::any SparqlQueryParser::PathQuantityMinContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathQuantityMin(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathQuantityMinContext* SparqlQueryParser::pathQuantityMin() {
  PathQuantityMinContext *_localctx = _tracker.createInstance<PathQuantityMinContext>(_ctx, getState());
  enterRule(_localctx, 148, SparqlQueryParser::RulePathQuantityMin);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(784);
    antlrcpp::downCast<PathQuantityMinContext *>(_localctx)->min = match(SparqlQueryParser::INTEGER);
    setState(785);
    match(SparqlQueryParser::COMMA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathQuantityMaxContext ------------------------------------------------------------------

SparqlQueryParser::PathQuantityMaxContext::PathQuantityMaxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PathQuantityMaxContext::COMMA() {
  return getToken(SparqlQueryParser::COMMA, 0);
}

tree::TerminalNode* SparqlQueryParser::PathQuantityMaxContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}


size_t SparqlQueryParser::PathQuantityMaxContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathQuantityMax;
}


std::any SparqlQueryParser::PathQuantityMaxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathQuantityMax(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathQuantityMaxContext* SparqlQueryParser::pathQuantityMax() {
  PathQuantityMaxContext *_localctx = _tracker.createInstance<PathQuantityMaxContext>(_ctx, getState());
  enterRule(_localctx, 150, SparqlQueryParser::RulePathQuantityMax);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(787);
    match(SparqlQueryParser::COMMA);
    setState(788);
    antlrcpp::downCast<PathQuantityMaxContext *>(_localctx)->max = match(SparqlQueryParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPrimaryContext ------------------------------------------------------------------

SparqlQueryParser::PathPrimaryContext::PathPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::IriContext* SparqlQueryParser::PathPrimaryContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PathPrimaryContext::A() {
  return getToken(SparqlQueryParser::A, 0);
}

tree::TerminalNode* SparqlQueryParser::PathPrimaryContext::NEGATION() {
  return getToken(SparqlQueryParser::NEGATION, 0);
}

SparqlQueryParser::PathNegatedPropertySetContext* SparqlQueryParser::PathPrimaryContext::pathNegatedPropertySet() {
  return getRuleContext<SparqlQueryParser::PathNegatedPropertySetContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PathPrimaryContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::PathContext* SparqlQueryParser::PathPrimaryContext::path() {
  return getRuleContext<SparqlQueryParser::PathContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PathPrimaryContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}


size_t SparqlQueryParser::PathPrimaryContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathPrimary;
}


std::any SparqlQueryParser::PathPrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathPrimary(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathPrimaryContext* SparqlQueryParser::pathPrimary() {
  PathPrimaryContext *_localctx = _tracker.createInstance<PathPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 152, SparqlQueryParser::RulePathPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(798);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 1);
        setState(790);
        iri();
        break;
      }

      case SparqlQueryParser::A: {
        enterOuterAlt(_localctx, 2);
        setState(791);
        match(SparqlQueryParser::A);
        break;
      }

      case SparqlQueryParser::NEGATION: {
        enterOuterAlt(_localctx, 3);
        setState(792);
        match(SparqlQueryParser::NEGATION);
        setState(793);
        pathNegatedPropertySet();
        break;
      }

      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 4);
        setState(794);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(795);
        path();
        setState(796);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathNegatedPropertySetContext ------------------------------------------------------------------

SparqlQueryParser::PathNegatedPropertySetContext::PathNegatedPropertySetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::PathOneInPropertySetContext *> SparqlQueryParser::PathNegatedPropertySetContext::pathOneInPropertySet() {
  return getRuleContexts<SparqlQueryParser::PathOneInPropertySetContext>();
}

SparqlQueryParser::PathOneInPropertySetContext* SparqlQueryParser::PathNegatedPropertySetContext::pathOneInPropertySet(size_t i) {
  return getRuleContext<SparqlQueryParser::PathOneInPropertySetContext>(i);
}

tree::TerminalNode* SparqlQueryParser::PathNegatedPropertySetContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::PathNegatedPropertySetContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::PathNegatedPropertySetContext::PIPE() {
  return getTokens(SparqlQueryParser::PIPE);
}

tree::TerminalNode* SparqlQueryParser::PathNegatedPropertySetContext::PIPE(size_t i) {
  return getToken(SparqlQueryParser::PIPE, i);
}


size_t SparqlQueryParser::PathNegatedPropertySetContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathNegatedPropertySet;
}


std::any SparqlQueryParser::PathNegatedPropertySetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathNegatedPropertySet(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathNegatedPropertySetContext* SparqlQueryParser::pathNegatedPropertySet() {
  PathNegatedPropertySetContext *_localctx = _tracker.createInstance<PathNegatedPropertySetContext>(_ctx, getState());
  enterRule(_localctx, 154, SparqlQueryParser::RulePathNegatedPropertySet);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(813);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::A:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::INVERSE: {
        enterOuterAlt(_localctx, 1);
        setState(800);
        pathOneInPropertySet();
        break;
      }

      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(801);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(810);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::A || ((((_la - 108) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 108)) & 134217735) != 0)) {
          setState(802);
          pathOneInPropertySet();
          setState(807);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == SparqlQueryParser::PIPE) {
            setState(803);
            match(SparqlQueryParser::PIPE);
            setState(804);
            pathOneInPropertySet();
            setState(809);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(812);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathOneInPropertySetContext ------------------------------------------------------------------

SparqlQueryParser::PathOneInPropertySetContext::PathOneInPropertySetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::IriContext* SparqlQueryParser::PathOneInPropertySetContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PathOneInPropertySetContext::A() {
  return getToken(SparqlQueryParser::A, 0);
}

tree::TerminalNode* SparqlQueryParser::PathOneInPropertySetContext::INVERSE() {
  return getToken(SparqlQueryParser::INVERSE, 0);
}


size_t SparqlQueryParser::PathOneInPropertySetContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathOneInPropertySet;
}


std::any SparqlQueryParser::PathOneInPropertySetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathOneInPropertySet(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathOneInPropertySetContext* SparqlQueryParser::pathOneInPropertySet() {
  PathOneInPropertySetContext *_localctx = _tracker.createInstance<PathOneInPropertySetContext>(_ctx, getState());
  enterRule(_localctx, 156, SparqlQueryParser::RulePathOneInPropertySet);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(816);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::INVERSE) {
      setState(815);
      match(SparqlQueryParser::INVERSE);
    }
    setState(820);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        setState(818);
        iri();
        break;
      }

      case SparqlQueryParser::A: {
        setState(819);
        match(SparqlQueryParser::A);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerContext ------------------------------------------------------------------

SparqlQueryParser::IntegerContext::IntegerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::IntegerContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}


size_t SparqlQueryParser::IntegerContext::getRuleIndex() const {
  return SparqlQueryParser::RuleInteger;
}


std::any SparqlQueryParser::IntegerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitInteger(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::IntegerContext* SparqlQueryParser::integer() {
  IntegerContext *_localctx = _tracker.createInstance<IntegerContext>(_ctx, getState());
  enterRule(_localctx, 158, SparqlQueryParser::RuleInteger);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(822);
    match(SparqlQueryParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TriplesNodeContext ------------------------------------------------------------------

SparqlQueryParser::TriplesNodeContext::TriplesNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::CollectionContext* SparqlQueryParser::TriplesNodeContext::collection() {
  return getRuleContext<SparqlQueryParser::CollectionContext>(0);
}

SparqlQueryParser::BlankNodePropertyListContext* SparqlQueryParser::TriplesNodeContext::blankNodePropertyList() {
  return getRuleContext<SparqlQueryParser::BlankNodePropertyListContext>(0);
}


size_t SparqlQueryParser::TriplesNodeContext::getRuleIndex() const {
  return SparqlQueryParser::RuleTriplesNode;
}


std::any SparqlQueryParser::TriplesNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitTriplesNode(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::TriplesNodeContext* SparqlQueryParser::triplesNode() {
  TriplesNodeContext *_localctx = _tracker.createInstance<TriplesNodeContext>(_ctx, getState());
  enterRule(_localctx, 160, SparqlQueryParser::RuleTriplesNode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(826);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(824);
        collection();
        break;
      }

      case SparqlQueryParser::OPEN_SQUARE_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(825);
        blankNodePropertyList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlankNodePropertyListContext ------------------------------------------------------------------

SparqlQueryParser::BlankNodePropertyListContext::BlankNodePropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::BlankNodePropertyListContext::OPEN_SQUARE_BRACKET() {
  return getToken(SparqlQueryParser::OPEN_SQUARE_BRACKET, 0);
}

SparqlQueryParser::PropertyListNotEmptyContext* SparqlQueryParser::BlankNodePropertyListContext::propertyListNotEmpty() {
  return getRuleContext<SparqlQueryParser::PropertyListNotEmptyContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BlankNodePropertyListContext::CLOSE_SQUARE_BRACKET() {
  return getToken(SparqlQueryParser::CLOSE_SQUARE_BRACKET, 0);
}


size_t SparqlQueryParser::BlankNodePropertyListContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBlankNodePropertyList;
}


std::any SparqlQueryParser::BlankNodePropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBlankNodePropertyList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BlankNodePropertyListContext* SparqlQueryParser::blankNodePropertyList() {
  BlankNodePropertyListContext *_localctx = _tracker.createInstance<BlankNodePropertyListContext>(_ctx, getState());
  enterRule(_localctx, 162, SparqlQueryParser::RuleBlankNodePropertyList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(828);
    match(SparqlQueryParser::OPEN_SQUARE_BRACKET);
    setState(829);
    propertyListNotEmpty();
    setState(830);
    match(SparqlQueryParser::CLOSE_SQUARE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TriplesNodePathContext ------------------------------------------------------------------

SparqlQueryParser::TriplesNodePathContext::TriplesNodePathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::CollectionPathContext* SparqlQueryParser::TriplesNodePathContext::collectionPath() {
  return getRuleContext<SparqlQueryParser::CollectionPathContext>(0);
}

SparqlQueryParser::BlankNodePropertyListPathContext* SparqlQueryParser::TriplesNodePathContext::blankNodePropertyListPath() {
  return getRuleContext<SparqlQueryParser::BlankNodePropertyListPathContext>(0);
}


size_t SparqlQueryParser::TriplesNodePathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleTriplesNodePath;
}


std::any SparqlQueryParser::TriplesNodePathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitTriplesNodePath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::TriplesNodePathContext* SparqlQueryParser::triplesNodePath() {
  TriplesNodePathContext *_localctx = _tracker.createInstance<TriplesNodePathContext>(_ctx, getState());
  enterRule(_localctx, 164, SparqlQueryParser::RuleTriplesNodePath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(834);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(832);
        collectionPath();
        break;
      }

      case SparqlQueryParser::OPEN_SQUARE_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(833);
        blankNodePropertyListPath();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlankNodePropertyListPathContext ------------------------------------------------------------------

SparqlQueryParser::BlankNodePropertyListPathContext::BlankNodePropertyListPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::BlankNodePropertyListPathContext::OPEN_SQUARE_BRACKET() {
  return getToken(SparqlQueryParser::OPEN_SQUARE_BRACKET, 0);
}

SparqlQueryParser::PropertyListPathNotEmptyContext* SparqlQueryParser::BlankNodePropertyListPathContext::propertyListPathNotEmpty() {
  return getRuleContext<SparqlQueryParser::PropertyListPathNotEmptyContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BlankNodePropertyListPathContext::CLOSE_SQUARE_BRACKET() {
  return getToken(SparqlQueryParser::CLOSE_SQUARE_BRACKET, 0);
}


size_t SparqlQueryParser::BlankNodePropertyListPathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBlankNodePropertyListPath;
}


std::any SparqlQueryParser::BlankNodePropertyListPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBlankNodePropertyListPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BlankNodePropertyListPathContext* SparqlQueryParser::blankNodePropertyListPath() {
  BlankNodePropertyListPathContext *_localctx = _tracker.createInstance<BlankNodePropertyListPathContext>(_ctx, getState());
  enterRule(_localctx, 166, SparqlQueryParser::RuleBlankNodePropertyListPath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(836);
    match(SparqlQueryParser::OPEN_SQUARE_BRACKET);
    setState(837);
    propertyListPathNotEmpty();
    setState(838);
    match(SparqlQueryParser::CLOSE_SQUARE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionContext ------------------------------------------------------------------

SparqlQueryParser::CollectionContext::CollectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::CollectionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::CollectionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

std::vector<SparqlQueryParser::GraphNodeContext *> SparqlQueryParser::CollectionContext::graphNode() {
  return getRuleContexts<SparqlQueryParser::GraphNodeContext>();
}

SparqlQueryParser::GraphNodeContext* SparqlQueryParser::CollectionContext::graphNode(size_t i) {
  return getRuleContext<SparqlQueryParser::GraphNodeContext>(i);
}


size_t SparqlQueryParser::CollectionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleCollection;
}


std::any SparqlQueryParser::CollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitCollection(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::CollectionContext* SparqlQueryParser::collection() {
  CollectionContext *_localctx = _tracker.createInstance<CollectionContext>(_ctx, getState());
  enterRule(_localctx, 168, SparqlQueryParser::RuleCollection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(840);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(842); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(841);
      graphNode();
      setState(844); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == SparqlQueryParser::TRUE

    || _la == SparqlQueryParser::FALSE || ((((_la - 108) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 108)) & 4564451263) != 0));
    setState(846);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionPathContext ------------------------------------------------------------------

SparqlQueryParser::CollectionPathContext::CollectionPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::CollectionPathContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::CollectionPathContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

std::vector<SparqlQueryParser::GraphNodePathContext *> SparqlQueryParser::CollectionPathContext::graphNodePath() {
  return getRuleContexts<SparqlQueryParser::GraphNodePathContext>();
}

SparqlQueryParser::GraphNodePathContext* SparqlQueryParser::CollectionPathContext::graphNodePath(size_t i) {
  return getRuleContext<SparqlQueryParser::GraphNodePathContext>(i);
}


size_t SparqlQueryParser::CollectionPathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleCollectionPath;
}


std::any SparqlQueryParser::CollectionPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitCollectionPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::CollectionPathContext* SparqlQueryParser::collectionPath() {
  CollectionPathContext *_localctx = _tracker.createInstance<CollectionPathContext>(_ctx, getState());
  enterRule(_localctx, 170, SparqlQueryParser::RuleCollectionPath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(848);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(850); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(849);
      graphNodePath();
      setState(852); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == SparqlQueryParser::TRUE

    || _la == SparqlQueryParser::FALSE || ((((_la - 108) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 108)) & 4564451263) != 0));
    setState(854);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphNodeContext ------------------------------------------------------------------

SparqlQueryParser::GraphNodeContext::GraphNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarOrTermContext* SparqlQueryParser::GraphNodeContext::varOrTerm() {
  return getRuleContext<SparqlQueryParser::VarOrTermContext>(0);
}

SparqlQueryParser::TriplesNodeContext* SparqlQueryParser::GraphNodeContext::triplesNode() {
  return getRuleContext<SparqlQueryParser::TriplesNodeContext>(0);
}


size_t SparqlQueryParser::GraphNodeContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGraphNode;
}


std::any SparqlQueryParser::GraphNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGraphNode(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GraphNodeContext* SparqlQueryParser::graphNode() {
  GraphNodeContext *_localctx = _tracker.createInstance<GraphNodeContext>(_ctx, getState());
  enterRule(_localctx, 172, SparqlQueryParser::RuleGraphNode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(858);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(856);
      varOrTerm();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(857);
      triplesNode();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphNodePathContext ------------------------------------------------------------------

SparqlQueryParser::GraphNodePathContext::GraphNodePathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarOrTermContext* SparqlQueryParser::GraphNodePathContext::varOrTerm() {
  return getRuleContext<SparqlQueryParser::VarOrTermContext>(0);
}

SparqlQueryParser::TriplesNodePathContext* SparqlQueryParser::GraphNodePathContext::triplesNodePath() {
  return getRuleContext<SparqlQueryParser::TriplesNodePathContext>(0);
}


size_t SparqlQueryParser::GraphNodePathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGraphNodePath;
}


std::any SparqlQueryParser::GraphNodePathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGraphNodePath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GraphNodePathContext* SparqlQueryParser::graphNodePath() {
  GraphNodePathContext *_localctx = _tracker.createInstance<GraphNodePathContext>(_ctx, getState());
  enterRule(_localctx, 174, SparqlQueryParser::RuleGraphNodePath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(862);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(860);
      varOrTerm();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(861);
      triplesNodePath();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarOrTermContext ------------------------------------------------------------------

SparqlQueryParser::VarOrTermContext::VarOrTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarContext* SparqlQueryParser::VarOrTermContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

SparqlQueryParser::GraphTermContext* SparqlQueryParser::VarOrTermContext::graphTerm() {
  return getRuleContext<SparqlQueryParser::GraphTermContext>(0);
}


size_t SparqlQueryParser::VarOrTermContext::getRuleIndex() const {
  return SparqlQueryParser::RuleVarOrTerm;
}


std::any SparqlQueryParser::VarOrTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitVarOrTerm(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::VarOrTermContext* SparqlQueryParser::varOrTerm() {
  VarOrTermContext *_localctx = _tracker.createInstance<VarOrTermContext>(_ctx, getState());
  enterRule(_localctx, 176, SparqlQueryParser::RuleVarOrTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(866);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 1);
        setState(864);
        var();
        break;
      }

      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::BLANK_NODE_LABEL:
      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE:
      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::OPEN_SQUARE_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(865);
        graphTerm();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarOrIRIContext ------------------------------------------------------------------

SparqlQueryParser::VarOrIRIContext::VarOrIRIContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarContext* SparqlQueryParser::VarOrIRIContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

SparqlQueryParser::IriContext* SparqlQueryParser::VarOrIRIContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}


size_t SparqlQueryParser::VarOrIRIContext::getRuleIndex() const {
  return SparqlQueryParser::RuleVarOrIRI;
}


std::any SparqlQueryParser::VarOrIRIContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitVarOrIRI(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::VarOrIRIContext* SparqlQueryParser::varOrIRI() {
  VarOrIRIContext *_localctx = _tracker.createInstance<VarOrIRIContext>(_ctx, getState());
  enterRule(_localctx, 178, SparqlQueryParser::RuleVarOrIRI);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(870);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 1);
        setState(868);
        var();
        break;
      }

      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 2);
        setState(869);
        iri();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarContext ------------------------------------------------------------------

SparqlQueryParser::VarContext::VarContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::VarContext::VAR1() {
  return getToken(SparqlQueryParser::VAR1, 0);
}

tree::TerminalNode* SparqlQueryParser::VarContext::VAR2() {
  return getToken(SparqlQueryParser::VAR2, 0);
}


size_t SparqlQueryParser::VarContext::getRuleIndex() const {
  return SparqlQueryParser::RuleVar;
}


std::any SparqlQueryParser::VarContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitVar(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::VarContext* SparqlQueryParser::var() {
  VarContext *_localctx = _tracker.createInstance<VarContext>(_ctx, getState());
  enterRule(_localctx, 180, SparqlQueryParser::RuleVar);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(872);
    _la = _input->LA(1);
    if (!(_la == SparqlQueryParser::VAR1

    || _la == SparqlQueryParser::VAR2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphTermContext ------------------------------------------------------------------

SparqlQueryParser::GraphTermContext::GraphTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::IriContext* SparqlQueryParser::GraphTermContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

SparqlQueryParser::RdfLiteralContext* SparqlQueryParser::GraphTermContext::rdfLiteral() {
  return getRuleContext<SparqlQueryParser::RdfLiteralContext>(0);
}

SparqlQueryParser::NumericLiteralContext* SparqlQueryParser::GraphTermContext::numericLiteral() {
  return getRuleContext<SparqlQueryParser::NumericLiteralContext>(0);
}

SparqlQueryParser::BooleanLiteralContext* SparqlQueryParser::GraphTermContext::booleanLiteral() {
  return getRuleContext<SparqlQueryParser::BooleanLiteralContext>(0);
}

SparqlQueryParser::BlankNodeContext* SparqlQueryParser::GraphTermContext::blankNode() {
  return getRuleContext<SparqlQueryParser::BlankNodeContext>(0);
}

SparqlQueryParser::NilContext* SparqlQueryParser::GraphTermContext::nil() {
  return getRuleContext<SparqlQueryParser::NilContext>(0);
}


size_t SparqlQueryParser::GraphTermContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGraphTerm;
}


std::any SparqlQueryParser::GraphTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGraphTerm(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GraphTermContext* SparqlQueryParser::graphTerm() {
  GraphTermContext *_localctx = _tracker.createInstance<GraphTermContext>(_ctx, getState());
  enterRule(_localctx, 182, SparqlQueryParser::RuleGraphTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(880);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 1);
        setState(874);
        iri();
        break;
      }

      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2: {
        enterOuterAlt(_localctx, 2);
        setState(875);
        rdfLiteral();
        break;
      }

      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE: {
        enterOuterAlt(_localctx, 3);
        setState(876);
        numericLiteral();
        break;
      }

      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE: {
        enterOuterAlt(_localctx, 4);
        setState(877);
        booleanLiteral();
        break;
      }

      case SparqlQueryParser::BLANK_NODE_LABEL:
      case SparqlQueryParser::OPEN_SQUARE_BRACKET: {
        enterOuterAlt(_localctx, 5);
        setState(878);
        blankNode();
        break;
      }

      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 6);
        setState(879);
        nil();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NilContext ------------------------------------------------------------------

SparqlQueryParser::NilContext::NilContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::NilContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::NilContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}


size_t SparqlQueryParser::NilContext::getRuleIndex() const {
  return SparqlQueryParser::RuleNil;
}


std::any SparqlQueryParser::NilContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitNil(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::NilContext* SparqlQueryParser::nil() {
  NilContext *_localctx = _tracker.createInstance<NilContext>(_ctx, getState());
  enterRule(_localctx, 184, SparqlQueryParser::RuleNil);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(882);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(883);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

SparqlQueryParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::ConditionalOrExpressionContext* SparqlQueryParser::ExpressionContext::conditionalOrExpression() {
  return getRuleContext<SparqlQueryParser::ConditionalOrExpressionContext>(0);
}


size_t SparqlQueryParser::ExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleExpression;
}


std::any SparqlQueryParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 186, SparqlQueryParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(885);
    conditionalOrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalOrExpressionContext ------------------------------------------------------------------

SparqlQueryParser::ConditionalOrExpressionContext::ConditionalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::ConditionalAndExpressionContext *> SparqlQueryParser::ConditionalOrExpressionContext::conditionalAndExpression() {
  return getRuleContexts<SparqlQueryParser::ConditionalAndExpressionContext>();
}

SparqlQueryParser::ConditionalAndExpressionContext* SparqlQueryParser::ConditionalOrExpressionContext::conditionalAndExpression(size_t i) {
  return getRuleContext<SparqlQueryParser::ConditionalAndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::ConditionalOrExpressionContext::OR() {
  return getTokens(SparqlQueryParser::OR);
}

tree::TerminalNode* SparqlQueryParser::ConditionalOrExpressionContext::OR(size_t i) {
  return getToken(SparqlQueryParser::OR, i);
}


size_t SparqlQueryParser::ConditionalOrExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleConditionalOrExpression;
}


std::any SparqlQueryParser::ConditionalOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitConditionalOrExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ConditionalOrExpressionContext* SparqlQueryParser::conditionalOrExpression() {
  ConditionalOrExpressionContext *_localctx = _tracker.createInstance<ConditionalOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 188, SparqlQueryParser::RuleConditionalOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(887);
    conditionalAndExpression();
    setState(892);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::OR) {
      setState(888);
      match(SparqlQueryParser::OR);
      setState(889);
      conditionalAndExpression();
      setState(894);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalAndExpressionContext ------------------------------------------------------------------

SparqlQueryParser::ConditionalAndExpressionContext::ConditionalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::RelationalExpressionContext *> SparqlQueryParser::ConditionalAndExpressionContext::relationalExpression() {
  return getRuleContexts<SparqlQueryParser::RelationalExpressionContext>();
}

SparqlQueryParser::RelationalExpressionContext* SparqlQueryParser::ConditionalAndExpressionContext::relationalExpression(size_t i) {
  return getRuleContext<SparqlQueryParser::RelationalExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::ConditionalAndExpressionContext::AND() {
  return getTokens(SparqlQueryParser::AND);
}

tree::TerminalNode* SparqlQueryParser::ConditionalAndExpressionContext::AND(size_t i) {
  return getToken(SparqlQueryParser::AND, i);
}


size_t SparqlQueryParser::ConditionalAndExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleConditionalAndExpression;
}


std::any SparqlQueryParser::ConditionalAndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitConditionalAndExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ConditionalAndExpressionContext* SparqlQueryParser::conditionalAndExpression() {
  ConditionalAndExpressionContext *_localctx = _tracker.createInstance<ConditionalAndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 190, SparqlQueryParser::RuleConditionalAndExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(895);
    relationalExpression();
    setState(900);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::AND) {
      setState(896);
      match(SparqlQueryParser::AND);
      setState(897);
      relationalExpression();
      setState(902);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

SparqlQueryParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::AdditiveExpressionContext *> SparqlQueryParser::RelationalExpressionContext::additiveExpression() {
  return getRuleContexts<SparqlQueryParser::AdditiveExpressionContext>();
}

SparqlQueryParser::AdditiveExpressionContext* SparqlQueryParser::RelationalExpressionContext::additiveExpression(size_t i) {
  return getRuleContext<SparqlQueryParser::AdditiveExpressionContext>(i);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::EQUAL() {
  return getToken(SparqlQueryParser::EQUAL, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::NOT_EQUAL() {
  return getToken(SparqlQueryParser::NOT_EQUAL, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::LESS() {
  return getToken(SparqlQueryParser::LESS, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::GREATER() {
  return getToken(SparqlQueryParser::GREATER, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::LESS_EQUAL() {
  return getToken(SparqlQueryParser::LESS_EQUAL, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::GREATER_EQUAL() {
  return getToken(SparqlQueryParser::GREATER_EQUAL, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::IN() {
  return getToken(SparqlQueryParser::IN, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::NOT() {
  return getToken(SparqlQueryParser::NOT, 0);
}

SparqlQueryParser::ExpressionListContext* SparqlQueryParser::RelationalExpressionContext::expressionList() {
  return getRuleContext<SparqlQueryParser::ExpressionListContext>(0);
}


size_t SparqlQueryParser::RelationalExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleRelationalExpression;
}


std::any SparqlQueryParser::RelationalExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitRelationalExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::RelationalExpressionContext* SparqlQueryParser::relationalExpression() {
  RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 192, SparqlQueryParser::RuleRelationalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(919);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(903);
      additiveExpression();
      setState(906);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 130) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 130)) & 14680071) != 0)) {
        setState(904);
        antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->op = _input->LT(1);
        _la = _input->LA(1);
        if (!(((((_la - 130) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 130)) & 14680071) != 0))) {
          antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(905);
        additiveExpression();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(908);
      additiveExpression();
      setState(910);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SparqlQueryParser::NOT) {
        setState(909);
        match(SparqlQueryParser::NOT);
      }
      setState(912);
      match(SparqlQueryParser::IN);
      setState(913);
      match(SparqlQueryParser::OPEN_BRACE);
      setState(915);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 25) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 25)) & -16760833) != 0) || ((((_la - 89) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 89)) & 1261149182869635839) != 0)) {
        setState(914);
        expressionList();
      }
      setState(917);
      match(SparqlQueryParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

SparqlQueryParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::MultiplicativeExpressionContext* SparqlQueryParser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContext<SparqlQueryParser::MultiplicativeExpressionContext>(0);
}

std::vector<SparqlQueryParser::RhsAdditiveExpressionContext *> SparqlQueryParser::AdditiveExpressionContext::rhsAdditiveExpression() {
  return getRuleContexts<SparqlQueryParser::RhsAdditiveExpressionContext>();
}

SparqlQueryParser::RhsAdditiveExpressionContext* SparqlQueryParser::AdditiveExpressionContext::rhsAdditiveExpression(size_t i) {
  return getRuleContext<SparqlQueryParser::RhsAdditiveExpressionContext>(i);
}


size_t SparqlQueryParser::AdditiveExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleAdditiveExpression;
}


std::any SparqlQueryParser::AdditiveExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitAdditiveExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::AdditiveExpressionContext* SparqlQueryParser::additiveExpression() {
  AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, getState());
  enterRule(_localctx, 194, SparqlQueryParser::RuleAdditiveExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(921);
    multiplicativeExpression();
    setState(925);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 201326655) != 0)) {
      setState(922);
      rhsAdditiveExpression();
      setState(927);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RhsAdditiveExpressionContext ------------------------------------------------------------------

SparqlQueryParser::RhsAdditiveExpressionContext::RhsAdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::RhsAdditiveExpressionSubContext* SparqlQueryParser::RhsAdditiveExpressionContext::rhsAdditiveExpressionSub() {
  return getRuleContext<SparqlQueryParser::RhsAdditiveExpressionSubContext>(0);
}

std::vector<SparqlQueryParser::UnaryExpressionContext *> SparqlQueryParser::RhsAdditiveExpressionContext::unaryExpression() {
  return getRuleContexts<SparqlQueryParser::UnaryExpressionContext>();
}

SparqlQueryParser::UnaryExpressionContext* SparqlQueryParser::RhsAdditiveExpressionContext::unaryExpression(size_t i) {
  return getRuleContext<SparqlQueryParser::UnaryExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::RhsAdditiveExpressionContext::ASTERISK() {
  return getTokens(SparqlQueryParser::ASTERISK);
}

tree::TerminalNode* SparqlQueryParser::RhsAdditiveExpressionContext::ASTERISK(size_t i) {
  return getToken(SparqlQueryParser::ASTERISK, i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::RhsAdditiveExpressionContext::DIVIDE() {
  return getTokens(SparqlQueryParser::DIVIDE);
}

tree::TerminalNode* SparqlQueryParser::RhsAdditiveExpressionContext::DIVIDE(size_t i) {
  return getToken(SparqlQueryParser::DIVIDE, i);
}


size_t SparqlQueryParser::RhsAdditiveExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleRhsAdditiveExpression;
}


std::any SparqlQueryParser::RhsAdditiveExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitRhsAdditiveExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::RhsAdditiveExpressionContext* SparqlQueryParser::rhsAdditiveExpression() {
  RhsAdditiveExpressionContext *_localctx = _tracker.createInstance<RhsAdditiveExpressionContext>(_ctx, getState());
  enterRule(_localctx, 196, SparqlQueryParser::RuleRhsAdditiveExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(928);
    rhsAdditiveExpressionSub();
    setState(933);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::ASTERISK

    || _la == SparqlQueryParser::DIVIDE) {
      setState(929);
      antlrcpp::downCast<RhsAdditiveExpressionContext *>(_localctx)->_tset1717 = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == SparqlQueryParser::ASTERISK

      || _la == SparqlQueryParser::DIVIDE)) {
        antlrcpp::downCast<RhsAdditiveExpressionContext *>(_localctx)->_tset1717 = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      antlrcpp::downCast<RhsAdditiveExpressionContext *>(_localctx)->op.push_back(antlrcpp::downCast<RhsAdditiveExpressionContext *>(_localctx)->_tset1717);
      setState(930);
      unaryExpression();
      setState(935);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RhsAdditiveExpressionSubContext ------------------------------------------------------------------

SparqlQueryParser::RhsAdditiveExpressionSubContext::RhsAdditiveExpressionSubContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::MultiplicativeExpressionContext* SparqlQueryParser::RhsAdditiveExpressionSubContext::multiplicativeExpression() {
  return getRuleContext<SparqlQueryParser::MultiplicativeExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::RhsAdditiveExpressionSubContext::PLUS_SIGN() {
  return getToken(SparqlQueryParser::PLUS_SIGN, 0);
}

tree::TerminalNode* SparqlQueryParser::RhsAdditiveExpressionSubContext::MINUS_SIGN() {
  return getToken(SparqlQueryParser::MINUS_SIGN, 0);
}

SparqlQueryParser::NumericLiteralPositiveContext* SparqlQueryParser::RhsAdditiveExpressionSubContext::numericLiteralPositive() {
  return getRuleContext<SparqlQueryParser::NumericLiteralPositiveContext>(0);
}

SparqlQueryParser::NumericLiteralNegativeContext* SparqlQueryParser::RhsAdditiveExpressionSubContext::numericLiteralNegative() {
  return getRuleContext<SparqlQueryParser::NumericLiteralNegativeContext>(0);
}


size_t SparqlQueryParser::RhsAdditiveExpressionSubContext::getRuleIndex() const {
  return SparqlQueryParser::RuleRhsAdditiveExpressionSub;
}


std::any SparqlQueryParser::RhsAdditiveExpressionSubContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitRhsAdditiveExpressionSub(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::RhsAdditiveExpressionSubContext* SparqlQueryParser::rhsAdditiveExpressionSub() {
  RhsAdditiveExpressionSubContext *_localctx = _tracker.createInstance<RhsAdditiveExpressionSubContext>(_ctx, getState());
  enterRule(_localctx, 198, SparqlQueryParser::RuleRhsAdditiveExpressionSub);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(940);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::PLUS_SIGN:
      case SparqlQueryParser::MINUS_SIGN: {
        enterOuterAlt(_localctx, 1);
        setState(936);
        _la = _input->LA(1);
        if (!(_la == SparqlQueryParser::PLUS_SIGN

        || _la == SparqlQueryParser::MINUS_SIGN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(937);
        multiplicativeExpression();
        break;
      }

      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE: {
        enterOuterAlt(_localctx, 2);
        setState(938);
        numericLiteralPositive();
        break;
      }

      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE: {
        enterOuterAlt(_localctx, 3);
        setState(939);
        numericLiteralNegative();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

SparqlQueryParser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::UnaryExpressionContext *> SparqlQueryParser::MultiplicativeExpressionContext::unaryExpression() {
  return getRuleContexts<SparqlQueryParser::UnaryExpressionContext>();
}

SparqlQueryParser::UnaryExpressionContext* SparqlQueryParser::MultiplicativeExpressionContext::unaryExpression(size_t i) {
  return getRuleContext<SparqlQueryParser::UnaryExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::MultiplicativeExpressionContext::ASTERISK() {
  return getTokens(SparqlQueryParser::ASTERISK);
}

tree::TerminalNode* SparqlQueryParser::MultiplicativeExpressionContext::ASTERISK(size_t i) {
  return getToken(SparqlQueryParser::ASTERISK, i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::MultiplicativeExpressionContext::DIVIDE() {
  return getTokens(SparqlQueryParser::DIVIDE);
}

tree::TerminalNode* SparqlQueryParser::MultiplicativeExpressionContext::DIVIDE(size_t i) {
  return getToken(SparqlQueryParser::DIVIDE, i);
}


size_t SparqlQueryParser::MultiplicativeExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleMultiplicativeExpression;
}


std::any SparqlQueryParser::MultiplicativeExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitMultiplicativeExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::MultiplicativeExpressionContext* SparqlQueryParser::multiplicativeExpression() {
  MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 200, SparqlQueryParser::RuleMultiplicativeExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(942);
    unaryExpression();
    setState(947);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(943);
        antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->_tset1760 = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == SparqlQueryParser::ASTERISK

        || _la == SparqlQueryParser::DIVIDE)) {
          antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->_tset1760 = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->op.push_back(antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->_tset1760);
        setState(944);
        unaryExpression(); 
      }
      setState(949);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

SparqlQueryParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PrimaryExpressionContext* SparqlQueryParser::UnaryExpressionContext::primaryExpression() {
  return getRuleContext<SparqlQueryParser::PrimaryExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::UnaryExpressionContext::NEGATION() {
  return getToken(SparqlQueryParser::NEGATION, 0);
}

tree::TerminalNode* SparqlQueryParser::UnaryExpressionContext::PLUS_SIGN() {
  return getToken(SparqlQueryParser::PLUS_SIGN, 0);
}

tree::TerminalNode* SparqlQueryParser::UnaryExpressionContext::MINUS_SIGN() {
  return getToken(SparqlQueryParser::MINUS_SIGN, 0);
}


size_t SparqlQueryParser::UnaryExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleUnaryExpression;
}


std::any SparqlQueryParser::UnaryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitUnaryExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::UnaryExpressionContext* SparqlQueryParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 202, SparqlQueryParser::RuleUnaryExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(951);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 144) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 144)) & 35) != 0)) {
      setState(950);
      antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 144) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 144)) & 35) != 0))) {
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(953);
    primaryExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

SparqlQueryParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PrimaryExpressionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::PrimaryExpressionContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PrimaryExpressionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

SparqlQueryParser::BuiltInCallContext* SparqlQueryParser::PrimaryExpressionContext::builtInCall() {
  return getRuleContext<SparqlQueryParser::BuiltInCallContext>(0);
}

SparqlQueryParser::IriOrFunctionContext* SparqlQueryParser::PrimaryExpressionContext::iriOrFunction() {
  return getRuleContext<SparqlQueryParser::IriOrFunctionContext>(0);
}

SparqlQueryParser::RdfLiteralContext* SparqlQueryParser::PrimaryExpressionContext::rdfLiteral() {
  return getRuleContext<SparqlQueryParser::RdfLiteralContext>(0);
}

SparqlQueryParser::NumericLiteralContext* SparqlQueryParser::PrimaryExpressionContext::numericLiteral() {
  return getRuleContext<SparqlQueryParser::NumericLiteralContext>(0);
}

SparqlQueryParser::BooleanLiteralContext* SparqlQueryParser::PrimaryExpressionContext::booleanLiteral() {
  return getRuleContext<SparqlQueryParser::BooleanLiteralContext>(0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::PrimaryExpressionContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}


size_t SparqlQueryParser::PrimaryExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RulePrimaryExpression;
}


std::any SparqlQueryParser::PrimaryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPrimaryExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PrimaryExpressionContext* SparqlQueryParser::primaryExpression() {
  PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 204, SparqlQueryParser::RulePrimaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(965);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(955);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(956);
        expression();
        setState(957);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STR:
      case SparqlQueryParser::LANG:
      case SparqlQueryParser::LANGMATCHES:
      case SparqlQueryParser::DATATYPE:
      case SparqlQueryParser::BOUND:
      case SparqlQueryParser::SAMETERM:
      case SparqlQueryParser::ISIRI:
      case SparqlQueryParser::ISURI:
      case SparqlQueryParser::ISBLANK:
      case SparqlQueryParser::ISLITERAL:
      case SparqlQueryParser::REGEX:
      case SparqlQueryParser::SUBSTR:
      case SparqlQueryParser::IRI:
      case SparqlQueryParser::URI:
      case SparqlQueryParser::BNODE:
      case SparqlQueryParser::RAND:
      case SparqlQueryParser::ABS:
      case SparqlQueryParser::CEIL:
      case SparqlQueryParser::FLOOR:
      case SparqlQueryParser::ROUND:
      case SparqlQueryParser::CONCAT:
      case SparqlQueryParser::STRLEN:
      case SparqlQueryParser::UCASE:
      case SparqlQueryParser::LCASE:
      case SparqlQueryParser::ENCODE_FOR_URI:
      case SparqlQueryParser::CONTAINS:
      case SparqlQueryParser::STRSTARTS:
      case SparqlQueryParser::STRENDS:
      case SparqlQueryParser::STRBEFORE:
      case SparqlQueryParser::STRAFTER:
      case SparqlQueryParser::REPLACE:
      case SparqlQueryParser::YEAR:
      case SparqlQueryParser::MONTH:
      case SparqlQueryParser::DAY:
      case SparqlQueryParser::HOURS:
      case SparqlQueryParser::MINUTES:
      case SparqlQueryParser::SECONDS:
      case SparqlQueryParser::TIMEZONE:
      case SparqlQueryParser::TZ:
      case SparqlQueryParser::NOW:
      case SparqlQueryParser::UUID:
      case SparqlQueryParser::STRUUID:
      case SparqlQueryParser::MD5:
      case SparqlQueryParser::SHA1:
      case SparqlQueryParser::SHA256:
      case SparqlQueryParser::SHA384:
      case SparqlQueryParser::SHA512:
      case SparqlQueryParser::COALESCE:
      case SparqlQueryParser::IF:
      case SparqlQueryParser::STRLANG:
      case SparqlQueryParser::STRDT:
      case SparqlQueryParser::ISNUMERIC:
      case SparqlQueryParser::COUNT:
      case SparqlQueryParser::SUM:
      case SparqlQueryParser::MIN:
      case SparqlQueryParser::MAX:
      case SparqlQueryParser::AVG:
      case SparqlQueryParser::SAMPLE:
      case SparqlQueryParser::GROUP_CONCAT:
      case SparqlQueryParser::NOT:
      case SparqlQueryParser::EXISTS: {
        enterOuterAlt(_localctx, 2);
        setState(959);
        builtInCall();
        break;
      }

      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 3);
        setState(960);
        iriOrFunction();
        break;
      }

      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2: {
        enterOuterAlt(_localctx, 4);
        setState(961);
        rdfLiteral();
        break;
      }

      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE: {
        enterOuterAlt(_localctx, 5);
        setState(962);
        numericLiteral();
        break;
      }

      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE: {
        enterOuterAlt(_localctx, 6);
        setState(963);
        booleanLiteral();
        break;
      }

      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 7);
        setState(964);
        var();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BuiltInCallContext ------------------------------------------------------------------

SparqlQueryParser::BuiltInCallContext::BuiltInCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::AggregateContext* SparqlQueryParser::BuiltInCallContext::aggregate() {
  return getRuleContext<SparqlQueryParser::AggregateContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STR() {
  return getToken(SparqlQueryParser::STR, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

std::vector<SparqlQueryParser::ExpressionContext *> SparqlQueryParser::BuiltInCallContext::expression() {
  return getRuleContexts<SparqlQueryParser::ExpressionContext>();
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::BuiltInCallContext::expression(size_t i) {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(i);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::LANG() {
  return getToken(SparqlQueryParser::LANG, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::LANGMATCHES() {
  return getToken(SparqlQueryParser::LANGMATCHES, 0);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::BuiltInCallContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::DATATYPE() {
  return getToken(SparqlQueryParser::DATATYPE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::BOUND() {
  return getToken(SparqlQueryParser::BOUND, 0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::BuiltInCallContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::IRI() {
  return getToken(SparqlQueryParser::IRI, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::URI() {
  return getToken(SparqlQueryParser::URI, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::BNODE() {
  return getToken(SparqlQueryParser::BNODE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::RAND() {
  return getToken(SparqlQueryParser::RAND, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ABS() {
  return getToken(SparqlQueryParser::ABS, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::CEIL() {
  return getToken(SparqlQueryParser::CEIL, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::FLOOR() {
  return getToken(SparqlQueryParser::FLOOR, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ROUND() {
  return getToken(SparqlQueryParser::ROUND, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::CONCAT() {
  return getToken(SparqlQueryParser::CONCAT, 0);
}

SparqlQueryParser::ExpressionListContext* SparqlQueryParser::BuiltInCallContext::expressionList() {
  return getRuleContext<SparqlQueryParser::ExpressionListContext>(0);
}

SparqlQueryParser::SubStringExpressionContext* SparqlQueryParser::BuiltInCallContext::subStringExpression() {
  return getRuleContext<SparqlQueryParser::SubStringExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRLEN() {
  return getToken(SparqlQueryParser::STRLEN, 0);
}

SparqlQueryParser::StrReplaceExpressionContext* SparqlQueryParser::BuiltInCallContext::strReplaceExpression() {
  return getRuleContext<SparqlQueryParser::StrReplaceExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::UCASE() {
  return getToken(SparqlQueryParser::UCASE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::LCASE() {
  return getToken(SparqlQueryParser::LCASE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ENCODE_FOR_URI() {
  return getToken(SparqlQueryParser::ENCODE_FOR_URI, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::CONTAINS() {
  return getToken(SparqlQueryParser::CONTAINS, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRSTARTS() {
  return getToken(SparqlQueryParser::STRSTARTS, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRENDS() {
  return getToken(SparqlQueryParser::STRENDS, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRBEFORE() {
  return getToken(SparqlQueryParser::STRBEFORE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRAFTER() {
  return getToken(SparqlQueryParser::STRAFTER, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::YEAR() {
  return getToken(SparqlQueryParser::YEAR, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::MONTH() {
  return getToken(SparqlQueryParser::MONTH, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::DAY() {
  return getToken(SparqlQueryParser::DAY, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::HOURS() {
  return getToken(SparqlQueryParser::HOURS, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::MINUTES() {
  return getToken(SparqlQueryParser::MINUTES, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::SECONDS() {
  return getToken(SparqlQueryParser::SECONDS, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::TIMEZONE() {
  return getToken(SparqlQueryParser::TIMEZONE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::TZ() {
  return getToken(SparqlQueryParser::TZ, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::NOW() {
  return getToken(SparqlQueryParser::NOW, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::UUID() {
  return getToken(SparqlQueryParser::UUID, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRUUID() {
  return getToken(SparqlQueryParser::STRUUID, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::MD5() {
  return getToken(SparqlQueryParser::MD5, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::SHA1() {
  return getToken(SparqlQueryParser::SHA1, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::SHA256() {
  return getToken(SparqlQueryParser::SHA256, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::SHA384() {
  return getToken(SparqlQueryParser::SHA384, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::SHA512() {
  return getToken(SparqlQueryParser::SHA512, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::COALESCE() {
  return getToken(SparqlQueryParser::COALESCE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::IF() {
  return getToken(SparqlQueryParser::IF, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRLANG() {
  return getToken(SparqlQueryParser::STRLANG, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRDT() {
  return getToken(SparqlQueryParser::STRDT, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::SAMETERM() {
  return getToken(SparqlQueryParser::SAMETERM, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ISIRI() {
  return getToken(SparqlQueryParser::ISIRI, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ISURI() {
  return getToken(SparqlQueryParser::ISURI, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ISBLANK() {
  return getToken(SparqlQueryParser::ISBLANK, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ISLITERAL() {
  return getToken(SparqlQueryParser::ISLITERAL, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ISNUMERIC() {
  return getToken(SparqlQueryParser::ISNUMERIC, 0);
}

SparqlQueryParser::RegexExpressionContext* SparqlQueryParser::BuiltInCallContext::regexExpression() {
  return getRuleContext<SparqlQueryParser::RegexExpressionContext>(0);
}

SparqlQueryParser::ExistsFunctionContext* SparqlQueryParser::BuiltInCallContext::existsFunction() {
  return getRuleContext<SparqlQueryParser::ExistsFunctionContext>(0);
}

SparqlQueryParser::NotExistsFunctionContext* SparqlQueryParser::BuiltInCallContext::notExistsFunction() {
  return getRuleContext<SparqlQueryParser::NotExistsFunctionContext>(0);
}


size_t SparqlQueryParser::BuiltInCallContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBuiltInCall;
}


std::any SparqlQueryParser::BuiltInCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBuiltInCall(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BuiltInCallContext* SparqlQueryParser::builtInCall() {
  BuiltInCallContext *_localctx = _tracker.createInstance<BuiltInCallContext>(_ctx, getState());
  enterRule(_localctx, 206, SparqlQueryParser::RuleBuiltInCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1235);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::COUNT:
      case SparqlQueryParser::SUM:
      case SparqlQueryParser::MIN:
      case SparqlQueryParser::MAX:
      case SparqlQueryParser::AVG:
      case SparqlQueryParser::SAMPLE:
      case SparqlQueryParser::GROUP_CONCAT: {
        enterOuterAlt(_localctx, 1);
        setState(967);
        aggregate();
        break;
      }

      case SparqlQueryParser::STR: {
        enterOuterAlt(_localctx, 2);
        setState(968);
        match(SparqlQueryParser::STR);
        setState(969);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(970);
        expression();
        setState(971);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::LANG: {
        enterOuterAlt(_localctx, 3);
        setState(973);
        match(SparqlQueryParser::LANG);
        setState(974);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(975);
        expression();
        setState(976);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::LANGMATCHES: {
        enterOuterAlt(_localctx, 4);
        setState(978);
        match(SparqlQueryParser::LANGMATCHES);
        setState(979);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(980);
        expression();
        setState(981);
        match(SparqlQueryParser::COMMA);
        setState(982);
        expression();
        setState(983);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::DATATYPE: {
        enterOuterAlt(_localctx, 5);
        setState(985);
        match(SparqlQueryParser::DATATYPE);
        setState(986);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(987);
        expression();
        setState(988);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::BOUND: {
        enterOuterAlt(_localctx, 6);
        setState(990);
        match(SparqlQueryParser::BOUND);
        setState(991);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(992);
        var();
        setState(993);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::IRI: {
        enterOuterAlt(_localctx, 7);
        setState(995);
        match(SparqlQueryParser::IRI);
        setState(996);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(997);
        expression();
        setState(998);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::URI: {
        enterOuterAlt(_localctx, 8);
        setState(1000);
        match(SparqlQueryParser::URI);
        setState(1001);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1002);
        expression();
        setState(1003);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::BNODE: {
        enterOuterAlt(_localctx, 9);
        setState(1005);
        match(SparqlQueryParser::BNODE);
        setState(1006);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1008);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 25) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 25)) & -16760833) != 0) || ((((_la - 89) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 89)) & 1261149182869635839) != 0)) {
          setState(1007);
          expression();
        }
        setState(1010);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::RAND: {
        enterOuterAlt(_localctx, 10);
        setState(1011);
        match(SparqlQueryParser::RAND);
        setState(1012);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1013);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ABS: {
        enterOuterAlt(_localctx, 11);
        setState(1014);
        match(SparqlQueryParser::ABS);
        setState(1015);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1016);
        expression();
        setState(1017);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::CEIL: {
        enterOuterAlt(_localctx, 12);
        setState(1019);
        match(SparqlQueryParser::CEIL);
        setState(1020);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1021);
        expression();
        setState(1022);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::FLOOR: {
        enterOuterAlt(_localctx, 13);
        setState(1024);
        match(SparqlQueryParser::FLOOR);
        setState(1025);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1026);
        expression();
        setState(1027);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ROUND: {
        enterOuterAlt(_localctx, 14);
        setState(1029);
        match(SparqlQueryParser::ROUND);
        setState(1030);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1031);
        expression();
        setState(1032);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::CONCAT: {
        enterOuterAlt(_localctx, 15);
        setState(1034);
        match(SparqlQueryParser::CONCAT);
        setState(1035);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1037);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 25) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 25)) & -16760833) != 0) || ((((_la - 89) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 89)) & 1261149182869635839) != 0)) {
          setState(1036);
          expressionList();
        }
        setState(1039);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SUBSTR: {
        enterOuterAlt(_localctx, 16);
        setState(1040);
        subStringExpression();
        break;
      }

      case SparqlQueryParser::STRLEN: {
        enterOuterAlt(_localctx, 17);
        setState(1041);
        match(SparqlQueryParser::STRLEN);
        setState(1042);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1043);
        expression();
        setState(1044);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::REPLACE: {
        enterOuterAlt(_localctx, 18);
        setState(1046);
        strReplaceExpression();
        break;
      }

      case SparqlQueryParser::UCASE: {
        enterOuterAlt(_localctx, 19);
        setState(1047);
        match(SparqlQueryParser::UCASE);
        setState(1048);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1049);
        expression();
        setState(1050);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::LCASE: {
        enterOuterAlt(_localctx, 20);
        setState(1052);
        match(SparqlQueryParser::LCASE);
        setState(1053);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1054);
        expression();
        setState(1055);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ENCODE_FOR_URI: {
        enterOuterAlt(_localctx, 21);
        setState(1057);
        match(SparqlQueryParser::ENCODE_FOR_URI);
        setState(1058);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1059);
        expression();
        setState(1060);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::CONTAINS: {
        enterOuterAlt(_localctx, 22);
        setState(1062);
        match(SparqlQueryParser::CONTAINS);
        setState(1063);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1064);
        expression();
        setState(1065);
        match(SparqlQueryParser::COMMA);
        setState(1066);
        expression();
        setState(1067);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRSTARTS: {
        enterOuterAlt(_localctx, 23);
        setState(1069);
        match(SparqlQueryParser::STRSTARTS);
        setState(1070);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1071);
        expression();
        setState(1072);
        match(SparqlQueryParser::COMMA);
        setState(1073);
        expression();
        setState(1074);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRENDS: {
        enterOuterAlt(_localctx, 24);
        setState(1076);
        match(SparqlQueryParser::STRENDS);
        setState(1077);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1078);
        expression();
        setState(1079);
        match(SparqlQueryParser::COMMA);
        setState(1080);
        expression();
        setState(1081);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRBEFORE: {
        enterOuterAlt(_localctx, 25);
        setState(1083);
        match(SparqlQueryParser::STRBEFORE);
        setState(1084);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1085);
        expression();
        setState(1086);
        match(SparqlQueryParser::COMMA);
        setState(1087);
        expression();
        setState(1088);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRAFTER: {
        enterOuterAlt(_localctx, 26);
        setState(1090);
        match(SparqlQueryParser::STRAFTER);
        setState(1091);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1092);
        expression();
        setState(1093);
        match(SparqlQueryParser::COMMA);
        setState(1094);
        expression();
        setState(1095);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::YEAR: {
        enterOuterAlt(_localctx, 27);
        setState(1097);
        match(SparqlQueryParser::YEAR);
        setState(1098);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1099);
        expression();
        setState(1100);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::MONTH: {
        enterOuterAlt(_localctx, 28);
        setState(1102);
        match(SparqlQueryParser::MONTH);
        setState(1103);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1104);
        expression();
        setState(1105);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::DAY: {
        enterOuterAlt(_localctx, 29);
        setState(1107);
        match(SparqlQueryParser::DAY);
        setState(1108);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1109);
        expression();
        setState(1110);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::HOURS: {
        enterOuterAlt(_localctx, 30);
        setState(1112);
        match(SparqlQueryParser::HOURS);
        setState(1113);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1114);
        expression();
        setState(1115);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::MINUTES: {
        enterOuterAlt(_localctx, 31);
        setState(1117);
        match(SparqlQueryParser::MINUTES);
        setState(1118);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1119);
        expression();
        setState(1120);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SECONDS: {
        enterOuterAlt(_localctx, 32);
        setState(1122);
        match(SparqlQueryParser::SECONDS);
        setState(1123);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1124);
        expression();
        setState(1125);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::TIMEZONE: {
        enterOuterAlt(_localctx, 33);
        setState(1127);
        match(SparqlQueryParser::TIMEZONE);
        setState(1128);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1129);
        expression();
        setState(1130);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::TZ: {
        enterOuterAlt(_localctx, 34);
        setState(1132);
        match(SparqlQueryParser::TZ);
        setState(1133);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1134);
        expression();
        setState(1135);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::NOW: {
        enterOuterAlt(_localctx, 35);
        setState(1137);
        match(SparqlQueryParser::NOW);
        setState(1138);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1139);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::UUID: {
        enterOuterAlt(_localctx, 36);
        setState(1140);
        match(SparqlQueryParser::UUID);
        setState(1141);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1142);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRUUID: {
        enterOuterAlt(_localctx, 37);
        setState(1143);
        match(SparqlQueryParser::STRUUID);
        setState(1144);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1145);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::MD5: {
        enterOuterAlt(_localctx, 38);
        setState(1146);
        match(SparqlQueryParser::MD5);
        setState(1147);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1148);
        expression();
        setState(1149);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SHA1: {
        enterOuterAlt(_localctx, 39);
        setState(1151);
        match(SparqlQueryParser::SHA1);
        setState(1152);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1153);
        expression();
        setState(1154);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SHA256: {
        enterOuterAlt(_localctx, 40);
        setState(1156);
        match(SparqlQueryParser::SHA256);
        setState(1157);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1158);
        expression();
        setState(1159);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SHA384: {
        enterOuterAlt(_localctx, 41);
        setState(1161);
        match(SparqlQueryParser::SHA384);
        setState(1162);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1163);
        expression();
        setState(1164);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SHA512: {
        enterOuterAlt(_localctx, 42);
        setState(1166);
        match(SparqlQueryParser::SHA512);
        setState(1167);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1168);
        expression();
        setState(1169);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::COALESCE: {
        enterOuterAlt(_localctx, 43);
        setState(1171);
        match(SparqlQueryParser::COALESCE);
        setState(1172);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1174);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 25) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 25)) & -16760833) != 0) || ((((_la - 89) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 89)) & 1261149182869635839) != 0)) {
          setState(1173);
          expressionList();
        }
        setState(1176);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::IF: {
        enterOuterAlt(_localctx, 44);
        setState(1177);
        match(SparqlQueryParser::IF);
        setState(1178);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1179);
        expression();
        setState(1180);
        match(SparqlQueryParser::COMMA);
        setState(1181);
        expression();
        setState(1182);
        match(SparqlQueryParser::COMMA);
        setState(1183);
        expression();
        setState(1184);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRLANG: {
        enterOuterAlt(_localctx, 45);
        setState(1186);
        match(SparqlQueryParser::STRLANG);
        setState(1187);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1188);
        expression();
        setState(1189);
        match(SparqlQueryParser::COMMA);
        setState(1190);
        expression();
        setState(1191);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRDT: {
        enterOuterAlt(_localctx, 46);
        setState(1193);
        match(SparqlQueryParser::STRDT);
        setState(1194);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1195);
        expression();
        setState(1196);
        match(SparqlQueryParser::COMMA);
        setState(1197);
        expression();
        setState(1198);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SAMETERM: {
        enterOuterAlt(_localctx, 47);
        setState(1200);
        match(SparqlQueryParser::SAMETERM);
        setState(1201);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1202);
        expression();
        setState(1203);
        match(SparqlQueryParser::COMMA);
        setState(1204);
        expression();
        setState(1205);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ISIRI: {
        enterOuterAlt(_localctx, 48);
        setState(1207);
        match(SparqlQueryParser::ISIRI);
        setState(1208);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1209);
        expression();
        setState(1210);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ISURI: {
        enterOuterAlt(_localctx, 49);
        setState(1212);
        match(SparqlQueryParser::ISURI);
        setState(1213);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1214);
        expression();
        setState(1215);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ISBLANK: {
        enterOuterAlt(_localctx, 50);
        setState(1217);
        match(SparqlQueryParser::ISBLANK);
        setState(1218);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1219);
        expression();
        setState(1220);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ISLITERAL: {
        enterOuterAlt(_localctx, 51);
        setState(1222);
        match(SparqlQueryParser::ISLITERAL);
        setState(1223);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1224);
        expression();
        setState(1225);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ISNUMERIC: {
        enterOuterAlt(_localctx, 52);
        setState(1227);
        match(SparqlQueryParser::ISNUMERIC);
        setState(1228);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1229);
        expression();
        setState(1230);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::REGEX: {
        enterOuterAlt(_localctx, 53);
        setState(1232);
        regexExpression();
        break;
      }

      case SparqlQueryParser::EXISTS: {
        enterOuterAlt(_localctx, 54);
        setState(1233);
        existsFunction();
        break;
      }

      case SparqlQueryParser::NOT: {
        enterOuterAlt(_localctx, 55);
        setState(1234);
        notExistsFunction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RegexExpressionContext ------------------------------------------------------------------

SparqlQueryParser::RegexExpressionContext::RegexExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::RegexExpressionContext::REGEX() {
  return getToken(SparqlQueryParser::REGEX, 0);
}

tree::TerminalNode* SparqlQueryParser::RegexExpressionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

std::vector<SparqlQueryParser::ExpressionContext *> SparqlQueryParser::RegexExpressionContext::expression() {
  return getRuleContexts<SparqlQueryParser::ExpressionContext>();
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::RegexExpressionContext::expression(size_t i) {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::RegexExpressionContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::RegexExpressionContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}

tree::TerminalNode* SparqlQueryParser::RegexExpressionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}


size_t SparqlQueryParser::RegexExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleRegexExpression;
}


std::any SparqlQueryParser::RegexExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitRegexExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::RegexExpressionContext* SparqlQueryParser::regexExpression() {
  RegexExpressionContext *_localctx = _tracker.createInstance<RegexExpressionContext>(_ctx, getState());
  enterRule(_localctx, 208, SparqlQueryParser::RuleRegexExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1237);
    match(SparqlQueryParser::REGEX);
    setState(1238);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(1239);
    expression();
    setState(1240);
    match(SparqlQueryParser::COMMA);
    setState(1241);
    expression();
    setState(1244);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::COMMA) {
      setState(1242);
      match(SparqlQueryParser::COMMA);
      setState(1243);
      expression();
    }
    setState(1246);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubStringExpressionContext ------------------------------------------------------------------

SparqlQueryParser::SubStringExpressionContext::SubStringExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::SubStringExpressionContext::SUBSTR() {
  return getToken(SparqlQueryParser::SUBSTR, 0);
}

tree::TerminalNode* SparqlQueryParser::SubStringExpressionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

std::vector<SparqlQueryParser::ExpressionContext *> SparqlQueryParser::SubStringExpressionContext::expression() {
  return getRuleContexts<SparqlQueryParser::ExpressionContext>();
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::SubStringExpressionContext::expression(size_t i) {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::SubStringExpressionContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::SubStringExpressionContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}

tree::TerminalNode* SparqlQueryParser::SubStringExpressionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}


size_t SparqlQueryParser::SubStringExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSubStringExpression;
}


std::any SparqlQueryParser::SubStringExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSubStringExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::SubStringExpressionContext* SparqlQueryParser::subStringExpression() {
  SubStringExpressionContext *_localctx = _tracker.createInstance<SubStringExpressionContext>(_ctx, getState());
  enterRule(_localctx, 210, SparqlQueryParser::RuleSubStringExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1248);
    match(SparqlQueryParser::SUBSTR);
    setState(1249);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(1250);
    expression();
    setState(1251);
    match(SparqlQueryParser::COMMA);
    setState(1252);
    expression();
    setState(1255);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::COMMA) {
      setState(1253);
      match(SparqlQueryParser::COMMA);
      setState(1254);
      expression();
    }
    setState(1257);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrReplaceExpressionContext ------------------------------------------------------------------

SparqlQueryParser::StrReplaceExpressionContext::StrReplaceExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::StrReplaceExpressionContext::REPLACE() {
  return getToken(SparqlQueryParser::REPLACE, 0);
}

tree::TerminalNode* SparqlQueryParser::StrReplaceExpressionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

std::vector<SparqlQueryParser::ExpressionContext *> SparqlQueryParser::StrReplaceExpressionContext::expression() {
  return getRuleContexts<SparqlQueryParser::ExpressionContext>();
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::StrReplaceExpressionContext::expression(size_t i) {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::StrReplaceExpressionContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::StrReplaceExpressionContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}

tree::TerminalNode* SparqlQueryParser::StrReplaceExpressionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}


size_t SparqlQueryParser::StrReplaceExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleStrReplaceExpression;
}


std::any SparqlQueryParser::StrReplaceExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitStrReplaceExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::StrReplaceExpressionContext* SparqlQueryParser::strReplaceExpression() {
  StrReplaceExpressionContext *_localctx = _tracker.createInstance<StrReplaceExpressionContext>(_ctx, getState());
  enterRule(_localctx, 212, SparqlQueryParser::RuleStrReplaceExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1259);
    match(SparqlQueryParser::REPLACE);
    setState(1260);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(1261);
    expression();
    setState(1262);
    match(SparqlQueryParser::COMMA);
    setState(1263);
    expression();
    setState(1264);
    match(SparqlQueryParser::COMMA);
    setState(1265);
    expression();
    setState(1268);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::COMMA) {
      setState(1266);
      match(SparqlQueryParser::COMMA);
      setState(1267);
      expression();
    }
    setState(1270);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExistsFunctionContext ------------------------------------------------------------------

SparqlQueryParser::ExistsFunctionContext::ExistsFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ExistsFunctionContext::EXISTS() {
  return getToken(SparqlQueryParser::EXISTS, 0);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::ExistsFunctionContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}


size_t SparqlQueryParser::ExistsFunctionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleExistsFunction;
}


std::any SparqlQueryParser::ExistsFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitExistsFunction(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ExistsFunctionContext* SparqlQueryParser::existsFunction() {
  ExistsFunctionContext *_localctx = _tracker.createInstance<ExistsFunctionContext>(_ctx, getState());
  enterRule(_localctx, 214, SparqlQueryParser::RuleExistsFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1272);
    match(SparqlQueryParser::EXISTS);
    setState(1273);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NotExistsFunctionContext ------------------------------------------------------------------

SparqlQueryParser::NotExistsFunctionContext::NotExistsFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::NotExistsFunctionContext::NOT() {
  return getToken(SparqlQueryParser::NOT, 0);
}

tree::TerminalNode* SparqlQueryParser::NotExistsFunctionContext::EXISTS() {
  return getToken(SparqlQueryParser::EXISTS, 0);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::NotExistsFunctionContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}


size_t SparqlQueryParser::NotExistsFunctionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleNotExistsFunction;
}


std::any SparqlQueryParser::NotExistsFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitNotExistsFunction(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::NotExistsFunctionContext* SparqlQueryParser::notExistsFunction() {
  NotExistsFunctionContext *_localctx = _tracker.createInstance<NotExistsFunctionContext>(_ctx, getState());
  enterRule(_localctx, 216, SparqlQueryParser::RuleNotExistsFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1275);
    match(SparqlQueryParser::NOT);
    setState(1276);
    match(SparqlQueryParser::EXISTS);
    setState(1277);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AggregateContext ------------------------------------------------------------------

SparqlQueryParser::AggregateContext::AggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::COUNT() {
  return getToken(SparqlQueryParser::COUNT, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::ASTERISK() {
  return getToken(SparqlQueryParser::ASTERISK, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::AggregateContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::DISTINCT() {
  return getToken(SparqlQueryParser::DISTINCT, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::SUM() {
  return getToken(SparqlQueryParser::SUM, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::MIN() {
  return getToken(SparqlQueryParser::MIN, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::MAX() {
  return getToken(SparqlQueryParser::MAX, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::AVG() {
  return getToken(SparqlQueryParser::AVG, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::SAMPLE() {
  return getToken(SparqlQueryParser::SAMPLE, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::GROUP_CONCAT() {
  return getToken(SparqlQueryParser::GROUP_CONCAT, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::SEMICOLON() {
  return getToken(SparqlQueryParser::SEMICOLON, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::SEPARATOR() {
  return getToken(SparqlQueryParser::SEPARATOR, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::EQUAL() {
  return getToken(SparqlQueryParser::EQUAL, 0);
}

SparqlQueryParser::StringContext* SparqlQueryParser::AggregateContext::string() {
  return getRuleContext<SparqlQueryParser::StringContext>(0);
}


size_t SparqlQueryParser::AggregateContext::getRuleIndex() const {
  return SparqlQueryParser::RuleAggregate;
}


std::any SparqlQueryParser::AggregateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitAggregate(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::AggregateContext* SparqlQueryParser::aggregate() {
  AggregateContext *_localctx = _tracker.createInstance<AggregateContext>(_ctx, getState());
  enterRule(_localctx, 218, SparqlQueryParser::RuleAggregate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1343);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::COUNT: {
        enterOuterAlt(_localctx, 1);
        setState(1279);
        match(SparqlQueryParser::COUNT);
        setState(1280);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1282);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1281);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1286);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case SparqlQueryParser::ASTERISK: {
            setState(1284);
            match(SparqlQueryParser::ASTERISK);
            break;
          }

          case SparqlQueryParser::STR:
          case SparqlQueryParser::LANG:
          case SparqlQueryParser::LANGMATCHES:
          case SparqlQueryParser::DATATYPE:
          case SparqlQueryParser::BOUND:
          case SparqlQueryParser::SAMETERM:
          case SparqlQueryParser::ISIRI:
          case SparqlQueryParser::ISURI:
          case SparqlQueryParser::ISBLANK:
          case SparqlQueryParser::ISLITERAL:
          case SparqlQueryParser::REGEX:
          case SparqlQueryParser::SUBSTR:
          case SparqlQueryParser::TRUE:
          case SparqlQueryParser::FALSE:
          case SparqlQueryParser::IRI:
          case SparqlQueryParser::URI:
          case SparqlQueryParser::BNODE:
          case SparqlQueryParser::RAND:
          case SparqlQueryParser::ABS:
          case SparqlQueryParser::CEIL:
          case SparqlQueryParser::FLOOR:
          case SparqlQueryParser::ROUND:
          case SparqlQueryParser::CONCAT:
          case SparqlQueryParser::STRLEN:
          case SparqlQueryParser::UCASE:
          case SparqlQueryParser::LCASE:
          case SparqlQueryParser::ENCODE_FOR_URI:
          case SparqlQueryParser::CONTAINS:
          case SparqlQueryParser::STRSTARTS:
          case SparqlQueryParser::STRENDS:
          case SparqlQueryParser::STRBEFORE:
          case SparqlQueryParser::STRAFTER:
          case SparqlQueryParser::REPLACE:
          case SparqlQueryParser::YEAR:
          case SparqlQueryParser::MONTH:
          case SparqlQueryParser::DAY:
          case SparqlQueryParser::HOURS:
          case SparqlQueryParser::MINUTES:
          case SparqlQueryParser::SECONDS:
          case SparqlQueryParser::TIMEZONE:
          case SparqlQueryParser::TZ:
          case SparqlQueryParser::NOW:
          case SparqlQueryParser::UUID:
          case SparqlQueryParser::STRUUID:
          case SparqlQueryParser::MD5:
          case SparqlQueryParser::SHA1:
          case SparqlQueryParser::SHA256:
          case SparqlQueryParser::SHA384:
          case SparqlQueryParser::SHA512:
          case SparqlQueryParser::COALESCE:
          case SparqlQueryParser::IF:
          case SparqlQueryParser::STRLANG:
          case SparqlQueryParser::STRDT:
          case SparqlQueryParser::ISNUMERIC:
          case SparqlQueryParser::COUNT:
          case SparqlQueryParser::SUM:
          case SparqlQueryParser::MIN:
          case SparqlQueryParser::MAX:
          case SparqlQueryParser::AVG:
          case SparqlQueryParser::SAMPLE:
          case SparqlQueryParser::GROUP_CONCAT:
          case SparqlQueryParser::NOT:
          case SparqlQueryParser::EXISTS:
          case SparqlQueryParser::IRIREF:
          case SparqlQueryParser::PNAME_NS:
          case SparqlQueryParser::PNAME_LN:
          case SparqlQueryParser::VAR1:
          case SparqlQueryParser::VAR2:
          case SparqlQueryParser::INTEGER:
          case SparqlQueryParser::DECIMAL:
          case SparqlQueryParser::DOUBLE:
          case SparqlQueryParser::INTEGER_POSITIVE:
          case SparqlQueryParser::DECIMAL_POSITIVE:
          case SparqlQueryParser::DOUBLE_POSITIVE:
          case SparqlQueryParser::INTEGER_NEGATIVE:
          case SparqlQueryParser::DECIMAL_NEGATIVE:
          case SparqlQueryParser::DOUBLE_NEGATIVE:
          case SparqlQueryParser::STRING_LITERAL1:
          case SparqlQueryParser::STRING_LITERAL2:
          case SparqlQueryParser::STRING_LITERAL_LONG1:
          case SparqlQueryParser::STRING_LITERAL_LONG2:
          case SparqlQueryParser::OPEN_BRACE:
          case SparqlQueryParser::PLUS_SIGN:
          case SparqlQueryParser::MINUS_SIGN:
          case SparqlQueryParser::NEGATION: {
            setState(1285);
            expression();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1288);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SUM: {
        enterOuterAlt(_localctx, 2);
        setState(1289);
        match(SparqlQueryParser::SUM);
        setState(1290);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1292);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1291);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1294);
        expression();
        setState(1295);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::MIN: {
        enterOuterAlt(_localctx, 3);
        setState(1297);
        match(SparqlQueryParser::MIN);
        setState(1298);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1300);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1299);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1302);
        expression();
        setState(1303);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::MAX: {
        enterOuterAlt(_localctx, 4);
        setState(1305);
        match(SparqlQueryParser::MAX);
        setState(1306);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1308);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1307);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1310);
        expression();
        setState(1311);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::AVG: {
        enterOuterAlt(_localctx, 5);
        setState(1313);
        match(SparqlQueryParser::AVG);
        setState(1314);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1316);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1315);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1318);
        expression();
        setState(1319);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SAMPLE: {
        enterOuterAlt(_localctx, 6);
        setState(1321);
        match(SparqlQueryParser::SAMPLE);
        setState(1322);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1324);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1323);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1326);
        expression();
        setState(1327);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::GROUP_CONCAT: {
        enterOuterAlt(_localctx, 7);
        setState(1329);
        match(SparqlQueryParser::GROUP_CONCAT);
        setState(1330);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1332);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1331);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1334);
        expression();
        setState(1339);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::SEMICOLON) {
          setState(1335);
          match(SparqlQueryParser::SEMICOLON);
          setState(1336);
          match(SparqlQueryParser::SEPARATOR);
          setState(1337);
          match(SparqlQueryParser::EQUAL);
          setState(1338);
          string();
        }
        setState(1341);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IriOrFunctionContext ------------------------------------------------------------------

SparqlQueryParser::IriOrFunctionContext::IriOrFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::IriContext* SparqlQueryParser::IriOrFunctionContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

SparqlQueryParser::ArgListContext* SparqlQueryParser::IriOrFunctionContext::argList() {
  return getRuleContext<SparqlQueryParser::ArgListContext>(0);
}


size_t SparqlQueryParser::IriOrFunctionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleIriOrFunction;
}


std::any SparqlQueryParser::IriOrFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitIriOrFunction(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::IriOrFunctionContext* SparqlQueryParser::iriOrFunction() {
  IriOrFunctionContext *_localctx = _tracker.createInstance<IriOrFunctionContext>(_ctx, getState());
  enterRule(_localctx, 220, SparqlQueryParser::RuleIriOrFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1345);
    iri();
    setState(1347);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::OPEN_BRACE) {
      setState(1346);
      argList();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RdfLiteralContext ------------------------------------------------------------------

SparqlQueryParser::RdfLiteralContext::RdfLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::StringContext* SparqlQueryParser::RdfLiteralContext::string() {
  return getRuleContext<SparqlQueryParser::StringContext>(0);
}

tree::TerminalNode* SparqlQueryParser::RdfLiteralContext::LANGTAG() {
  return getToken(SparqlQueryParser::LANGTAG, 0);
}

tree::TerminalNode* SparqlQueryParser::RdfLiteralContext::REFERENCE() {
  return getToken(SparqlQueryParser::REFERENCE, 0);
}

SparqlQueryParser::IriContext* SparqlQueryParser::RdfLiteralContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}


size_t SparqlQueryParser::RdfLiteralContext::getRuleIndex() const {
  return SparqlQueryParser::RuleRdfLiteral;
}


std::any SparqlQueryParser::RdfLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitRdfLiteral(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::RdfLiteralContext* SparqlQueryParser::rdfLiteral() {
  RdfLiteralContext *_localctx = _tracker.createInstance<RdfLiteralContext>(_ctx, getState());
  enterRule(_localctx, 222, SparqlQueryParser::RuleRdfLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1349);
    string();
    setState(1353);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::LANGTAG: {
        setState(1350);
        match(SparqlQueryParser::LANGTAG);
        break;
      }

      case SparqlQueryParser::REFERENCE: {
        setState(1351);
        match(SparqlQueryParser::REFERENCE);
        setState(1352);
        iri();
        break;
      }

      case SparqlQueryParser::VALUES:
      case SparqlQueryParser::OPTIONAL:
      case SparqlQueryParser::GRAPH:
      case SparqlQueryParser::FILTER:
      case SparqlQueryParser::A:
      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE:
      case SparqlQueryParser::ALL:
      case SparqlQueryParser::AS:
      case SparqlQueryParser::UNDEF:
      case SparqlQueryParser::SERVICE:
      case SparqlQueryParser::BIND:
      case SparqlQueryParser::MINUS:
      case SparqlQueryParser::NOT:
      case SparqlQueryParser::IN:
      case SparqlQueryParser::ANY:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::BLANK_NODE_LABEL:
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2:
      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE:
      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2:
      case SparqlQueryParser::LESS_EQUAL:
      case SparqlQueryParser::GREATER_EQUAL:
      case SparqlQueryParser::NOT_EQUAL:
      case SparqlQueryParser::AND:
      case SparqlQueryParser::OR:
      case SparqlQueryParser::INVERSE:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::CLOSE_BRACE:
      case SparqlQueryParser::OPEN_CURLY_BRACE:
      case SparqlQueryParser::CLOSE_CURLY_BRACE:
      case SparqlQueryParser::OPEN_SQUARE_BRACKET:
      case SparqlQueryParser::CLOSE_SQUARE_BRACKET:
      case SparqlQueryParser::SEMICOLON:
      case SparqlQueryParser::DOT:
      case SparqlQueryParser::PLUS_SIGN:
      case SparqlQueryParser::MINUS_SIGN:
      case SparqlQueryParser::ASTERISK:
      case SparqlQueryParser::COMMA:
      case SparqlQueryParser::NEGATION:
      case SparqlQueryParser::DIVIDE:
      case SparqlQueryParser::EQUAL:
      case SparqlQueryParser::LESS:
      case SparqlQueryParser::GREATER: {
        break;
      }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralContext ------------------------------------------------------------------

SparqlQueryParser::NumericLiteralContext::NumericLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::NumericLiteralUnsignedContext* SparqlQueryParser::NumericLiteralContext::numericLiteralUnsigned() {
  return getRuleContext<SparqlQueryParser::NumericLiteralUnsignedContext>(0);
}

SparqlQueryParser::NumericLiteralPositiveContext* SparqlQueryParser::NumericLiteralContext::numericLiteralPositive() {
  return getRuleContext<SparqlQueryParser::NumericLiteralPositiveContext>(0);
}

SparqlQueryParser::NumericLiteralNegativeContext* SparqlQueryParser::NumericLiteralContext::numericLiteralNegative() {
  return getRuleContext<SparqlQueryParser::NumericLiteralNegativeContext>(0);
}


size_t SparqlQueryParser::NumericLiteralContext::getRuleIndex() const {
  return SparqlQueryParser::RuleNumericLiteral;
}


std::any SparqlQueryParser::NumericLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitNumericLiteral(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::NumericLiteralContext* SparqlQueryParser::numericLiteral() {
  NumericLiteralContext *_localctx = _tracker.createInstance<NumericLiteralContext>(_ctx, getState());
  enterRule(_localctx, 224, SparqlQueryParser::RuleNumericLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1358);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE: {
        enterOuterAlt(_localctx, 1);
        setState(1355);
        numericLiteralUnsigned();
        break;
      }

      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE: {
        enterOuterAlt(_localctx, 2);
        setState(1356);
        numericLiteralPositive();
        break;
      }

      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE: {
        enterOuterAlt(_localctx, 3);
        setState(1357);
        numericLiteralNegative();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralUnsignedContext ------------------------------------------------------------------

SparqlQueryParser::NumericLiteralUnsignedContext::NumericLiteralUnsignedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralUnsignedContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralUnsignedContext::DECIMAL() {
  return getToken(SparqlQueryParser::DECIMAL, 0);
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralUnsignedContext::DOUBLE() {
  return getToken(SparqlQueryParser::DOUBLE, 0);
}


size_t SparqlQueryParser::NumericLiteralUnsignedContext::getRuleIndex() const {
  return SparqlQueryParser::RuleNumericLiteralUnsigned;
}


std::any SparqlQueryParser::NumericLiteralUnsignedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitNumericLiteralUnsigned(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::NumericLiteralUnsignedContext* SparqlQueryParser::numericLiteralUnsigned() {
  NumericLiteralUnsignedContext *_localctx = _tracker.createInstance<NumericLiteralUnsignedContext>(_ctx, getState());
  enterRule(_localctx, 226, SparqlQueryParser::RuleNumericLiteralUnsigned);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1360);
    _la = _input->LA(1);
    if (!(((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralPositiveContext ------------------------------------------------------------------

SparqlQueryParser::NumericLiteralPositiveContext::NumericLiteralPositiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralPositiveContext::INTEGER_POSITIVE() {
  return getToken(SparqlQueryParser::INTEGER_POSITIVE, 0);
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralPositiveContext::DECIMAL_POSITIVE() {
  return getToken(SparqlQueryParser::DECIMAL_POSITIVE, 0);
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralPositiveContext::DOUBLE_POSITIVE() {
  return getToken(SparqlQueryParser::DOUBLE_POSITIVE, 0);
}


size_t SparqlQueryParser::NumericLiteralPositiveContext::getRuleIndex() const {
  return SparqlQueryParser::RuleNumericLiteralPositive;
}


std::any SparqlQueryParser::NumericLiteralPositiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitNumericLiteralPositive(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::NumericLiteralPositiveContext* SparqlQueryParser::numericLiteralPositive() {
  NumericLiteralPositiveContext *_localctx = _tracker.createInstance<NumericLiteralPositiveContext>(_ctx, getState());
  enterRule(_localctx, 228, SparqlQueryParser::RuleNumericLiteralPositive);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1362);
    _la = _input->LA(1);
    if (!(((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralNegativeContext ------------------------------------------------------------------

SparqlQueryParser::NumericLiteralNegativeContext::NumericLiteralNegativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralNegativeContext::INTEGER_NEGATIVE() {
  return getToken(SparqlQueryParser::INTEGER_NEGATIVE, 0);
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralNegativeContext::DECIMAL_NEGATIVE() {
  return getToken(SparqlQueryParser::DECIMAL_NEGATIVE, 0);
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralNegativeContext::DOUBLE_NEGATIVE() {
  return getToken(SparqlQueryParser::DOUBLE_NEGATIVE, 0);
}


size_t SparqlQueryParser::NumericLiteralNegativeContext::getRuleIndex() const {
  return SparqlQueryParser::RuleNumericLiteralNegative;
}


std::any SparqlQueryParser::NumericLiteralNegativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitNumericLiteralNegative(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::NumericLiteralNegativeContext* SparqlQueryParser::numericLiteralNegative() {
  NumericLiteralNegativeContext *_localctx = _tracker.createInstance<NumericLiteralNegativeContext>(_ctx, getState());
  enterRule(_localctx, 230, SparqlQueryParser::RuleNumericLiteralNegative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1364);
    _la = _input->LA(1);
    if (!(((((_la - 121) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 121)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

SparqlQueryParser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::BooleanLiteralContext::TRUE() {
  return getToken(SparqlQueryParser::TRUE, 0);
}

tree::TerminalNode* SparqlQueryParser::BooleanLiteralContext::FALSE() {
  return getToken(SparqlQueryParser::FALSE, 0);
}


size_t SparqlQueryParser::BooleanLiteralContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBooleanLiteral;
}


std::any SparqlQueryParser::BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BooleanLiteralContext* SparqlQueryParser::booleanLiteral() {
  BooleanLiteralContext *_localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 232, SparqlQueryParser::RuleBooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1366);
    _la = _input->LA(1);
    if (!(_la == SparqlQueryParser::TRUE

    || _la == SparqlQueryParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

SparqlQueryParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::StringContext::STRING_LITERAL1() {
  return getToken(SparqlQueryParser::STRING_LITERAL1, 0);
}

tree::TerminalNode* SparqlQueryParser::StringContext::STRING_LITERAL2() {
  return getToken(SparqlQueryParser::STRING_LITERAL2, 0);
}

tree::TerminalNode* SparqlQueryParser::StringContext::STRING_LITERAL_LONG1() {
  return getToken(SparqlQueryParser::STRING_LITERAL_LONG1, 0);
}

tree::TerminalNode* SparqlQueryParser::StringContext::STRING_LITERAL_LONG2() {
  return getToken(SparqlQueryParser::STRING_LITERAL_LONG2, 0);
}


size_t SparqlQueryParser::StringContext::getRuleIndex() const {
  return SparqlQueryParser::RuleString;
}


std::any SparqlQueryParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::StringContext* SparqlQueryParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 234, SparqlQueryParser::RuleString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1368);
    _la = _input->LA(1);
    if (!(((((_la - 124) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 124)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IriContext ------------------------------------------------------------------

SparqlQueryParser::IriContext::IriContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::IriContext::IRIREF() {
  return getToken(SparqlQueryParser::IRIREF, 0);
}

SparqlQueryParser::PrefixedNameContext* SparqlQueryParser::IriContext::prefixedName() {
  return getRuleContext<SparqlQueryParser::PrefixedNameContext>(0);
}


size_t SparqlQueryParser::IriContext::getRuleIndex() const {
  return SparqlQueryParser::RuleIri;
}


std::any SparqlQueryParser::IriContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitIri(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::IriContext* SparqlQueryParser::iri() {
  IriContext *_localctx = _tracker.createInstance<IriContext>(_ctx, getState());
  enterRule(_localctx, 236, SparqlQueryParser::RuleIri);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1372);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF: {
        enterOuterAlt(_localctx, 1);
        setState(1370);
        match(SparqlQueryParser::IRIREF);
        break;
      }

      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 2);
        setState(1371);
        prefixedName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrefixedNameContext ------------------------------------------------------------------

SparqlQueryParser::PrefixedNameContext::PrefixedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PrefixedNameContext::PNAME_LN() {
  return getToken(SparqlQueryParser::PNAME_LN, 0);
}

tree::TerminalNode* SparqlQueryParser::PrefixedNameContext::PNAME_NS() {
  return getToken(SparqlQueryParser::PNAME_NS, 0);
}


size_t SparqlQueryParser::PrefixedNameContext::getRuleIndex() const {
  return SparqlQueryParser::RulePrefixedName;
}


std::any SparqlQueryParser::PrefixedNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPrefixedName(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PrefixedNameContext* SparqlQueryParser::prefixedName() {
  PrefixedNameContext *_localctx = _tracker.createInstance<PrefixedNameContext>(_ctx, getState());
  enterRule(_localctx, 238, SparqlQueryParser::RulePrefixedName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1374);
    _la = _input->LA(1);
    if (!(_la == SparqlQueryParser::PNAME_NS

    || _la == SparqlQueryParser::PNAME_LN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlankNodeContext ------------------------------------------------------------------

SparqlQueryParser::BlankNodeContext::BlankNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::BlankNodeContext::BLANK_NODE_LABEL() {
  return getToken(SparqlQueryParser::BLANK_NODE_LABEL, 0);
}

SparqlQueryParser::AnonContext* SparqlQueryParser::BlankNodeContext::anon() {
  return getRuleContext<SparqlQueryParser::AnonContext>(0);
}


size_t SparqlQueryParser::BlankNodeContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBlankNode;
}


std::any SparqlQueryParser::BlankNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBlankNode(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BlankNodeContext* SparqlQueryParser::blankNode() {
  BlankNodeContext *_localctx = _tracker.createInstance<BlankNodeContext>(_ctx, getState());
  enterRule(_localctx, 240, SparqlQueryParser::RuleBlankNode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1378);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::BLANK_NODE_LABEL: {
        enterOuterAlt(_localctx, 1);
        setState(1376);
        match(SparqlQueryParser::BLANK_NODE_LABEL);
        break;
      }

      case SparqlQueryParser::OPEN_SQUARE_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(1377);
        anon();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnonContext ------------------------------------------------------------------

SparqlQueryParser::AnonContext::AnonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::AnonContext::OPEN_SQUARE_BRACKET() {
  return getToken(SparqlQueryParser::OPEN_SQUARE_BRACKET, 0);
}

tree::TerminalNode* SparqlQueryParser::AnonContext::CLOSE_SQUARE_BRACKET() {
  return getToken(SparqlQueryParser::CLOSE_SQUARE_BRACKET, 0);
}


size_t SparqlQueryParser::AnonContext::getRuleIndex() const {
  return SparqlQueryParser::RuleAnon;
}


std::any SparqlQueryParser::AnonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitAnon(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::AnonContext* SparqlQueryParser::anon() {
  AnonContext *_localctx = _tracker.createInstance<AnonContext>(_ctx, getState());
  enterRule(_localctx, 242, SparqlQueryParser::RuleAnon);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1380);
    match(SparqlQueryParser::OPEN_SQUARE_BRACKET);
    setState(1381);
    match(SparqlQueryParser::CLOSE_SQUARE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void SparqlQueryParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  sparqlqueryparserParserInitialize();
#else
  ::antlr4::internal::call_once(sparqlqueryparserParserOnceFlag, sparqlqueryparserParserInitialize);
#endif
}
