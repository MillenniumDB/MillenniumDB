
// Generated from SparqlQueryParser.g4 by ANTLR 4.13.1


#include "SparqlQueryParserVisitor.h"

#include "SparqlQueryParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct SparqlQueryParserStaticData final {
  SparqlQueryParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SparqlQueryParserStaticData(const SparqlQueryParserStaticData&) = delete;
  SparqlQueryParserStaticData(SparqlQueryParserStaticData&&) = delete;
  SparqlQueryParserStaticData& operator=(const SparqlQueryParserStaticData&) = delete;
  SparqlQueryParserStaticData& operator=(SparqlQueryParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sparqlqueryparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
SparqlQueryParserStaticData *sparqlqueryparserParserStaticData = nullptr;

void sparqlqueryparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (sparqlqueryparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(sparqlqueryparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<SparqlQueryParserStaticData>(
    std::vector<std::string>{
      "query", "prologue", "baseDecl", "prefixDecl", "selectQuery", "subSelect", 
      "selectClause", "selectModifier", "selectVariables", "constructQuery", 
      "describeQuery", "askQuery", "datasetClause", "whereClause", "solutionModifier", 
      "groupClause", "groupCondition", "havingClause", "havingCondition", 
      "orderClause", "orderCondition", "limitOffsetClauses", "limitClause", 
      "offsetClause", "valuesClause", "triplesTemplate", "groupGraphPattern", 
      "groupGraphPatternSub", "groupGraphPatternSubList", "triplesBlock", 
      "graphPatternNotTriples", "optionalGraphPattern", "graphGraphPattern", 
      "serviceGraphPattern", "bind", "inlineData", "dataBlock", "inlineDataOneVar", 
      "inlineDataFull", "dataBlockValues", "dataBlockValue", "minusGraphPattern", 
      "groupOrUnionGraphPattern", "filter", "constraint", "functionCall", 
      "argList", "expressionList", "constructTemplate", "constructTriples", 
      "triplesSameSubject", "propertyList", "propertyListNotEmpty", "verb", 
      "objectList", "object", "triplesSameSubjectPath", "propertyListPath", 
      "propertyListPathNotEmpty", "propertyListPathNotEmptyList", "verbPath", 
      "verbSimple", "objectListPath", "objectPath", "path", "pathAlternative", 
      "pathSequence", "pathElt", "pathEltOrInverse", "pathMod", "pathQuantity", 
      "pathQuantityExact", "pathQuantityRange", "pathQuantityMin", "pathQuantityMax", 
      "pathPrimary", "pathNegatedPropertySet", "pathOneInPropertySet", "integer", 
      "triplesNode", "blankNodePropertyList", "triplesNodePath", "blankNodePropertyListPath", 
      "collection", "collectionPath", "graphNode", "graphNodePath", "varOrTerm", 
      "varOrIRI", "var", "graphTerm", "nil", "expression", "conditionalOrExpression", 
      "conditionalAndExpression", "relationalExpression", "additiveExpression", 
      "rhsAdditiveExpression", "rhsAdditiveExpressionSub", "multiplicativeExpression", 
      "unaryExpression", "primaryExpression", "builtInCall", "regexExpression", 
      "subStringExpression", "strReplaceExpression", "existsFunction", "notExistsFunction", 
      "aggregate", "iriOrFunction", "rdfLiteral", "numericLiteral", "numericLiteralUnsigned", 
      "numericLiteralPositive", "numericLiteralNegative", "booleanLiteral", 
      "string", "iri", "prefixedName", "blankNode", "anon"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "'a'", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "'^^'", "'<='", "'>='", "'!='", "'&&'", 
      "'||'", "'^'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "'.'", 
      "'+'", "'-'", "'*'", "'\\u003F'", "','", "'!'", "'/'", "'='", "'<'", 
      "'>'", "'|'"
    },
    std::vector<std::string>{
      "", "WS", "BASE", "PREFIX", "SELECT", "DISTINCT", "REDUCED", "CONSTRUCT", 
      "DESCRIBE", "ASK", "FROM", "NAMED", "WHERE", "ORDER", "BY", "ASC", 
      "DESC", "LIMIT", "OFFSET", "VALUES", "OPTIONAL", "GRAPH", "UNION", 
      "FILTER", "A", "STR", "LANG", "LANGMATCHES", "DATATYPE", "BOUND", 
      "SAMETERM", "ISIRI", "ISURI", "ISBLANK", "ISLITERAL", "REGEX", "SUBSTR", 
      "TRUE", "FALSE", "SILENT", "ALL", "AS", "GROUP", "HAVING", "UNDEF", 
      "BINDINGS", "SERVICE", "BIND", "MINUS", "IRI", "URI", "BNODE", "RAND", 
      "ABS", "CEIL", "FLOOR", "ROUND", "CONCAT", "STRLEN", "UCASE", "LCASE", 
      "ENCODE_FOR_URI", "CONTAINS", "STRSTARTS", "STRENDS", "STRBEFORE", 
      "STRAFTER", "REPLACE", "YEAR", "MONTH", "DAY", "HOURS", "MINUTES", 
      "SECONDS", "TIMEZONE", "TZ", "NOW", "UUID", "STRUUID", "MD5", "SHA1", 
      "SHA256", "SHA384", "SHA512", "COALESCE", "IF", "STRLANG", "STRDT", 
      "ISNUMERIC", "COUNT", "SUM", "MIN", "MAX", "AVG", "SAMPLE", "GROUP_CONCAT", 
      "NOT", "IN", "EXISTS", "SEPARATOR", "ANY", "SHORTEST", "SIMPLE", "ACYCLIC", 
      "WALKS", "IRIREF", "PNAME_NS", "PNAME_LN", "BLANK_NODE_LABEL", "VAR1", 
      "VAR2", "LANGTAG", "INTEGER", "DECIMAL", "DOUBLE", "INTEGER_POSITIVE", 
      "DECIMAL_POSITIVE", "DOUBLE_POSITIVE", "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", 
      "DOUBLE_NEGATIVE", "STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", 
      "STRING_LITERAL_LONG2", "COMMENT", "REFERENCE", "LESS_EQUAL", "GREATER_EQUAL", 
      "NOT_EQUAL", "AND", "OR", "INVERSE", "OPEN_BRACE", "CLOSE_BRACE", 
      "OPEN_CURLY_BRACE", "CLOSE_CURLY_BRACE", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
      "SEMICOLON", "DOT", "PLUS_SIGN", "MINUS_SIGN", "ASTERISK", "QUESTION_MARK", 
      "COMMA", "NEGATION", "DIVIDE", "EQUAL", "LESS", "GREATER", "PIPE", 
      "ANY_OTHER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,152,1375,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,1,0,1,0,1,0,1,0,
  	1,0,3,0,248,8,0,1,0,1,0,1,0,1,1,1,1,5,1,255,8,1,10,1,12,1,258,9,1,1,2,
  	1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,5,4,269,8,4,10,4,12,4,272,9,4,1,4,1,4,
  	1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,3,6,284,8,6,1,6,4,6,287,8,6,11,6,12,6,
  	288,1,6,3,6,292,8,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,303,8,8,1,
  	9,1,9,1,9,5,9,308,8,9,10,9,12,9,311,9,9,1,9,1,9,1,9,1,9,5,9,317,8,9,10,
  	9,12,9,320,9,9,1,9,1,9,1,9,3,9,325,8,9,1,9,1,9,3,9,329,8,9,1,10,1,10,
  	4,10,333,8,10,11,10,12,10,334,1,10,3,10,338,8,10,1,10,5,10,341,8,10,10,
  	10,12,10,344,9,10,1,10,3,10,347,8,10,1,10,1,10,1,11,1,11,5,11,353,8,11,
  	10,11,12,11,356,9,11,1,11,1,11,1,11,1,12,1,12,3,12,363,8,12,1,12,1,12,
  	1,13,3,13,368,8,13,1,13,1,13,1,14,3,14,373,8,14,1,14,3,14,376,8,14,1,
  	14,3,14,379,8,14,1,14,3,14,382,8,14,1,15,1,15,1,15,4,15,387,8,15,11,15,
  	12,15,388,1,16,1,16,1,16,1,16,1,16,1,16,3,16,397,8,16,1,16,1,16,1,16,
  	3,16,402,8,16,1,17,1,17,4,17,406,8,17,11,17,12,17,407,1,18,1,18,1,19,
  	1,19,1,19,4,19,415,8,19,11,19,12,19,416,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,20,3,20,426,8,20,1,21,1,21,3,21,430,8,21,1,21,1,21,3,21,434,8,21,3,
  	21,436,8,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,3,24,446,8,24,1,25,
  	1,25,1,25,3,25,451,8,25,5,25,453,8,25,10,25,12,25,456,9,25,1,26,1,26,
  	1,26,3,26,461,8,26,1,26,1,26,1,27,3,27,466,8,27,1,27,5,27,469,8,27,10,
  	27,12,27,472,9,27,1,28,1,28,3,28,476,8,28,1,28,3,28,479,8,28,1,29,1,29,
  	1,29,3,29,484,8,29,5,29,486,8,29,10,29,12,29,489,9,29,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,3,30,499,8,30,1,31,1,31,1,31,1,32,1,32,1,32,
  	1,32,1,33,1,33,3,33,510,8,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,
  	1,34,1,34,1,35,1,35,1,35,1,36,1,36,3,36,527,8,36,1,37,1,37,1,37,5,37,
  	532,8,37,10,37,12,37,535,9,37,1,37,1,37,1,38,1,38,5,38,541,8,38,10,38,
  	12,38,544,9,38,1,38,1,38,1,38,5,38,549,8,38,10,38,12,38,552,9,38,1,38,
  	1,38,1,39,1,39,5,39,558,8,39,10,39,12,39,561,9,39,1,39,1,39,1,40,1,40,
  	1,40,1,40,1,40,3,40,570,8,40,1,41,1,41,1,41,1,42,1,42,1,42,5,42,578,8,
  	42,10,42,12,42,581,9,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
  	3,44,592,8,44,1,45,1,45,1,45,1,46,1,46,3,46,599,8,46,1,46,1,46,3,46,603,
  	8,46,1,46,1,46,1,47,1,47,1,47,5,47,610,8,47,10,47,12,47,613,9,47,1,48,
  	1,48,3,48,617,8,48,1,48,1,48,1,49,1,49,1,49,3,49,624,8,49,5,49,626,8,
  	49,10,49,12,49,629,9,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,637,8,50,1,
  	51,3,51,640,8,51,1,52,1,52,1,52,1,52,1,52,1,52,3,52,648,8,52,5,52,650,
  	8,52,10,52,12,52,653,9,52,1,53,1,53,3,53,657,8,53,1,54,1,54,1,54,5,54,
  	662,8,54,10,54,12,54,665,9,54,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,
  	3,56,675,8,56,1,57,3,57,678,8,57,1,58,1,58,3,58,682,8,58,1,58,1,58,1,
  	58,3,58,687,8,58,5,58,689,8,58,10,58,12,58,692,9,58,1,59,1,59,3,59,696,
  	8,59,1,59,1,59,1,60,1,60,1,60,3,60,703,8,60,1,60,3,60,706,8,60,1,60,1,
  	60,1,60,1,60,1,60,1,60,3,60,714,8,60,1,61,1,61,1,62,1,62,1,62,5,62,721,
  	8,62,10,62,12,62,724,9,62,1,63,1,63,1,64,1,64,1,65,1,65,1,65,5,65,733,
  	8,65,10,65,12,65,736,9,65,1,66,1,66,1,66,5,66,741,8,66,10,66,12,66,744,
  	9,66,1,67,1,67,3,67,748,8,67,1,68,3,68,751,8,68,1,68,1,68,1,69,1,69,1,
  	69,1,69,1,69,1,69,1,69,3,69,762,8,69,1,70,1,70,1,70,1,70,3,70,768,8,70,
  	1,71,1,71,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,
  	1,75,1,75,1,75,1,75,1,75,1,75,3,75,790,8,75,1,76,1,76,1,76,1,76,1,76,
  	5,76,797,8,76,10,76,12,76,800,9,76,3,76,802,8,76,1,76,3,76,805,8,76,1,
  	77,3,77,808,8,77,1,77,1,77,3,77,812,8,77,1,78,1,78,1,79,1,79,3,79,818,
  	8,79,1,80,1,80,1,80,1,80,1,81,1,81,3,81,826,8,81,1,82,1,82,1,82,1,82,
  	1,83,1,83,4,83,834,8,83,11,83,12,83,835,1,83,1,83,1,84,1,84,4,84,842,
  	8,84,11,84,12,84,843,1,84,1,84,1,85,1,85,3,85,850,8,85,1,86,1,86,3,86,
  	854,8,86,1,87,1,87,3,87,858,8,87,1,88,1,88,3,88,862,8,88,1,89,1,89,1,
  	90,1,90,1,90,1,90,1,90,1,90,3,90,872,8,90,1,91,1,91,1,91,1,92,1,92,1,
  	93,1,93,1,93,5,93,882,8,93,10,93,12,93,885,9,93,1,94,1,94,1,94,5,94,890,
  	8,94,10,94,12,94,893,9,94,1,95,1,95,1,95,3,95,898,8,95,1,95,1,95,3,95,
  	902,8,95,1,95,1,95,1,95,3,95,907,8,95,1,95,1,95,3,95,911,8,95,1,96,1,
  	96,5,96,915,8,96,10,96,12,96,918,9,96,1,97,1,97,1,97,5,97,923,8,97,10,
  	97,12,97,926,9,97,1,98,1,98,1,98,1,98,3,98,932,8,98,1,99,1,99,1,99,5,
  	99,937,8,99,10,99,12,99,940,9,99,1,100,3,100,943,8,100,1,100,1,100,1,
  	101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,957,8,
  	101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,3,102,1000,8,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	3,102,1029,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,3,102,1166,8,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1227,8,102,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,3,103,1236,8,103,1,103,1,103,1,104,
  	1,104,1,104,1,104,1,104,1,104,1,104,3,104,1247,8,104,1,104,1,104,1,105,
  	1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1260,8,105,1,105,
  	1,105,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,108,1,108,1,108,3,108,
  	1274,8,108,1,108,1,108,3,108,1278,8,108,1,108,1,108,1,108,1,108,3,108,
  	1284,8,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1292,8,108,1,108,
  	1,108,1,108,1,108,1,108,1,108,3,108,1300,8,108,1,108,1,108,1,108,1,108,
  	1,108,1,108,3,108,1308,8,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,
  	1316,8,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1324,8,108,1,108,
  	1,108,1,108,1,108,1,108,3,108,1331,8,108,1,108,1,108,3,108,1335,8,108,
  	1,109,1,109,3,109,1339,8,109,1,110,1,110,1,110,1,110,3,110,1345,8,110,
  	1,111,1,111,1,111,3,111,1350,8,111,1,112,1,112,1,113,1,113,1,114,1,114,
  	1,115,1,115,1,116,1,116,1,117,1,117,3,117,1364,8,117,1,118,1,118,1,119,
  	1,119,3,119,1370,8,119,1,120,1,120,1,120,1,120,0,0,121,0,2,4,6,8,10,12,
  	14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
  	60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
  	106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
  	142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
  	178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
  	214,216,218,220,222,224,226,228,230,232,234,236,238,240,0,15,1,0,5,6,
  	1,0,15,16,2,0,40,40,100,100,1,0,102,104,1,0,109,110,2,0,127,129,148,150,
  	2,0,143,143,147,147,1,0,141,142,2,0,141,142,146,146,1,0,112,114,1,0,115,
  	117,1,0,118,120,1,0,37,38,1,0,121,124,1,0,106,107,1473,0,242,1,0,0,0,
  	2,256,1,0,0,0,4,259,1,0,0,0,6,262,1,0,0,0,8,266,1,0,0,0,10,276,1,0,0,
  	0,12,281,1,0,0,0,14,293,1,0,0,0,16,302,1,0,0,0,18,304,1,0,0,0,20,330,
  	1,0,0,0,22,350,1,0,0,0,24,360,1,0,0,0,26,367,1,0,0,0,28,372,1,0,0,0,30,
  	383,1,0,0,0,32,401,1,0,0,0,34,403,1,0,0,0,36,409,1,0,0,0,38,411,1,0,0,
  	0,40,425,1,0,0,0,42,435,1,0,0,0,44,437,1,0,0,0,46,440,1,0,0,0,48,445,
  	1,0,0,0,50,447,1,0,0,0,52,457,1,0,0,0,54,465,1,0,0,0,56,473,1,0,0,0,58,
  	480,1,0,0,0,60,498,1,0,0,0,62,500,1,0,0,0,64,503,1,0,0,0,66,507,1,0,0,
  	0,68,514,1,0,0,0,70,521,1,0,0,0,72,526,1,0,0,0,74,528,1,0,0,0,76,538,
  	1,0,0,0,78,555,1,0,0,0,80,569,1,0,0,0,82,571,1,0,0,0,84,574,1,0,0,0,86,
  	582,1,0,0,0,88,591,1,0,0,0,90,593,1,0,0,0,92,596,1,0,0,0,94,606,1,0,0,
  	0,96,614,1,0,0,0,98,620,1,0,0,0,100,636,1,0,0,0,102,639,1,0,0,0,104,641,
  	1,0,0,0,106,656,1,0,0,0,108,658,1,0,0,0,110,666,1,0,0,0,112,674,1,0,0,
  	0,114,677,1,0,0,0,116,681,1,0,0,0,118,695,1,0,0,0,120,713,1,0,0,0,122,
  	715,1,0,0,0,124,717,1,0,0,0,126,725,1,0,0,0,128,727,1,0,0,0,130,729,1,
  	0,0,0,132,737,1,0,0,0,134,745,1,0,0,0,136,750,1,0,0,0,138,761,1,0,0,0,
  	140,767,1,0,0,0,142,769,1,0,0,0,144,771,1,0,0,0,146,775,1,0,0,0,148,778,
  	1,0,0,0,150,789,1,0,0,0,152,804,1,0,0,0,154,807,1,0,0,0,156,813,1,0,0,
  	0,158,817,1,0,0,0,160,819,1,0,0,0,162,825,1,0,0,0,164,827,1,0,0,0,166,
  	831,1,0,0,0,168,839,1,0,0,0,170,849,1,0,0,0,172,853,1,0,0,0,174,857,1,
  	0,0,0,176,861,1,0,0,0,178,863,1,0,0,0,180,871,1,0,0,0,182,873,1,0,0,0,
  	184,876,1,0,0,0,186,878,1,0,0,0,188,886,1,0,0,0,190,910,1,0,0,0,192,912,
  	1,0,0,0,194,919,1,0,0,0,196,931,1,0,0,0,198,933,1,0,0,0,200,942,1,0,0,
  	0,202,956,1,0,0,0,204,1226,1,0,0,0,206,1228,1,0,0,0,208,1239,1,0,0,0,
  	210,1250,1,0,0,0,212,1263,1,0,0,0,214,1266,1,0,0,0,216,1334,1,0,0,0,218,
  	1336,1,0,0,0,220,1340,1,0,0,0,222,1349,1,0,0,0,224,1351,1,0,0,0,226,1353,
  	1,0,0,0,228,1355,1,0,0,0,230,1357,1,0,0,0,232,1359,1,0,0,0,234,1363,1,
  	0,0,0,236,1365,1,0,0,0,238,1369,1,0,0,0,240,1371,1,0,0,0,242,247,3,2,
  	1,0,243,248,3,8,4,0,244,248,3,18,9,0,245,248,3,20,10,0,246,248,3,22,11,
  	0,247,243,1,0,0,0,247,244,1,0,0,0,247,245,1,0,0,0,247,246,1,0,0,0,248,
  	249,1,0,0,0,249,250,3,48,24,0,250,251,5,0,0,1,251,1,1,0,0,0,252,255,3,
  	4,2,0,253,255,3,6,3,0,254,252,1,0,0,0,254,253,1,0,0,0,255,258,1,0,0,0,
  	256,254,1,0,0,0,256,257,1,0,0,0,257,3,1,0,0,0,258,256,1,0,0,0,259,260,
  	5,2,0,0,260,261,5,105,0,0,261,5,1,0,0,0,262,263,5,3,0,0,263,264,5,106,
  	0,0,264,265,5,105,0,0,265,7,1,0,0,0,266,270,3,12,6,0,267,269,3,24,12,
  	0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,
  	273,1,0,0,0,272,270,1,0,0,0,273,274,3,26,13,0,274,275,3,28,14,0,275,9,
  	1,0,0,0,276,277,3,12,6,0,277,278,3,26,13,0,278,279,3,28,14,0,279,280,
  	3,48,24,0,280,11,1,0,0,0,281,283,5,4,0,0,282,284,3,14,7,0,283,282,1,0,
  	0,0,283,284,1,0,0,0,284,291,1,0,0,0,285,287,3,16,8,0,286,285,1,0,0,0,
  	287,288,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,292,1,0,0,0,290,292,
  	5,143,0,0,291,286,1,0,0,0,291,290,1,0,0,0,292,13,1,0,0,0,293,294,7,0,
  	0,0,294,15,1,0,0,0,295,303,3,178,89,0,296,297,5,133,0,0,297,298,3,184,
  	92,0,298,299,5,41,0,0,299,300,3,178,89,0,300,301,5,134,0,0,301,303,1,
  	0,0,0,302,295,1,0,0,0,302,296,1,0,0,0,303,17,1,0,0,0,304,328,5,7,0,0,
  	305,309,3,96,48,0,306,308,3,24,12,0,307,306,1,0,0,0,308,311,1,0,0,0,309,
  	307,1,0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,309,1,0,0,0,312,313,3,
  	26,13,0,313,314,3,28,14,0,314,329,1,0,0,0,315,317,3,24,12,0,316,315,1,
  	0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,321,1,0,0,0,
  	320,318,1,0,0,0,321,322,5,12,0,0,322,324,5,135,0,0,323,325,3,50,25,0,
  	324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,327,5,136,0,0,327,
  	329,3,28,14,0,328,305,1,0,0,0,328,318,1,0,0,0,329,19,1,0,0,0,330,337,
  	5,8,0,0,331,333,3,176,88,0,332,331,1,0,0,0,333,334,1,0,0,0,334,332,1,
  	0,0,0,334,335,1,0,0,0,335,338,1,0,0,0,336,338,5,143,0,0,337,332,1,0,0,
  	0,337,336,1,0,0,0,338,342,1,0,0,0,339,341,3,24,12,0,340,339,1,0,0,0,341,
  	344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,346,1,0,0,0,344,342,1,
  	0,0,0,345,347,3,26,13,0,346,345,1,0,0,0,346,347,1,0,0,0,347,348,1,0,0,
  	0,348,349,3,28,14,0,349,21,1,0,0,0,350,354,5,9,0,0,351,353,3,24,12,0,
  	352,351,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,357,
  	1,0,0,0,356,354,1,0,0,0,357,358,3,26,13,0,358,359,3,28,14,0,359,23,1,
  	0,0,0,360,362,5,10,0,0,361,363,5,11,0,0,362,361,1,0,0,0,362,363,1,0,0,
  	0,363,364,1,0,0,0,364,365,3,234,117,0,365,25,1,0,0,0,366,368,5,12,0,0,
  	367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,3,52,26,0,370,
  	27,1,0,0,0,371,373,3,30,15,0,372,371,1,0,0,0,372,373,1,0,0,0,373,375,
  	1,0,0,0,374,376,3,34,17,0,375,374,1,0,0,0,375,376,1,0,0,0,376,378,1,0,
  	0,0,377,379,3,38,19,0,378,377,1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,0,
  	380,382,3,42,21,0,381,380,1,0,0,0,381,382,1,0,0,0,382,29,1,0,0,0,383,
  	384,5,42,0,0,384,386,5,14,0,0,385,387,3,32,16,0,386,385,1,0,0,0,387,388,
  	1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,31,1,0,0,0,390,402,3,204,
  	102,0,391,402,3,90,45,0,392,393,5,133,0,0,393,396,3,184,92,0,394,395,
  	5,41,0,0,395,397,3,178,89,0,396,394,1,0,0,0,396,397,1,0,0,0,397,398,1,
  	0,0,0,398,399,5,134,0,0,399,402,1,0,0,0,400,402,3,178,89,0,401,390,1,
  	0,0,0,401,391,1,0,0,0,401,392,1,0,0,0,401,400,1,0,0,0,402,33,1,0,0,0,
  	403,405,5,43,0,0,404,406,3,36,18,0,405,404,1,0,0,0,406,407,1,0,0,0,407,
  	405,1,0,0,0,407,408,1,0,0,0,408,35,1,0,0,0,409,410,3,88,44,0,410,37,1,
  	0,0,0,411,412,5,13,0,0,412,414,5,14,0,0,413,415,3,40,20,0,414,413,1,0,
  	0,0,415,416,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,39,1,0,0,0,418,
  	419,7,1,0,0,419,420,5,133,0,0,420,421,3,184,92,0,421,422,5,134,0,0,422,
  	426,1,0,0,0,423,426,3,88,44,0,424,426,3,178,89,0,425,418,1,0,0,0,425,
  	423,1,0,0,0,425,424,1,0,0,0,426,41,1,0,0,0,427,429,3,44,22,0,428,430,
  	3,46,23,0,429,428,1,0,0,0,429,430,1,0,0,0,430,436,1,0,0,0,431,433,3,46,
  	23,0,432,434,3,44,22,0,433,432,1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,
  	0,435,427,1,0,0,0,435,431,1,0,0,0,436,43,1,0,0,0,437,438,5,17,0,0,438,
  	439,5,112,0,0,439,45,1,0,0,0,440,441,5,18,0,0,441,442,5,112,0,0,442,47,
  	1,0,0,0,443,444,5,19,0,0,444,446,3,72,36,0,445,443,1,0,0,0,445,446,1,
  	0,0,0,446,49,1,0,0,0,447,454,3,100,50,0,448,450,5,140,0,0,449,451,3,100,
  	50,0,450,449,1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,448,1,0,0,0,
  	453,456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,51,1,0,0,0,456,454,
  	1,0,0,0,457,460,5,135,0,0,458,461,3,10,5,0,459,461,3,54,27,0,460,458,
  	1,0,0,0,460,459,1,0,0,0,461,462,1,0,0,0,462,463,5,136,0,0,463,53,1,0,
  	0,0,464,466,3,58,29,0,465,464,1,0,0,0,465,466,1,0,0,0,466,470,1,0,0,0,
  	467,469,3,56,28,0,468,467,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,
  	471,1,0,0,0,471,55,1,0,0,0,472,470,1,0,0,0,473,475,3,60,30,0,474,476,
  	5,140,0,0,475,474,1,0,0,0,475,476,1,0,0,0,476,478,1,0,0,0,477,479,3,58,
  	29,0,478,477,1,0,0,0,478,479,1,0,0,0,479,57,1,0,0,0,480,487,3,112,56,
  	0,481,483,5,140,0,0,482,484,3,112,56,0,483,482,1,0,0,0,483,484,1,0,0,
  	0,484,486,1,0,0,0,485,481,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,
  	488,1,0,0,0,488,59,1,0,0,0,489,487,1,0,0,0,490,499,3,84,42,0,491,499,
  	3,62,31,0,492,499,3,82,41,0,493,499,3,64,32,0,494,499,3,66,33,0,495,499,
  	3,86,43,0,496,499,3,68,34,0,497,499,3,70,35,0,498,490,1,0,0,0,498,491,
  	1,0,0,0,498,492,1,0,0,0,498,493,1,0,0,0,498,494,1,0,0,0,498,495,1,0,0,
  	0,498,496,1,0,0,0,498,497,1,0,0,0,499,61,1,0,0,0,500,501,5,20,0,0,501,
  	502,3,52,26,0,502,63,1,0,0,0,503,504,5,21,0,0,504,505,3,176,88,0,505,
  	506,3,52,26,0,506,65,1,0,0,0,507,509,5,46,0,0,508,510,5,39,0,0,509,508,
  	1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,512,3,176,88,0,512,513,3,
  	52,26,0,513,67,1,0,0,0,514,515,5,47,0,0,515,516,5,133,0,0,516,517,3,184,
  	92,0,517,518,5,41,0,0,518,519,3,178,89,0,519,520,5,134,0,0,520,69,1,0,
  	0,0,521,522,5,19,0,0,522,523,3,72,36,0,523,71,1,0,0,0,524,527,3,74,37,
  	0,525,527,3,76,38,0,526,524,1,0,0,0,526,525,1,0,0,0,527,73,1,0,0,0,528,
  	529,3,178,89,0,529,533,5,135,0,0,530,532,3,80,40,0,531,530,1,0,0,0,532,
  	535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,533,1,
  	0,0,0,536,537,5,136,0,0,537,75,1,0,0,0,538,542,5,133,0,0,539,541,3,178,
  	89,0,540,539,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,
  	543,545,1,0,0,0,544,542,1,0,0,0,545,546,5,134,0,0,546,550,5,135,0,0,547,
  	549,3,78,39,0,548,547,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,
  	1,0,0,0,551,553,1,0,0,0,552,550,1,0,0,0,553,554,5,136,0,0,554,77,1,0,
  	0,0,555,559,5,133,0,0,556,558,3,80,40,0,557,556,1,0,0,0,558,561,1,0,0,
  	0,559,557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,559,1,0,0,0,562,
  	563,5,134,0,0,563,79,1,0,0,0,564,570,3,234,117,0,565,570,3,220,110,0,
  	566,570,3,222,111,0,567,570,3,230,115,0,568,570,5,44,0,0,569,564,1,0,
  	0,0,569,565,1,0,0,0,569,566,1,0,0,0,569,567,1,0,0,0,569,568,1,0,0,0,570,
  	81,1,0,0,0,571,572,5,48,0,0,572,573,3,52,26,0,573,83,1,0,0,0,574,579,
  	3,52,26,0,575,576,5,22,0,0,576,578,3,52,26,0,577,575,1,0,0,0,578,581,
  	1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,85,1,0,0,0,581,579,1,0,0,
  	0,582,583,5,23,0,0,583,584,3,88,44,0,584,87,1,0,0,0,585,586,5,133,0,0,
  	586,587,3,184,92,0,587,588,5,134,0,0,588,592,1,0,0,0,589,592,3,204,102,
  	0,590,592,3,90,45,0,591,585,1,0,0,0,591,589,1,0,0,0,591,590,1,0,0,0,592,
  	89,1,0,0,0,593,594,3,234,117,0,594,595,3,92,46,0,595,91,1,0,0,0,596,602,
  	5,133,0,0,597,599,5,5,0,0,598,597,1,0,0,0,598,599,1,0,0,0,599,600,1,0,
  	0,0,600,603,3,94,47,0,601,603,1,0,0,0,602,598,1,0,0,0,602,601,1,0,0,0,
  	603,604,1,0,0,0,604,605,5,134,0,0,605,93,1,0,0,0,606,611,3,184,92,0,607,
  	608,5,145,0,0,608,610,3,184,92,0,609,607,1,0,0,0,610,613,1,0,0,0,611,
  	609,1,0,0,0,611,612,1,0,0,0,612,95,1,0,0,0,613,611,1,0,0,0,614,616,5,
  	135,0,0,615,617,3,98,49,0,616,615,1,0,0,0,616,617,1,0,0,0,617,618,1,0,
  	0,0,618,619,5,136,0,0,619,97,1,0,0,0,620,627,3,100,50,0,621,623,5,140,
  	0,0,622,624,3,98,49,0,623,622,1,0,0,0,623,624,1,0,0,0,624,626,1,0,0,0,
  	625,621,1,0,0,0,626,629,1,0,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,99,
  	1,0,0,0,629,627,1,0,0,0,630,631,3,174,87,0,631,632,3,104,52,0,632,637,
  	1,0,0,0,633,634,3,158,79,0,634,635,3,102,51,0,635,637,1,0,0,0,636,630,
  	1,0,0,0,636,633,1,0,0,0,637,101,1,0,0,0,638,640,3,104,52,0,639,638,1,
  	0,0,0,639,640,1,0,0,0,640,103,1,0,0,0,641,642,3,106,53,0,642,651,3,108,
  	54,0,643,647,5,139,0,0,644,645,3,106,53,0,645,646,3,108,54,0,646,648,
  	1,0,0,0,647,644,1,0,0,0,647,648,1,0,0,0,648,650,1,0,0,0,649,643,1,0,0,
  	0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,105,1,0,0,0,653,
  	651,1,0,0,0,654,657,3,176,88,0,655,657,5,24,0,0,656,654,1,0,0,0,656,655,
  	1,0,0,0,657,107,1,0,0,0,658,663,3,110,55,0,659,660,5,145,0,0,660,662,
  	3,110,55,0,661,659,1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,1,
  	0,0,0,664,109,1,0,0,0,665,663,1,0,0,0,666,667,3,170,85,0,667,111,1,0,
  	0,0,668,669,3,174,87,0,669,670,3,116,58,0,670,675,1,0,0,0,671,672,3,162,
  	81,0,672,673,3,114,57,0,673,675,1,0,0,0,674,668,1,0,0,0,674,671,1,0,0,
  	0,675,113,1,0,0,0,676,678,3,116,58,0,677,676,1,0,0,0,677,678,1,0,0,0,
  	678,115,1,0,0,0,679,682,3,120,60,0,680,682,3,122,61,0,681,679,1,0,0,0,
  	681,680,1,0,0,0,682,683,1,0,0,0,683,690,3,124,62,0,684,686,5,139,0,0,
  	685,687,3,118,59,0,686,685,1,0,0,0,686,687,1,0,0,0,687,689,1,0,0,0,688,
  	684,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,117,1,
  	0,0,0,692,690,1,0,0,0,693,696,3,120,60,0,694,696,3,122,61,0,695,693,1,
  	0,0,0,695,694,1,0,0,0,696,697,1,0,0,0,697,698,3,108,54,0,698,119,1,0,
  	0,0,699,714,3,128,64,0,700,702,7,2,0,0,701,703,5,101,0,0,702,701,1,0,
  	0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,706,7,3,0,0,705,704,1,0,0,0,705,
  	706,1,0,0,0,706,707,1,0,0,0,707,708,5,133,0,0,708,709,3,128,64,0,709,
  	710,5,41,0,0,710,711,3,178,89,0,711,712,5,134,0,0,712,714,1,0,0,0,713,
  	699,1,0,0,0,713,700,1,0,0,0,714,121,1,0,0,0,715,716,3,178,89,0,716,123,
  	1,0,0,0,717,722,3,126,63,0,718,719,5,145,0,0,719,721,3,126,63,0,720,718,
  	1,0,0,0,721,724,1,0,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,125,1,0,0,
  	0,724,722,1,0,0,0,725,726,3,172,86,0,726,127,1,0,0,0,727,728,3,130,65,
  	0,728,129,1,0,0,0,729,734,3,132,66,0,730,731,5,151,0,0,731,733,3,132,
  	66,0,732,730,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,
  	735,131,1,0,0,0,736,734,1,0,0,0,737,742,3,136,68,0,738,739,5,147,0,0,
  	739,741,3,136,68,0,740,738,1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,
  	743,1,0,0,0,743,133,1,0,0,0,744,742,1,0,0,0,745,747,3,150,75,0,746,748,
  	3,138,69,0,747,746,1,0,0,0,747,748,1,0,0,0,748,135,1,0,0,0,749,751,5,
  	132,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,753,3,134,
  	67,0,753,137,1,0,0,0,754,762,5,144,0,0,755,762,5,143,0,0,756,762,5,141,
  	0,0,757,758,5,135,0,0,758,759,3,140,70,0,759,760,5,136,0,0,760,762,1,
  	0,0,0,761,754,1,0,0,0,761,755,1,0,0,0,761,756,1,0,0,0,761,757,1,0,0,0,
  	762,139,1,0,0,0,763,768,3,142,71,0,764,768,3,144,72,0,765,768,3,146,73,
  	0,766,768,3,148,74,0,767,763,1,0,0,0,767,764,1,0,0,0,767,765,1,0,0,0,
  	767,766,1,0,0,0,768,141,1,0,0,0,769,770,5,112,0,0,770,143,1,0,0,0,771,
  	772,5,112,0,0,772,773,5,145,0,0,773,774,5,112,0,0,774,145,1,0,0,0,775,
  	776,5,112,0,0,776,777,5,145,0,0,777,147,1,0,0,0,778,779,5,145,0,0,779,
  	780,5,112,0,0,780,149,1,0,0,0,781,790,3,234,117,0,782,790,5,24,0,0,783,
  	784,5,146,0,0,784,790,3,152,76,0,785,786,5,133,0,0,786,787,3,128,64,0,
  	787,788,5,134,0,0,788,790,1,0,0,0,789,781,1,0,0,0,789,782,1,0,0,0,789,
  	783,1,0,0,0,789,785,1,0,0,0,790,151,1,0,0,0,791,805,3,154,77,0,792,801,
  	5,133,0,0,793,798,3,154,77,0,794,795,5,151,0,0,795,797,3,154,77,0,796,
  	794,1,0,0,0,797,800,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,802,1,
  	0,0,0,800,798,1,0,0,0,801,793,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,
  	803,805,5,134,0,0,804,791,1,0,0,0,804,792,1,0,0,0,805,153,1,0,0,0,806,
  	808,5,132,0,0,807,806,1,0,0,0,807,808,1,0,0,0,808,811,1,0,0,0,809,812,
  	3,234,117,0,810,812,5,24,0,0,811,809,1,0,0,0,811,810,1,0,0,0,812,155,
  	1,0,0,0,813,814,5,112,0,0,814,157,1,0,0,0,815,818,3,166,83,0,816,818,
  	3,160,80,0,817,815,1,0,0,0,817,816,1,0,0,0,818,159,1,0,0,0,819,820,5,
  	137,0,0,820,821,3,104,52,0,821,822,5,138,0,0,822,161,1,0,0,0,823,826,
  	3,168,84,0,824,826,3,164,82,0,825,823,1,0,0,0,825,824,1,0,0,0,826,163,
  	1,0,0,0,827,828,5,137,0,0,828,829,3,116,58,0,829,830,5,138,0,0,830,165,
  	1,0,0,0,831,833,5,133,0,0,832,834,3,170,85,0,833,832,1,0,0,0,834,835,
  	1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,837,1,0,0,0,837,838,5,134,
  	0,0,838,167,1,0,0,0,839,841,5,133,0,0,840,842,3,172,86,0,841,840,1,0,
  	0,0,842,843,1,0,0,0,843,841,1,0,0,0,843,844,1,0,0,0,844,845,1,0,0,0,845,
  	846,5,134,0,0,846,169,1,0,0,0,847,850,3,174,87,0,848,850,3,158,79,0,849,
  	847,1,0,0,0,849,848,1,0,0,0,850,171,1,0,0,0,851,854,3,174,87,0,852,854,
  	3,162,81,0,853,851,1,0,0,0,853,852,1,0,0,0,854,173,1,0,0,0,855,858,3,
  	178,89,0,856,858,3,180,90,0,857,855,1,0,0,0,857,856,1,0,0,0,858,175,1,
  	0,0,0,859,862,3,178,89,0,860,862,3,234,117,0,861,859,1,0,0,0,861,860,
  	1,0,0,0,862,177,1,0,0,0,863,864,7,4,0,0,864,179,1,0,0,0,865,872,3,234,
  	117,0,866,872,3,220,110,0,867,872,3,222,111,0,868,872,3,230,115,0,869,
  	872,3,238,119,0,870,872,3,182,91,0,871,865,1,0,0,0,871,866,1,0,0,0,871,
  	867,1,0,0,0,871,868,1,0,0,0,871,869,1,0,0,0,871,870,1,0,0,0,872,181,1,
  	0,0,0,873,874,5,133,0,0,874,875,5,134,0,0,875,183,1,0,0,0,876,877,3,186,
  	93,0,877,185,1,0,0,0,878,883,3,188,94,0,879,880,5,131,0,0,880,882,3,188,
  	94,0,881,879,1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,0,
  	884,187,1,0,0,0,885,883,1,0,0,0,886,891,3,190,95,0,887,888,5,130,0,0,
  	888,890,3,190,95,0,889,887,1,0,0,0,890,893,1,0,0,0,891,889,1,0,0,0,891,
  	892,1,0,0,0,892,189,1,0,0,0,893,891,1,0,0,0,894,897,3,192,96,0,895,896,
  	7,5,0,0,896,898,3,192,96,0,897,895,1,0,0,0,897,898,1,0,0,0,898,911,1,
  	0,0,0,899,901,3,192,96,0,900,902,5,96,0,0,901,900,1,0,0,0,901,902,1,0,
  	0,0,902,903,1,0,0,0,903,904,5,97,0,0,904,906,5,133,0,0,905,907,3,94,47,
  	0,906,905,1,0,0,0,906,907,1,0,0,0,907,908,1,0,0,0,908,909,5,134,0,0,909,
  	911,1,0,0,0,910,894,1,0,0,0,910,899,1,0,0,0,911,191,1,0,0,0,912,916,3,
  	198,99,0,913,915,3,194,97,0,914,913,1,0,0,0,915,918,1,0,0,0,916,914,1,
  	0,0,0,916,917,1,0,0,0,917,193,1,0,0,0,918,916,1,0,0,0,919,924,3,196,98,
  	0,920,921,7,6,0,0,921,923,3,200,100,0,922,920,1,0,0,0,923,926,1,0,0,0,
  	924,922,1,0,0,0,924,925,1,0,0,0,925,195,1,0,0,0,926,924,1,0,0,0,927,928,
  	7,7,0,0,928,932,3,198,99,0,929,932,3,226,113,0,930,932,3,228,114,0,931,
  	927,1,0,0,0,931,929,1,0,0,0,931,930,1,0,0,0,932,197,1,0,0,0,933,938,3,
  	200,100,0,934,935,7,6,0,0,935,937,3,200,100,0,936,934,1,0,0,0,937,940,
  	1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,199,1,0,0,0,940,938,1,0,0,
  	0,941,943,7,8,0,0,942,941,1,0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,
  	945,3,202,101,0,945,201,1,0,0,0,946,947,5,133,0,0,947,948,3,184,92,0,
  	948,949,5,134,0,0,949,957,1,0,0,0,950,957,3,204,102,0,951,957,3,218,109,
  	0,952,957,3,220,110,0,953,957,3,222,111,0,954,957,3,230,115,0,955,957,
  	3,178,89,0,956,946,1,0,0,0,956,950,1,0,0,0,956,951,1,0,0,0,956,952,1,
  	0,0,0,956,953,1,0,0,0,956,954,1,0,0,0,956,955,1,0,0,0,957,203,1,0,0,0,
  	958,1227,3,216,108,0,959,960,5,25,0,0,960,961,5,133,0,0,961,962,3,184,
  	92,0,962,963,5,134,0,0,963,1227,1,0,0,0,964,965,5,26,0,0,965,966,5,133,
  	0,0,966,967,3,184,92,0,967,968,5,134,0,0,968,1227,1,0,0,0,969,970,5,27,
  	0,0,970,971,5,133,0,0,971,972,3,184,92,0,972,973,5,145,0,0,973,974,3,
  	184,92,0,974,975,5,134,0,0,975,1227,1,0,0,0,976,977,5,28,0,0,977,978,
  	5,133,0,0,978,979,3,184,92,0,979,980,5,134,0,0,980,1227,1,0,0,0,981,982,
  	5,29,0,0,982,983,5,133,0,0,983,984,3,178,89,0,984,985,5,134,0,0,985,1227,
  	1,0,0,0,986,987,5,49,0,0,987,988,5,133,0,0,988,989,3,184,92,0,989,990,
  	5,134,0,0,990,1227,1,0,0,0,991,992,5,50,0,0,992,993,5,133,0,0,993,994,
  	3,184,92,0,994,995,5,134,0,0,995,1227,1,0,0,0,996,997,5,51,0,0,997,999,
  	5,133,0,0,998,1000,3,184,92,0,999,998,1,0,0,0,999,1000,1,0,0,0,1000,1001,
  	1,0,0,0,1001,1227,5,134,0,0,1002,1003,5,52,0,0,1003,1004,5,133,0,0,1004,
  	1227,5,134,0,0,1005,1006,5,53,0,0,1006,1007,5,133,0,0,1007,1008,3,184,
  	92,0,1008,1009,5,134,0,0,1009,1227,1,0,0,0,1010,1011,5,54,0,0,1011,1012,
  	5,133,0,0,1012,1013,3,184,92,0,1013,1014,5,134,0,0,1014,1227,1,0,0,0,
  	1015,1016,5,55,0,0,1016,1017,5,133,0,0,1017,1018,3,184,92,0,1018,1019,
  	5,134,0,0,1019,1227,1,0,0,0,1020,1021,5,56,0,0,1021,1022,5,133,0,0,1022,
  	1023,3,184,92,0,1023,1024,5,134,0,0,1024,1227,1,0,0,0,1025,1026,5,57,
  	0,0,1026,1028,5,133,0,0,1027,1029,3,94,47,0,1028,1027,1,0,0,0,1028,1029,
  	1,0,0,0,1029,1030,1,0,0,0,1030,1227,5,134,0,0,1031,1227,3,208,104,0,1032,
  	1033,5,58,0,0,1033,1034,5,133,0,0,1034,1035,3,184,92,0,1035,1036,5,134,
  	0,0,1036,1227,1,0,0,0,1037,1227,3,210,105,0,1038,1039,5,59,0,0,1039,1040,
  	5,133,0,0,1040,1041,3,184,92,0,1041,1042,5,134,0,0,1042,1227,1,0,0,0,
  	1043,1044,5,60,0,0,1044,1045,5,133,0,0,1045,1046,3,184,92,0,1046,1047,
  	5,134,0,0,1047,1227,1,0,0,0,1048,1049,5,61,0,0,1049,1050,5,133,0,0,1050,
  	1051,3,184,92,0,1051,1052,5,134,0,0,1052,1227,1,0,0,0,1053,1054,5,62,
  	0,0,1054,1055,5,133,0,0,1055,1056,3,184,92,0,1056,1057,5,145,0,0,1057,
  	1058,3,184,92,0,1058,1059,5,134,0,0,1059,1227,1,0,0,0,1060,1061,5,63,
  	0,0,1061,1062,5,133,0,0,1062,1063,3,184,92,0,1063,1064,5,145,0,0,1064,
  	1065,3,184,92,0,1065,1066,5,134,0,0,1066,1227,1,0,0,0,1067,1068,5,64,
  	0,0,1068,1069,5,133,0,0,1069,1070,3,184,92,0,1070,1071,5,145,0,0,1071,
  	1072,3,184,92,0,1072,1073,5,134,0,0,1073,1227,1,0,0,0,1074,1075,5,65,
  	0,0,1075,1076,5,133,0,0,1076,1077,3,184,92,0,1077,1078,5,145,0,0,1078,
  	1079,3,184,92,0,1079,1080,5,134,0,0,1080,1227,1,0,0,0,1081,1082,5,66,
  	0,0,1082,1083,5,133,0,0,1083,1084,3,184,92,0,1084,1085,5,145,0,0,1085,
  	1086,3,184,92,0,1086,1087,5,134,0,0,1087,1227,1,0,0,0,1088,1089,5,68,
  	0,0,1089,1090,5,133,0,0,1090,1091,3,184,92,0,1091,1092,5,134,0,0,1092,
  	1227,1,0,0,0,1093,1094,5,69,0,0,1094,1095,5,133,0,0,1095,1096,3,184,92,
  	0,1096,1097,5,134,0,0,1097,1227,1,0,0,0,1098,1099,5,70,0,0,1099,1100,
  	5,133,0,0,1100,1101,3,184,92,0,1101,1102,5,134,0,0,1102,1227,1,0,0,0,
  	1103,1104,5,71,0,0,1104,1105,5,133,0,0,1105,1106,3,184,92,0,1106,1107,
  	5,134,0,0,1107,1227,1,0,0,0,1108,1109,5,72,0,0,1109,1110,5,133,0,0,1110,
  	1111,3,184,92,0,1111,1112,5,134,0,0,1112,1227,1,0,0,0,1113,1114,5,73,
  	0,0,1114,1115,5,133,0,0,1115,1116,3,184,92,0,1116,1117,5,134,0,0,1117,
  	1227,1,0,0,0,1118,1119,5,74,0,0,1119,1120,5,133,0,0,1120,1121,3,184,92,
  	0,1121,1122,5,134,0,0,1122,1227,1,0,0,0,1123,1124,5,75,0,0,1124,1125,
  	5,133,0,0,1125,1126,3,184,92,0,1126,1127,5,134,0,0,1127,1227,1,0,0,0,
  	1128,1129,5,76,0,0,1129,1130,5,133,0,0,1130,1227,5,134,0,0,1131,1132,
  	5,77,0,0,1132,1133,5,133,0,0,1133,1227,5,134,0,0,1134,1135,5,78,0,0,1135,
  	1136,5,133,0,0,1136,1227,5,134,0,0,1137,1138,5,79,0,0,1138,1139,5,133,
  	0,0,1139,1140,3,184,92,0,1140,1141,5,134,0,0,1141,1227,1,0,0,0,1142,1143,
  	5,80,0,0,1143,1144,5,133,0,0,1144,1145,3,184,92,0,1145,1146,5,134,0,0,
  	1146,1227,1,0,0,0,1147,1148,5,81,0,0,1148,1149,5,133,0,0,1149,1150,3,
  	184,92,0,1150,1151,5,134,0,0,1151,1227,1,0,0,0,1152,1153,5,82,0,0,1153,
  	1154,5,133,0,0,1154,1155,3,184,92,0,1155,1156,5,134,0,0,1156,1227,1,0,
  	0,0,1157,1158,5,83,0,0,1158,1159,5,133,0,0,1159,1160,3,184,92,0,1160,
  	1161,5,134,0,0,1161,1227,1,0,0,0,1162,1163,5,84,0,0,1163,1165,5,133,0,
  	0,1164,1166,3,94,47,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,1167,1,
  	0,0,0,1167,1227,5,134,0,0,1168,1169,5,85,0,0,1169,1170,5,133,0,0,1170,
  	1171,3,184,92,0,1171,1172,5,145,0,0,1172,1173,3,184,92,0,1173,1174,5,
  	145,0,0,1174,1175,3,184,92,0,1175,1176,5,134,0,0,1176,1227,1,0,0,0,1177,
  	1178,5,86,0,0,1178,1179,5,133,0,0,1179,1180,3,184,92,0,1180,1181,5,145,
  	0,0,1181,1182,3,184,92,0,1182,1183,5,134,0,0,1183,1227,1,0,0,0,1184,1185,
  	5,87,0,0,1185,1186,5,133,0,0,1186,1187,3,184,92,0,1187,1188,5,145,0,0,
  	1188,1189,3,184,92,0,1189,1190,5,134,0,0,1190,1227,1,0,0,0,1191,1192,
  	5,30,0,0,1192,1193,5,133,0,0,1193,1194,3,184,92,0,1194,1195,5,145,0,0,
  	1195,1196,3,184,92,0,1196,1197,5,134,0,0,1197,1227,1,0,0,0,1198,1199,
  	5,31,0,0,1199,1200,5,133,0,0,1200,1201,3,184,92,0,1201,1202,5,134,0,0,
  	1202,1227,1,0,0,0,1203,1204,5,32,0,0,1204,1205,5,133,0,0,1205,1206,3,
  	184,92,0,1206,1207,5,134,0,0,1207,1227,1,0,0,0,1208,1209,5,33,0,0,1209,
  	1210,5,133,0,0,1210,1211,3,184,92,0,1211,1212,5,134,0,0,1212,1227,1,0,
  	0,0,1213,1214,5,34,0,0,1214,1215,5,133,0,0,1215,1216,3,184,92,0,1216,
  	1217,5,134,0,0,1217,1227,1,0,0,0,1218,1219,5,88,0,0,1219,1220,5,133,0,
  	0,1220,1221,3,184,92,0,1221,1222,5,134,0,0,1222,1227,1,0,0,0,1223,1227,
  	3,206,103,0,1224,1227,3,212,106,0,1225,1227,3,214,107,0,1226,958,1,0,
  	0,0,1226,959,1,0,0,0,1226,964,1,0,0,0,1226,969,1,0,0,0,1226,976,1,0,0,
  	0,1226,981,1,0,0,0,1226,986,1,0,0,0,1226,991,1,0,0,0,1226,996,1,0,0,0,
  	1226,1002,1,0,0,0,1226,1005,1,0,0,0,1226,1010,1,0,0,0,1226,1015,1,0,0,
  	0,1226,1020,1,0,0,0,1226,1025,1,0,0,0,1226,1031,1,0,0,0,1226,1032,1,0,
  	0,0,1226,1037,1,0,0,0,1226,1038,1,0,0,0,1226,1043,1,0,0,0,1226,1048,1,
  	0,0,0,1226,1053,1,0,0,0,1226,1060,1,0,0,0,1226,1067,1,0,0,0,1226,1074,
  	1,0,0,0,1226,1081,1,0,0,0,1226,1088,1,0,0,0,1226,1093,1,0,0,0,1226,1098,
  	1,0,0,0,1226,1103,1,0,0,0,1226,1108,1,0,0,0,1226,1113,1,0,0,0,1226,1118,
  	1,0,0,0,1226,1123,1,0,0,0,1226,1128,1,0,0,0,1226,1131,1,0,0,0,1226,1134,
  	1,0,0,0,1226,1137,1,0,0,0,1226,1142,1,0,0,0,1226,1147,1,0,0,0,1226,1152,
  	1,0,0,0,1226,1157,1,0,0,0,1226,1162,1,0,0,0,1226,1168,1,0,0,0,1226,1177,
  	1,0,0,0,1226,1184,1,0,0,0,1226,1191,1,0,0,0,1226,1198,1,0,0,0,1226,1203,
  	1,0,0,0,1226,1208,1,0,0,0,1226,1213,1,0,0,0,1226,1218,1,0,0,0,1226,1223,
  	1,0,0,0,1226,1224,1,0,0,0,1226,1225,1,0,0,0,1227,205,1,0,0,0,1228,1229,
  	5,35,0,0,1229,1230,5,133,0,0,1230,1231,3,184,92,0,1231,1232,5,145,0,0,
  	1232,1235,3,184,92,0,1233,1234,5,145,0,0,1234,1236,3,184,92,0,1235,1233,
  	1,0,0,0,1235,1236,1,0,0,0,1236,1237,1,0,0,0,1237,1238,5,134,0,0,1238,
  	207,1,0,0,0,1239,1240,5,36,0,0,1240,1241,5,133,0,0,1241,1242,3,184,92,
  	0,1242,1243,5,145,0,0,1243,1246,3,184,92,0,1244,1245,5,145,0,0,1245,1247,
  	3,184,92,0,1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,1248,1,0,0,0,1248,
  	1249,5,134,0,0,1249,209,1,0,0,0,1250,1251,5,67,0,0,1251,1252,5,133,0,
  	0,1252,1253,3,184,92,0,1253,1254,5,145,0,0,1254,1255,3,184,92,0,1255,
  	1256,5,145,0,0,1256,1259,3,184,92,0,1257,1258,5,145,0,0,1258,1260,3,184,
  	92,0,1259,1257,1,0,0,0,1259,1260,1,0,0,0,1260,1261,1,0,0,0,1261,1262,
  	5,134,0,0,1262,211,1,0,0,0,1263,1264,5,98,0,0,1264,1265,3,52,26,0,1265,
  	213,1,0,0,0,1266,1267,5,96,0,0,1267,1268,5,98,0,0,1268,1269,3,52,26,0,
  	1269,215,1,0,0,0,1270,1271,5,89,0,0,1271,1273,5,133,0,0,1272,1274,5,5,
  	0,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1277,1,0,0,0,1275,1278,5,
  	143,0,0,1276,1278,3,184,92,0,1277,1275,1,0,0,0,1277,1276,1,0,0,0,1278,
  	1279,1,0,0,0,1279,1335,5,134,0,0,1280,1281,5,90,0,0,1281,1283,5,133,0,
  	0,1282,1284,5,5,0,0,1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,1285,1,0,
  	0,0,1285,1286,3,184,92,0,1286,1287,5,134,0,0,1287,1335,1,0,0,0,1288,1289,
  	5,91,0,0,1289,1291,5,133,0,0,1290,1292,5,5,0,0,1291,1290,1,0,0,0,1291,
  	1292,1,0,0,0,1292,1293,1,0,0,0,1293,1294,3,184,92,0,1294,1295,5,134,0,
  	0,1295,1335,1,0,0,0,1296,1297,5,92,0,0,1297,1299,5,133,0,0,1298,1300,
  	5,5,0,0,1299,1298,1,0,0,0,1299,1300,1,0,0,0,1300,1301,1,0,0,0,1301,1302,
  	3,184,92,0,1302,1303,5,134,0,0,1303,1335,1,0,0,0,1304,1305,5,93,0,0,1305,
  	1307,5,133,0,0,1306,1308,5,5,0,0,1307,1306,1,0,0,0,1307,1308,1,0,0,0,
  	1308,1309,1,0,0,0,1309,1310,3,184,92,0,1310,1311,5,134,0,0,1311,1335,
  	1,0,0,0,1312,1313,5,94,0,0,1313,1315,5,133,0,0,1314,1316,5,5,0,0,1315,
  	1314,1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1318,3,184,92,0,
  	1318,1319,5,134,0,0,1319,1335,1,0,0,0,1320,1321,5,95,0,0,1321,1323,5,
  	133,0,0,1322,1324,5,5,0,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1325,
  	1,0,0,0,1325,1330,3,184,92,0,1326,1327,5,139,0,0,1327,1328,5,99,0,0,1328,
  	1329,5,148,0,0,1329,1331,3,232,116,0,1330,1326,1,0,0,0,1330,1331,1,0,
  	0,0,1331,1332,1,0,0,0,1332,1333,5,134,0,0,1333,1335,1,0,0,0,1334,1270,
  	1,0,0,0,1334,1280,1,0,0,0,1334,1288,1,0,0,0,1334,1296,1,0,0,0,1334,1304,
  	1,0,0,0,1334,1312,1,0,0,0,1334,1320,1,0,0,0,1335,217,1,0,0,0,1336,1338,
  	3,234,117,0,1337,1339,3,92,46,0,1338,1337,1,0,0,0,1338,1339,1,0,0,0,1339,
  	219,1,0,0,0,1340,1344,3,232,116,0,1341,1345,5,111,0,0,1342,1343,5,126,
  	0,0,1343,1345,3,234,117,0,1344,1341,1,0,0,0,1344,1342,1,0,0,0,1344,1345,
  	1,0,0,0,1345,221,1,0,0,0,1346,1350,3,224,112,0,1347,1350,3,226,113,0,
  	1348,1350,3,228,114,0,1349,1346,1,0,0,0,1349,1347,1,0,0,0,1349,1348,1,
  	0,0,0,1350,223,1,0,0,0,1351,1352,7,9,0,0,1352,225,1,0,0,0,1353,1354,7,
  	10,0,0,1354,227,1,0,0,0,1355,1356,7,11,0,0,1356,229,1,0,0,0,1357,1358,
  	7,12,0,0,1358,231,1,0,0,0,1359,1360,7,13,0,0,1360,233,1,0,0,0,1361,1364,
  	5,105,0,0,1362,1364,3,236,118,0,1363,1361,1,0,0,0,1363,1362,1,0,0,0,1364,
  	235,1,0,0,0,1365,1366,7,14,0,0,1366,237,1,0,0,0,1367,1370,5,108,0,0,1368,
  	1370,3,240,120,0,1369,1367,1,0,0,0,1369,1368,1,0,0,0,1370,239,1,0,0,0,
  	1371,1372,5,137,0,0,1372,1373,5,138,0,0,1373,241,1,0,0,0,129,247,254,
  	256,270,283,288,291,302,309,318,324,328,334,337,342,346,354,362,367,372,
  	375,378,381,388,396,401,407,416,425,429,433,435,445,450,454,460,465,470,
  	475,478,483,487,498,509,526,533,542,550,559,569,579,591,598,602,611,616,
  	623,627,636,639,647,651,656,663,674,677,681,686,690,695,702,705,713,722,
  	734,742,747,750,761,767,789,798,801,804,807,811,817,825,835,843,849,853,
  	857,861,871,883,891,897,901,906,910,916,924,931,938,942,956,999,1028,
  	1165,1226,1235,1246,1259,1273,1277,1283,1291,1299,1307,1315,1323,1330,
  	1334,1338,1344,1349,1363,1369
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sparqlqueryparserParserStaticData = staticData.release();
}

}

SparqlQueryParser::SparqlQueryParser(TokenStream *input) : SparqlQueryParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

SparqlQueryParser::SparqlQueryParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  SparqlQueryParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *sparqlqueryparserParserStaticData->atn, sparqlqueryparserParserStaticData->decisionToDFA, sparqlqueryparserParserStaticData->sharedContextCache, options);
}

SparqlQueryParser::~SparqlQueryParser() {
  delete _interpreter;
}

const atn::ATN& SparqlQueryParser::getATN() const {
  return *sparqlqueryparserParserStaticData->atn;
}

std::string SparqlQueryParser::getGrammarFileName() const {
  return "SparqlQueryParser.g4";
}

const std::vector<std::string>& SparqlQueryParser::getRuleNames() const {
  return sparqlqueryparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& SparqlQueryParser::getVocabulary() const {
  return sparqlqueryparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SparqlQueryParser::getSerializedATN() const {
  return sparqlqueryparserParserStaticData->serializedATN;
}


//----------------- QueryContext ------------------------------------------------------------------

SparqlQueryParser::QueryContext::QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PrologueContext* SparqlQueryParser::QueryContext::prologue() {
  return getRuleContext<SparqlQueryParser::PrologueContext>(0);
}

SparqlQueryParser::ValuesClauseContext* SparqlQueryParser::QueryContext::valuesClause() {
  return getRuleContext<SparqlQueryParser::ValuesClauseContext>(0);
}

tree::TerminalNode* SparqlQueryParser::QueryContext::EOF() {
  return getToken(SparqlQueryParser::EOF, 0);
}

SparqlQueryParser::SelectQueryContext* SparqlQueryParser::QueryContext::selectQuery() {
  return getRuleContext<SparqlQueryParser::SelectQueryContext>(0);
}

SparqlQueryParser::ConstructQueryContext* SparqlQueryParser::QueryContext::constructQuery() {
  return getRuleContext<SparqlQueryParser::ConstructQueryContext>(0);
}

SparqlQueryParser::DescribeQueryContext* SparqlQueryParser::QueryContext::describeQuery() {
  return getRuleContext<SparqlQueryParser::DescribeQueryContext>(0);
}

SparqlQueryParser::AskQueryContext* SparqlQueryParser::QueryContext::askQuery() {
  return getRuleContext<SparqlQueryParser::AskQueryContext>(0);
}


size_t SparqlQueryParser::QueryContext::getRuleIndex() const {
  return SparqlQueryParser::RuleQuery;
}


std::any SparqlQueryParser::QueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitQuery(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::QueryContext* SparqlQueryParser::query() {
  QueryContext *_localctx = _tracker.createInstance<QueryContext>(_ctx, getState());
  enterRule(_localctx, 0, SparqlQueryParser::RuleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(242);
    prologue();
    setState(247);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::SELECT: {
        setState(243);
        selectQuery();
        break;
      }

      case SparqlQueryParser::CONSTRUCT: {
        setState(244);
        constructQuery();
        break;
      }

      case SparqlQueryParser::DESCRIBE: {
        setState(245);
        describeQuery();
        break;
      }

      case SparqlQueryParser::ASK: {
        setState(246);
        askQuery();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(249);
    valuesClause();
    setState(250);
    match(SparqlQueryParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrologueContext ------------------------------------------------------------------

SparqlQueryParser::PrologueContext::PrologueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::BaseDeclContext *> SparqlQueryParser::PrologueContext::baseDecl() {
  return getRuleContexts<SparqlQueryParser::BaseDeclContext>();
}

SparqlQueryParser::BaseDeclContext* SparqlQueryParser::PrologueContext::baseDecl(size_t i) {
  return getRuleContext<SparqlQueryParser::BaseDeclContext>(i);
}

std::vector<SparqlQueryParser::PrefixDeclContext *> SparqlQueryParser::PrologueContext::prefixDecl() {
  return getRuleContexts<SparqlQueryParser::PrefixDeclContext>();
}

SparqlQueryParser::PrefixDeclContext* SparqlQueryParser::PrologueContext::prefixDecl(size_t i) {
  return getRuleContext<SparqlQueryParser::PrefixDeclContext>(i);
}


size_t SparqlQueryParser::PrologueContext::getRuleIndex() const {
  return SparqlQueryParser::RulePrologue;
}


std::any SparqlQueryParser::PrologueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPrologue(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PrologueContext* SparqlQueryParser::prologue() {
  PrologueContext *_localctx = _tracker.createInstance<PrologueContext>(_ctx, getState());
  enterRule(_localctx, 2, SparqlQueryParser::RulePrologue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(256);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::BASE

    || _la == SparqlQueryParser::PREFIX) {
      setState(254);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SparqlQueryParser::BASE: {
          setState(252);
          baseDecl();
          break;
        }

        case SparqlQueryParser::PREFIX: {
          setState(253);
          prefixDecl();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(258);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseDeclContext ------------------------------------------------------------------

SparqlQueryParser::BaseDeclContext::BaseDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::BaseDeclContext::BASE() {
  return getToken(SparqlQueryParser::BASE, 0);
}

tree::TerminalNode* SparqlQueryParser::BaseDeclContext::IRIREF() {
  return getToken(SparqlQueryParser::IRIREF, 0);
}


size_t SparqlQueryParser::BaseDeclContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBaseDecl;
}


std::any SparqlQueryParser::BaseDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBaseDecl(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BaseDeclContext* SparqlQueryParser::baseDecl() {
  BaseDeclContext *_localctx = _tracker.createInstance<BaseDeclContext>(_ctx, getState());
  enterRule(_localctx, 4, SparqlQueryParser::RuleBaseDecl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(259);
    match(SparqlQueryParser::BASE);
    setState(260);
    match(SparqlQueryParser::IRIREF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrefixDeclContext ------------------------------------------------------------------

SparqlQueryParser::PrefixDeclContext::PrefixDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PrefixDeclContext::PREFIX() {
  return getToken(SparqlQueryParser::PREFIX, 0);
}

tree::TerminalNode* SparqlQueryParser::PrefixDeclContext::PNAME_NS() {
  return getToken(SparqlQueryParser::PNAME_NS, 0);
}

tree::TerminalNode* SparqlQueryParser::PrefixDeclContext::IRIREF() {
  return getToken(SparqlQueryParser::IRIREF, 0);
}


size_t SparqlQueryParser::PrefixDeclContext::getRuleIndex() const {
  return SparqlQueryParser::RulePrefixDecl;
}


std::any SparqlQueryParser::PrefixDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPrefixDecl(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PrefixDeclContext* SparqlQueryParser::prefixDecl() {
  PrefixDeclContext *_localctx = _tracker.createInstance<PrefixDeclContext>(_ctx, getState());
  enterRule(_localctx, 6, SparqlQueryParser::RulePrefixDecl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(262);
    match(SparqlQueryParser::PREFIX);
    setState(263);
    match(SparqlQueryParser::PNAME_NS);
    setState(264);
    match(SparqlQueryParser::IRIREF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectQueryContext ------------------------------------------------------------------

SparqlQueryParser::SelectQueryContext::SelectQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::SelectClauseContext* SparqlQueryParser::SelectQueryContext::selectClause() {
  return getRuleContext<SparqlQueryParser::SelectClauseContext>(0);
}

SparqlQueryParser::WhereClauseContext* SparqlQueryParser::SelectQueryContext::whereClause() {
  return getRuleContext<SparqlQueryParser::WhereClauseContext>(0);
}

SparqlQueryParser::SolutionModifierContext* SparqlQueryParser::SelectQueryContext::solutionModifier() {
  return getRuleContext<SparqlQueryParser::SolutionModifierContext>(0);
}

std::vector<SparqlQueryParser::DatasetClauseContext *> SparqlQueryParser::SelectQueryContext::datasetClause() {
  return getRuleContexts<SparqlQueryParser::DatasetClauseContext>();
}

SparqlQueryParser::DatasetClauseContext* SparqlQueryParser::SelectQueryContext::datasetClause(size_t i) {
  return getRuleContext<SparqlQueryParser::DatasetClauseContext>(i);
}


size_t SparqlQueryParser::SelectQueryContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSelectQuery;
}


std::any SparqlQueryParser::SelectQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSelectQuery(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::SelectQueryContext* SparqlQueryParser::selectQuery() {
  SelectQueryContext *_localctx = _tracker.createInstance<SelectQueryContext>(_ctx, getState());
  enterRule(_localctx, 8, SparqlQueryParser::RuleSelectQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(266);
    selectClause();
    setState(270);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::FROM) {
      setState(267);
      datasetClause();
      setState(272);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(273);
    whereClause();
    setState(274);
    solutionModifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubSelectContext ------------------------------------------------------------------

SparqlQueryParser::SubSelectContext::SubSelectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::SelectClauseContext* SparqlQueryParser::SubSelectContext::selectClause() {
  return getRuleContext<SparqlQueryParser::SelectClauseContext>(0);
}

SparqlQueryParser::WhereClauseContext* SparqlQueryParser::SubSelectContext::whereClause() {
  return getRuleContext<SparqlQueryParser::WhereClauseContext>(0);
}

SparqlQueryParser::SolutionModifierContext* SparqlQueryParser::SubSelectContext::solutionModifier() {
  return getRuleContext<SparqlQueryParser::SolutionModifierContext>(0);
}

SparqlQueryParser::ValuesClauseContext* SparqlQueryParser::SubSelectContext::valuesClause() {
  return getRuleContext<SparqlQueryParser::ValuesClauseContext>(0);
}


size_t SparqlQueryParser::SubSelectContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSubSelect;
}


std::any SparqlQueryParser::SubSelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSubSelect(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::SubSelectContext* SparqlQueryParser::subSelect() {
  SubSelectContext *_localctx = _tracker.createInstance<SubSelectContext>(_ctx, getState());
  enterRule(_localctx, 10, SparqlQueryParser::RuleSubSelect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(276);
    selectClause();
    setState(277);
    whereClause();
    setState(278);
    solutionModifier();
    setState(279);
    valuesClause();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectClauseContext ------------------------------------------------------------------

SparqlQueryParser::SelectClauseContext::SelectClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::SelectClauseContext::SELECT() {
  return getToken(SparqlQueryParser::SELECT, 0);
}

tree::TerminalNode* SparqlQueryParser::SelectClauseContext::ASTERISK() {
  return getToken(SparqlQueryParser::ASTERISK, 0);
}

SparqlQueryParser::SelectModifierContext* SparqlQueryParser::SelectClauseContext::selectModifier() {
  return getRuleContext<SparqlQueryParser::SelectModifierContext>(0);
}

std::vector<SparqlQueryParser::SelectVariablesContext *> SparqlQueryParser::SelectClauseContext::selectVariables() {
  return getRuleContexts<SparqlQueryParser::SelectVariablesContext>();
}

SparqlQueryParser::SelectVariablesContext* SparqlQueryParser::SelectClauseContext::selectVariables(size_t i) {
  return getRuleContext<SparqlQueryParser::SelectVariablesContext>(i);
}


size_t SparqlQueryParser::SelectClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSelectClause;
}


std::any SparqlQueryParser::SelectClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSelectClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::SelectClauseContext* SparqlQueryParser::selectClause() {
  SelectClauseContext *_localctx = _tracker.createInstance<SelectClauseContext>(_ctx, getState());
  enterRule(_localctx, 12, SparqlQueryParser::RuleSelectClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(281);
    match(SparqlQueryParser::SELECT);
    setState(283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::DISTINCT

    || _la == SparqlQueryParser::REDUCED) {
      setState(282);
      selectModifier();
    }
    setState(291);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2:
      case SparqlQueryParser::OPEN_BRACE: {
        setState(286); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(285);
          selectVariables();
          setState(288); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 109) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 109)) & 16777219) != 0));
        break;
      }

      case SparqlQueryParser::ASTERISK: {
        setState(290);
        match(SparqlQueryParser::ASTERISK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectModifierContext ------------------------------------------------------------------

SparqlQueryParser::SelectModifierContext::SelectModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::SelectModifierContext::DISTINCT() {
  return getToken(SparqlQueryParser::DISTINCT, 0);
}

tree::TerminalNode* SparqlQueryParser::SelectModifierContext::REDUCED() {
  return getToken(SparqlQueryParser::REDUCED, 0);
}


size_t SparqlQueryParser::SelectModifierContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSelectModifier;
}


std::any SparqlQueryParser::SelectModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSelectModifier(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::SelectModifierContext* SparqlQueryParser::selectModifier() {
  SelectModifierContext *_localctx = _tracker.createInstance<SelectModifierContext>(_ctx, getState());
  enterRule(_localctx, 14, SparqlQueryParser::RuleSelectModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(293);
    _la = _input->LA(1);
    if (!(_la == SparqlQueryParser::DISTINCT

    || _la == SparqlQueryParser::REDUCED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectVariablesContext ------------------------------------------------------------------

SparqlQueryParser::SelectVariablesContext::SelectVariablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t SparqlQueryParser::SelectVariablesContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSelectVariables;
}

void SparqlQueryParser::SelectVariablesContext::copyFrom(SelectVariablesContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SelectSingleVariableContext ------------------------------------------------------------------

SparqlQueryParser::VarContext* SparqlQueryParser::SelectSingleVariableContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

SparqlQueryParser::SelectSingleVariableContext::SelectSingleVariableContext(SelectVariablesContext *ctx) { copyFrom(ctx); }


std::any SparqlQueryParser::SelectSingleVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSelectSingleVariable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectExpressionAsVariableContext ------------------------------------------------------------------

tree::TerminalNode* SparqlQueryParser::SelectExpressionAsVariableContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::SelectExpressionAsVariableContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::SelectExpressionAsVariableContext::AS() {
  return getToken(SparqlQueryParser::AS, 0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::SelectExpressionAsVariableContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

tree::TerminalNode* SparqlQueryParser::SelectExpressionAsVariableContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

SparqlQueryParser::SelectExpressionAsVariableContext::SelectExpressionAsVariableContext(SelectVariablesContext *ctx) { copyFrom(ctx); }


std::any SparqlQueryParser::SelectExpressionAsVariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSelectExpressionAsVariable(this);
  else
    return visitor->visitChildren(this);
}
SparqlQueryParser::SelectVariablesContext* SparqlQueryParser::selectVariables() {
  SelectVariablesContext *_localctx = _tracker.createInstance<SelectVariablesContext>(_ctx, getState());
  enterRule(_localctx, 16, SparqlQueryParser::RuleSelectVariables);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(302);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        _localctx = _tracker.createInstance<SparqlQueryParser::SelectSingleVariableContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(295);
        var();
        break;
      }

      case SparqlQueryParser::OPEN_BRACE: {
        _localctx = _tracker.createInstance<SparqlQueryParser::SelectExpressionAsVariableContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(296);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(297);
        expression();
        setState(298);
        match(SparqlQueryParser::AS);
        setState(299);
        var();
        setState(300);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructQueryContext ------------------------------------------------------------------

SparqlQueryParser::ConstructQueryContext::ConstructQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ConstructQueryContext::CONSTRUCT() {
  return getToken(SparqlQueryParser::CONSTRUCT, 0);
}

SparqlQueryParser::ConstructTemplateContext* SparqlQueryParser::ConstructQueryContext::constructTemplate() {
  return getRuleContext<SparqlQueryParser::ConstructTemplateContext>(0);
}

SparqlQueryParser::WhereClauseContext* SparqlQueryParser::ConstructQueryContext::whereClause() {
  return getRuleContext<SparqlQueryParser::WhereClauseContext>(0);
}

SparqlQueryParser::SolutionModifierContext* SparqlQueryParser::ConstructQueryContext::solutionModifier() {
  return getRuleContext<SparqlQueryParser::SolutionModifierContext>(0);
}

tree::TerminalNode* SparqlQueryParser::ConstructQueryContext::WHERE() {
  return getToken(SparqlQueryParser::WHERE, 0);
}

tree::TerminalNode* SparqlQueryParser::ConstructQueryContext::OPEN_CURLY_BRACE() {
  return getToken(SparqlQueryParser::OPEN_CURLY_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::ConstructQueryContext::CLOSE_CURLY_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_CURLY_BRACE, 0);
}

std::vector<SparqlQueryParser::DatasetClauseContext *> SparqlQueryParser::ConstructQueryContext::datasetClause() {
  return getRuleContexts<SparqlQueryParser::DatasetClauseContext>();
}

SparqlQueryParser::DatasetClauseContext* SparqlQueryParser::ConstructQueryContext::datasetClause(size_t i) {
  return getRuleContext<SparqlQueryParser::DatasetClauseContext>(i);
}

SparqlQueryParser::TriplesTemplateContext* SparqlQueryParser::ConstructQueryContext::triplesTemplate() {
  return getRuleContext<SparqlQueryParser::TriplesTemplateContext>(0);
}


size_t SparqlQueryParser::ConstructQueryContext::getRuleIndex() const {
  return SparqlQueryParser::RuleConstructQuery;
}


std::any SparqlQueryParser::ConstructQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitConstructQuery(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ConstructQueryContext* SparqlQueryParser::constructQuery() {
  ConstructQueryContext *_localctx = _tracker.createInstance<ConstructQueryContext>(_ctx, getState());
  enterRule(_localctx, 18, SparqlQueryParser::RuleConstructQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(304);
    match(SparqlQueryParser::CONSTRUCT);
    setState(328);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::OPEN_CURLY_BRACE: {
        setState(305);
        constructTemplate();
        setState(309);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == SparqlQueryParser::FROM) {
          setState(306);
          datasetClause();
          setState(311);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(312);
        whereClause();
        setState(313);
        solutionModifier();
        break;
      }

      case SparqlQueryParser::FROM:
      case SparqlQueryParser::WHERE: {
        setState(318);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == SparqlQueryParser::FROM) {
          setState(315);
          datasetClause();
          setState(320);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(321);
        match(SparqlQueryParser::WHERE);
        setState(322);
        match(SparqlQueryParser::OPEN_CURLY_BRACE);
        setState(324);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::TRUE

        || _la == SparqlQueryParser::FALSE || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & 4564451263) != 0)) {
          setState(323);
          triplesTemplate();
        }
        setState(326);
        match(SparqlQueryParser::CLOSE_CURLY_BRACE);
        setState(327);
        solutionModifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DescribeQueryContext ------------------------------------------------------------------

SparqlQueryParser::DescribeQueryContext::DescribeQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::DescribeQueryContext::DESCRIBE() {
  return getToken(SparqlQueryParser::DESCRIBE, 0);
}

SparqlQueryParser::SolutionModifierContext* SparqlQueryParser::DescribeQueryContext::solutionModifier() {
  return getRuleContext<SparqlQueryParser::SolutionModifierContext>(0);
}

tree::TerminalNode* SparqlQueryParser::DescribeQueryContext::ASTERISK() {
  return getToken(SparqlQueryParser::ASTERISK, 0);
}

std::vector<SparqlQueryParser::DatasetClauseContext *> SparqlQueryParser::DescribeQueryContext::datasetClause() {
  return getRuleContexts<SparqlQueryParser::DatasetClauseContext>();
}

SparqlQueryParser::DatasetClauseContext* SparqlQueryParser::DescribeQueryContext::datasetClause(size_t i) {
  return getRuleContext<SparqlQueryParser::DatasetClauseContext>(i);
}

SparqlQueryParser::WhereClauseContext* SparqlQueryParser::DescribeQueryContext::whereClause() {
  return getRuleContext<SparqlQueryParser::WhereClauseContext>(0);
}

std::vector<SparqlQueryParser::VarOrIRIContext *> SparqlQueryParser::DescribeQueryContext::varOrIRI() {
  return getRuleContexts<SparqlQueryParser::VarOrIRIContext>();
}

SparqlQueryParser::VarOrIRIContext* SparqlQueryParser::DescribeQueryContext::varOrIRI(size_t i) {
  return getRuleContext<SparqlQueryParser::VarOrIRIContext>(i);
}


size_t SparqlQueryParser::DescribeQueryContext::getRuleIndex() const {
  return SparqlQueryParser::RuleDescribeQuery;
}


std::any SparqlQueryParser::DescribeQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitDescribeQuery(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::DescribeQueryContext* SparqlQueryParser::describeQuery() {
  DescribeQueryContext *_localctx = _tracker.createInstance<DescribeQueryContext>(_ctx, getState());
  enterRule(_localctx, 20, SparqlQueryParser::RuleDescribeQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(330);
    match(SparqlQueryParser::DESCRIBE);
    setState(337);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        setState(332); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(331);
          varOrIRI();
          setState(334); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & 55) != 0));
        break;
      }

      case SparqlQueryParser::ASTERISK: {
        setState(336);
        match(SparqlQueryParser::ASTERISK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(342);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::FROM) {
      setState(339);
      datasetClause();
      setState(344);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(346);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::WHERE || _la == SparqlQueryParser::OPEN_CURLY_BRACE) {
      setState(345);
      whereClause();
    }
    setState(348);
    solutionModifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AskQueryContext ------------------------------------------------------------------

SparqlQueryParser::AskQueryContext::AskQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::AskQueryContext::ASK() {
  return getToken(SparqlQueryParser::ASK, 0);
}

SparqlQueryParser::WhereClauseContext* SparqlQueryParser::AskQueryContext::whereClause() {
  return getRuleContext<SparqlQueryParser::WhereClauseContext>(0);
}

SparqlQueryParser::SolutionModifierContext* SparqlQueryParser::AskQueryContext::solutionModifier() {
  return getRuleContext<SparqlQueryParser::SolutionModifierContext>(0);
}

std::vector<SparqlQueryParser::DatasetClauseContext *> SparqlQueryParser::AskQueryContext::datasetClause() {
  return getRuleContexts<SparqlQueryParser::DatasetClauseContext>();
}

SparqlQueryParser::DatasetClauseContext* SparqlQueryParser::AskQueryContext::datasetClause(size_t i) {
  return getRuleContext<SparqlQueryParser::DatasetClauseContext>(i);
}


size_t SparqlQueryParser::AskQueryContext::getRuleIndex() const {
  return SparqlQueryParser::RuleAskQuery;
}


std::any SparqlQueryParser::AskQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitAskQuery(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::AskQueryContext* SparqlQueryParser::askQuery() {
  AskQueryContext *_localctx = _tracker.createInstance<AskQueryContext>(_ctx, getState());
  enterRule(_localctx, 22, SparqlQueryParser::RuleAskQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(350);
    match(SparqlQueryParser::ASK);
    setState(354);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::FROM) {
      setState(351);
      datasetClause();
      setState(356);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(357);
    whereClause();
    setState(358);
    solutionModifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatasetClauseContext ------------------------------------------------------------------

SparqlQueryParser::DatasetClauseContext::DatasetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::DatasetClauseContext::FROM() {
  return getToken(SparqlQueryParser::FROM, 0);
}

SparqlQueryParser::IriContext* SparqlQueryParser::DatasetClauseContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

tree::TerminalNode* SparqlQueryParser::DatasetClauseContext::NAMED() {
  return getToken(SparqlQueryParser::NAMED, 0);
}


size_t SparqlQueryParser::DatasetClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleDatasetClause;
}


std::any SparqlQueryParser::DatasetClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitDatasetClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::DatasetClauseContext* SparqlQueryParser::datasetClause() {
  DatasetClauseContext *_localctx = _tracker.createInstance<DatasetClauseContext>(_ctx, getState());
  enterRule(_localctx, 24, SparqlQueryParser::RuleDatasetClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(360);
    match(SparqlQueryParser::FROM);
    setState(362);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::NAMED) {
      setState(361);
      match(SparqlQueryParser::NAMED);
    }
    setState(364);
    iri();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereClauseContext ------------------------------------------------------------------

SparqlQueryParser::WhereClauseContext::WhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::WhereClauseContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}

tree::TerminalNode* SparqlQueryParser::WhereClauseContext::WHERE() {
  return getToken(SparqlQueryParser::WHERE, 0);
}


size_t SparqlQueryParser::WhereClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleWhereClause;
}


std::any SparqlQueryParser::WhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitWhereClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::WhereClauseContext* SparqlQueryParser::whereClause() {
  WhereClauseContext *_localctx = _tracker.createInstance<WhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 26, SparqlQueryParser::RuleWhereClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(367);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::WHERE) {
      setState(366);
      match(SparqlQueryParser::WHERE);
    }
    setState(369);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SolutionModifierContext ------------------------------------------------------------------

SparqlQueryParser::SolutionModifierContext::SolutionModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::GroupClauseContext* SparqlQueryParser::SolutionModifierContext::groupClause() {
  return getRuleContext<SparqlQueryParser::GroupClauseContext>(0);
}

SparqlQueryParser::HavingClauseContext* SparqlQueryParser::SolutionModifierContext::havingClause() {
  return getRuleContext<SparqlQueryParser::HavingClauseContext>(0);
}

SparqlQueryParser::OrderClauseContext* SparqlQueryParser::SolutionModifierContext::orderClause() {
  return getRuleContext<SparqlQueryParser::OrderClauseContext>(0);
}

SparqlQueryParser::LimitOffsetClausesContext* SparqlQueryParser::SolutionModifierContext::limitOffsetClauses() {
  return getRuleContext<SparqlQueryParser::LimitOffsetClausesContext>(0);
}


size_t SparqlQueryParser::SolutionModifierContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSolutionModifier;
}


std::any SparqlQueryParser::SolutionModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSolutionModifier(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::SolutionModifierContext* SparqlQueryParser::solutionModifier() {
  SolutionModifierContext *_localctx = _tracker.createInstance<SolutionModifierContext>(_ctx, getState());
  enterRule(_localctx, 28, SparqlQueryParser::RuleSolutionModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(372);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::GROUP) {
      setState(371);
      groupClause();
    }
    setState(375);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::HAVING) {
      setState(374);
      havingClause();
    }
    setState(378);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::ORDER) {
      setState(377);
      orderClause();
    }
    setState(381);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::LIMIT

    || _la == SparqlQueryParser::OFFSET) {
      setState(380);
      limitOffsetClauses();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupClauseContext ------------------------------------------------------------------

SparqlQueryParser::GroupClauseContext::GroupClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::GroupClauseContext::GROUP() {
  return getToken(SparqlQueryParser::GROUP, 0);
}

tree::TerminalNode* SparqlQueryParser::GroupClauseContext::BY() {
  return getToken(SparqlQueryParser::BY, 0);
}

std::vector<SparqlQueryParser::GroupConditionContext *> SparqlQueryParser::GroupClauseContext::groupCondition() {
  return getRuleContexts<SparqlQueryParser::GroupConditionContext>();
}

SparqlQueryParser::GroupConditionContext* SparqlQueryParser::GroupClauseContext::groupCondition(size_t i) {
  return getRuleContext<SparqlQueryParser::GroupConditionContext>(i);
}


size_t SparqlQueryParser::GroupClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGroupClause;
}


std::any SparqlQueryParser::GroupClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGroupClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GroupClauseContext* SparqlQueryParser::groupClause() {
  GroupClauseContext *_localctx = _tracker.createInstance<GroupClauseContext>(_ctx, getState());
  enterRule(_localctx, 30, SparqlQueryParser::RuleGroupClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(383);
    match(SparqlQueryParser::GROUP);
    setState(384);
    match(SparqlQueryParser::BY);
    setState(386); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(385);
      groupCondition();
      setState(388); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 25) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 25)) & -16773121) != 0) || ((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & 17592189649663) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupConditionContext ------------------------------------------------------------------

SparqlQueryParser::GroupConditionContext::GroupConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::BuiltInCallContext* SparqlQueryParser::GroupConditionContext::builtInCall() {
  return getRuleContext<SparqlQueryParser::BuiltInCallContext>(0);
}

SparqlQueryParser::FunctionCallContext* SparqlQueryParser::GroupConditionContext::functionCall() {
  return getRuleContext<SparqlQueryParser::FunctionCallContext>(0);
}

tree::TerminalNode* SparqlQueryParser::GroupConditionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::GroupConditionContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::GroupConditionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::GroupConditionContext::AS() {
  return getToken(SparqlQueryParser::AS, 0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::GroupConditionContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}


size_t SparqlQueryParser::GroupConditionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGroupCondition;
}


std::any SparqlQueryParser::GroupConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGroupCondition(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GroupConditionContext* SparqlQueryParser::groupCondition() {
  GroupConditionContext *_localctx = _tracker.createInstance<GroupConditionContext>(_ctx, getState());
  enterRule(_localctx, 32, SparqlQueryParser::RuleGroupCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(401);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::STR:
      case SparqlQueryParser::LANG:
      case SparqlQueryParser::LANGMATCHES:
      case SparqlQueryParser::DATATYPE:
      case SparqlQueryParser::BOUND:
      case SparqlQueryParser::SAMETERM:
      case SparqlQueryParser::ISIRI:
      case SparqlQueryParser::ISURI:
      case SparqlQueryParser::ISBLANK:
      case SparqlQueryParser::ISLITERAL:
      case SparqlQueryParser::REGEX:
      case SparqlQueryParser::SUBSTR:
      case SparqlQueryParser::IRI:
      case SparqlQueryParser::URI:
      case SparqlQueryParser::BNODE:
      case SparqlQueryParser::RAND:
      case SparqlQueryParser::ABS:
      case SparqlQueryParser::CEIL:
      case SparqlQueryParser::FLOOR:
      case SparqlQueryParser::ROUND:
      case SparqlQueryParser::CONCAT:
      case SparqlQueryParser::STRLEN:
      case SparqlQueryParser::UCASE:
      case SparqlQueryParser::LCASE:
      case SparqlQueryParser::ENCODE_FOR_URI:
      case SparqlQueryParser::CONTAINS:
      case SparqlQueryParser::STRSTARTS:
      case SparqlQueryParser::STRENDS:
      case SparqlQueryParser::STRBEFORE:
      case SparqlQueryParser::STRAFTER:
      case SparqlQueryParser::REPLACE:
      case SparqlQueryParser::YEAR:
      case SparqlQueryParser::MONTH:
      case SparqlQueryParser::DAY:
      case SparqlQueryParser::HOURS:
      case SparqlQueryParser::MINUTES:
      case SparqlQueryParser::SECONDS:
      case SparqlQueryParser::TIMEZONE:
      case SparqlQueryParser::TZ:
      case SparqlQueryParser::NOW:
      case SparqlQueryParser::UUID:
      case SparqlQueryParser::STRUUID:
      case SparqlQueryParser::MD5:
      case SparqlQueryParser::SHA1:
      case SparqlQueryParser::SHA256:
      case SparqlQueryParser::SHA384:
      case SparqlQueryParser::SHA512:
      case SparqlQueryParser::COALESCE:
      case SparqlQueryParser::IF:
      case SparqlQueryParser::STRLANG:
      case SparqlQueryParser::STRDT:
      case SparqlQueryParser::ISNUMERIC:
      case SparqlQueryParser::COUNT:
      case SparqlQueryParser::SUM:
      case SparqlQueryParser::MIN:
      case SparqlQueryParser::MAX:
      case SparqlQueryParser::AVG:
      case SparqlQueryParser::SAMPLE:
      case SparqlQueryParser::GROUP_CONCAT:
      case SparqlQueryParser::NOT:
      case SparqlQueryParser::EXISTS: {
        enterOuterAlt(_localctx, 1);
        setState(390);
        builtInCall();
        break;
      }

      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 2);
        setState(391);
        functionCall();
        break;
      }

      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 3);
        setState(392);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(393);
        expression();
        setState(396);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::AS) {
          setState(394);
          match(SparqlQueryParser::AS);
          setState(395);
          var();
        }
        setState(398);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 4);
        setState(400);
        var();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingClauseContext ------------------------------------------------------------------

SparqlQueryParser::HavingClauseContext::HavingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::HavingClauseContext::HAVING() {
  return getToken(SparqlQueryParser::HAVING, 0);
}

std::vector<SparqlQueryParser::HavingConditionContext *> SparqlQueryParser::HavingClauseContext::havingCondition() {
  return getRuleContexts<SparqlQueryParser::HavingConditionContext>();
}

SparqlQueryParser::HavingConditionContext* SparqlQueryParser::HavingClauseContext::havingCondition(size_t i) {
  return getRuleContext<SparqlQueryParser::HavingConditionContext>(i);
}


size_t SparqlQueryParser::HavingClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleHavingClause;
}


std::any SparqlQueryParser::HavingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitHavingClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::HavingClauseContext* SparqlQueryParser::havingClause() {
  HavingClauseContext *_localctx = _tracker.createInstance<HavingClauseContext>(_ctx, getState());
  enterRule(_localctx, 34, SparqlQueryParser::RuleHavingClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(403);
    match(SparqlQueryParser::HAVING);
    setState(405); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(404);
      havingCondition();
      setState(407); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 25) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 25)) & -16773121) != 0) || ((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & 17592186503935) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingConditionContext ------------------------------------------------------------------

SparqlQueryParser::HavingConditionContext::HavingConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::ConstraintContext* SparqlQueryParser::HavingConditionContext::constraint() {
  return getRuleContext<SparqlQueryParser::ConstraintContext>(0);
}


size_t SparqlQueryParser::HavingConditionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleHavingCondition;
}


std::any SparqlQueryParser::HavingConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitHavingCondition(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::HavingConditionContext* SparqlQueryParser::havingCondition() {
  HavingConditionContext *_localctx = _tracker.createInstance<HavingConditionContext>(_ctx, getState());
  enterRule(_localctx, 36, SparqlQueryParser::RuleHavingCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(409);
    constraint();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderClauseContext ------------------------------------------------------------------

SparqlQueryParser::OrderClauseContext::OrderClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::OrderClauseContext::ORDER() {
  return getToken(SparqlQueryParser::ORDER, 0);
}

tree::TerminalNode* SparqlQueryParser::OrderClauseContext::BY() {
  return getToken(SparqlQueryParser::BY, 0);
}

std::vector<SparqlQueryParser::OrderConditionContext *> SparqlQueryParser::OrderClauseContext::orderCondition() {
  return getRuleContexts<SparqlQueryParser::OrderConditionContext>();
}

SparqlQueryParser::OrderConditionContext* SparqlQueryParser::OrderClauseContext::orderCondition(size_t i) {
  return getRuleContext<SparqlQueryParser::OrderConditionContext>(i);
}


size_t SparqlQueryParser::OrderClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleOrderClause;
}


std::any SparqlQueryParser::OrderClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitOrderClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::OrderClauseContext* SparqlQueryParser::orderClause() {
  OrderClauseContext *_localctx = _tracker.createInstance<OrderClauseContext>(_ctx, getState());
  enterRule(_localctx, 38, SparqlQueryParser::RuleOrderClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(411);
    match(SparqlQueryParser::ORDER);
    setState(412);
    match(SparqlQueryParser::BY);
    setState(414); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(413);
      orderCondition();
      setState(416); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 15) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 15)) & -17175675901) != 0) || ((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & 18014402201255935) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderConditionContext ------------------------------------------------------------------

SparqlQueryParser::OrderConditionContext::OrderConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::OrderConditionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::OrderConditionContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::OrderConditionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::OrderConditionContext::ASC() {
  return getToken(SparqlQueryParser::ASC, 0);
}

tree::TerminalNode* SparqlQueryParser::OrderConditionContext::DESC() {
  return getToken(SparqlQueryParser::DESC, 0);
}

SparqlQueryParser::ConstraintContext* SparqlQueryParser::OrderConditionContext::constraint() {
  return getRuleContext<SparqlQueryParser::ConstraintContext>(0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::OrderConditionContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}


size_t SparqlQueryParser::OrderConditionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleOrderCondition;
}


std::any SparqlQueryParser::OrderConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitOrderCondition(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::OrderConditionContext* SparqlQueryParser::orderCondition() {
  OrderConditionContext *_localctx = _tracker.createInstance<OrderConditionContext>(_ctx, getState());
  enterRule(_localctx, 40, SparqlQueryParser::RuleOrderCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(425);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::ASC:
      case SparqlQueryParser::DESC: {
        enterOuterAlt(_localctx, 1);
        setState(418);
        _la = _input->LA(1);
        if (!(_la == SparqlQueryParser::ASC

        || _la == SparqlQueryParser::DESC)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(419);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(420);
        expression();
        setState(421);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STR:
      case SparqlQueryParser::LANG:
      case SparqlQueryParser::LANGMATCHES:
      case SparqlQueryParser::DATATYPE:
      case SparqlQueryParser::BOUND:
      case SparqlQueryParser::SAMETERM:
      case SparqlQueryParser::ISIRI:
      case SparqlQueryParser::ISURI:
      case SparqlQueryParser::ISBLANK:
      case SparqlQueryParser::ISLITERAL:
      case SparqlQueryParser::REGEX:
      case SparqlQueryParser::SUBSTR:
      case SparqlQueryParser::IRI:
      case SparqlQueryParser::URI:
      case SparqlQueryParser::BNODE:
      case SparqlQueryParser::RAND:
      case SparqlQueryParser::ABS:
      case SparqlQueryParser::CEIL:
      case SparqlQueryParser::FLOOR:
      case SparqlQueryParser::ROUND:
      case SparqlQueryParser::CONCAT:
      case SparqlQueryParser::STRLEN:
      case SparqlQueryParser::UCASE:
      case SparqlQueryParser::LCASE:
      case SparqlQueryParser::ENCODE_FOR_URI:
      case SparqlQueryParser::CONTAINS:
      case SparqlQueryParser::STRSTARTS:
      case SparqlQueryParser::STRENDS:
      case SparqlQueryParser::STRBEFORE:
      case SparqlQueryParser::STRAFTER:
      case SparqlQueryParser::REPLACE:
      case SparqlQueryParser::YEAR:
      case SparqlQueryParser::MONTH:
      case SparqlQueryParser::DAY:
      case SparqlQueryParser::HOURS:
      case SparqlQueryParser::MINUTES:
      case SparqlQueryParser::SECONDS:
      case SparqlQueryParser::TIMEZONE:
      case SparqlQueryParser::TZ:
      case SparqlQueryParser::NOW:
      case SparqlQueryParser::UUID:
      case SparqlQueryParser::STRUUID:
      case SparqlQueryParser::MD5:
      case SparqlQueryParser::SHA1:
      case SparqlQueryParser::SHA256:
      case SparqlQueryParser::SHA384:
      case SparqlQueryParser::SHA512:
      case SparqlQueryParser::COALESCE:
      case SparqlQueryParser::IF:
      case SparqlQueryParser::STRLANG:
      case SparqlQueryParser::STRDT:
      case SparqlQueryParser::ISNUMERIC:
      case SparqlQueryParser::COUNT:
      case SparqlQueryParser::SUM:
      case SparqlQueryParser::MIN:
      case SparqlQueryParser::MAX:
      case SparqlQueryParser::AVG:
      case SparqlQueryParser::SAMPLE:
      case SparqlQueryParser::GROUP_CONCAT:
      case SparqlQueryParser::NOT:
      case SparqlQueryParser::EXISTS:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(423);
        constraint();
        break;
      }

      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 3);
        setState(424);
        var();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitOffsetClausesContext ------------------------------------------------------------------

SparqlQueryParser::LimitOffsetClausesContext::LimitOffsetClausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::LimitClauseContext* SparqlQueryParser::LimitOffsetClausesContext::limitClause() {
  return getRuleContext<SparqlQueryParser::LimitClauseContext>(0);
}

SparqlQueryParser::OffsetClauseContext* SparqlQueryParser::LimitOffsetClausesContext::offsetClause() {
  return getRuleContext<SparqlQueryParser::OffsetClauseContext>(0);
}


size_t SparqlQueryParser::LimitOffsetClausesContext::getRuleIndex() const {
  return SparqlQueryParser::RuleLimitOffsetClauses;
}


std::any SparqlQueryParser::LimitOffsetClausesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitLimitOffsetClauses(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::LimitOffsetClausesContext* SparqlQueryParser::limitOffsetClauses() {
  LimitOffsetClausesContext *_localctx = _tracker.createInstance<LimitOffsetClausesContext>(_ctx, getState());
  enterRule(_localctx, 42, SparqlQueryParser::RuleLimitOffsetClauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(435);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::LIMIT: {
        enterOuterAlt(_localctx, 1);
        setState(427);
        limitClause();
        setState(429);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::OFFSET) {
          setState(428);
          offsetClause();
        }
        break;
      }

      case SparqlQueryParser::OFFSET: {
        enterOuterAlt(_localctx, 2);
        setState(431);
        offsetClause();
        setState(433);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::LIMIT) {
          setState(432);
          limitClause();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitClauseContext ------------------------------------------------------------------

SparqlQueryParser::LimitClauseContext::LimitClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::LimitClauseContext::LIMIT() {
  return getToken(SparqlQueryParser::LIMIT, 0);
}

tree::TerminalNode* SparqlQueryParser::LimitClauseContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}


size_t SparqlQueryParser::LimitClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleLimitClause;
}


std::any SparqlQueryParser::LimitClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitLimitClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::LimitClauseContext* SparqlQueryParser::limitClause() {
  LimitClauseContext *_localctx = _tracker.createInstance<LimitClauseContext>(_ctx, getState());
  enterRule(_localctx, 44, SparqlQueryParser::RuleLimitClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(437);
    match(SparqlQueryParser::LIMIT);
    setState(438);
    match(SparqlQueryParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetClauseContext ------------------------------------------------------------------

SparqlQueryParser::OffsetClauseContext::OffsetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::OffsetClauseContext::OFFSET() {
  return getToken(SparqlQueryParser::OFFSET, 0);
}

tree::TerminalNode* SparqlQueryParser::OffsetClauseContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}


size_t SparqlQueryParser::OffsetClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleOffsetClause;
}


std::any SparqlQueryParser::OffsetClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitOffsetClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::OffsetClauseContext* SparqlQueryParser::offsetClause() {
  OffsetClauseContext *_localctx = _tracker.createInstance<OffsetClauseContext>(_ctx, getState());
  enterRule(_localctx, 46, SparqlQueryParser::RuleOffsetClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(440);
    match(SparqlQueryParser::OFFSET);
    setState(441);
    match(SparqlQueryParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValuesClauseContext ------------------------------------------------------------------

SparqlQueryParser::ValuesClauseContext::ValuesClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ValuesClauseContext::VALUES() {
  return getToken(SparqlQueryParser::VALUES, 0);
}

SparqlQueryParser::DataBlockContext* SparqlQueryParser::ValuesClauseContext::dataBlock() {
  return getRuleContext<SparqlQueryParser::DataBlockContext>(0);
}


size_t SparqlQueryParser::ValuesClauseContext::getRuleIndex() const {
  return SparqlQueryParser::RuleValuesClause;
}


std::any SparqlQueryParser::ValuesClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitValuesClause(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ValuesClauseContext* SparqlQueryParser::valuesClause() {
  ValuesClauseContext *_localctx = _tracker.createInstance<ValuesClauseContext>(_ctx, getState());
  enterRule(_localctx, 48, SparqlQueryParser::RuleValuesClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(445);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::VALUES) {
      setState(443);
      match(SparqlQueryParser::VALUES);
      setState(444);
      dataBlock();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TriplesTemplateContext ------------------------------------------------------------------

SparqlQueryParser::TriplesTemplateContext::TriplesTemplateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::TriplesSameSubjectContext *> SparqlQueryParser::TriplesTemplateContext::triplesSameSubject() {
  return getRuleContexts<SparqlQueryParser::TriplesSameSubjectContext>();
}

SparqlQueryParser::TriplesSameSubjectContext* SparqlQueryParser::TriplesTemplateContext::triplesSameSubject(size_t i) {
  return getRuleContext<SparqlQueryParser::TriplesSameSubjectContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::TriplesTemplateContext::DOT() {
  return getTokens(SparqlQueryParser::DOT);
}

tree::TerminalNode* SparqlQueryParser::TriplesTemplateContext::DOT(size_t i) {
  return getToken(SparqlQueryParser::DOT, i);
}


size_t SparqlQueryParser::TriplesTemplateContext::getRuleIndex() const {
  return SparqlQueryParser::RuleTriplesTemplate;
}


std::any SparqlQueryParser::TriplesTemplateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitTriplesTemplate(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::TriplesTemplateContext* SparqlQueryParser::triplesTemplate() {
  TriplesTemplateContext *_localctx = _tracker.createInstance<TriplesTemplateContext>(_ctx, getState());
  enterRule(_localctx, 50, SparqlQueryParser::RuleTriplesTemplate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(447);
    triplesSameSubject();
    setState(454);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::DOT) {
      setState(448);
      match(SparqlQueryParser::DOT);
      setState(450);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SparqlQueryParser::TRUE

      || _la == SparqlQueryParser::FALSE || ((((_la - 105) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 105)) & 4564451263) != 0)) {
        setState(449);
        triplesSameSubject();
      }
      setState(456);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupGraphPatternContext ------------------------------------------------------------------

SparqlQueryParser::GroupGraphPatternContext::GroupGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::GroupGraphPatternContext::OPEN_CURLY_BRACE() {
  return getToken(SparqlQueryParser::OPEN_CURLY_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::GroupGraphPatternContext::CLOSE_CURLY_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_CURLY_BRACE, 0);
}

SparqlQueryParser::SubSelectContext* SparqlQueryParser::GroupGraphPatternContext::subSelect() {
  return getRuleContext<SparqlQueryParser::SubSelectContext>(0);
}

SparqlQueryParser::GroupGraphPatternSubContext* SparqlQueryParser::GroupGraphPatternContext::groupGraphPatternSub() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternSubContext>(0);
}


size_t SparqlQueryParser::GroupGraphPatternContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGroupGraphPattern;
}


std::any SparqlQueryParser::GroupGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGroupGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::groupGraphPattern() {
  GroupGraphPatternContext *_localctx = _tracker.createInstance<GroupGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 52, SparqlQueryParser::RuleGroupGraphPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(457);
    match(SparqlQueryParser::OPEN_CURLY_BRACE);
    setState(460);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::SELECT: {
        setState(458);
        subSelect();
        break;
      }

      case SparqlQueryParser::VALUES:
      case SparqlQueryParser::OPTIONAL:
      case SparqlQueryParser::GRAPH:
      case SparqlQueryParser::FILTER:
      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE:
      case SparqlQueryParser::SERVICE:
      case SparqlQueryParser::BIND:
      case SparqlQueryParser::MINUS:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::BLANK_NODE_LABEL:
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2:
      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE:
      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::OPEN_CURLY_BRACE:
      case SparqlQueryParser::CLOSE_CURLY_BRACE:
      case SparqlQueryParser::OPEN_SQUARE_BRACKET: {
        setState(459);
        groupGraphPatternSub();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(462);
    match(SparqlQueryParser::CLOSE_CURLY_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupGraphPatternSubContext ------------------------------------------------------------------

SparqlQueryParser::GroupGraphPatternSubContext::GroupGraphPatternSubContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::TriplesBlockContext* SparqlQueryParser::GroupGraphPatternSubContext::triplesBlock() {
  return getRuleContext<SparqlQueryParser::TriplesBlockContext>(0);
}

std::vector<SparqlQueryParser::GroupGraphPatternSubListContext *> SparqlQueryParser::GroupGraphPatternSubContext::groupGraphPatternSubList() {
  return getRuleContexts<SparqlQueryParser::GroupGraphPatternSubListContext>();
}

SparqlQueryParser::GroupGraphPatternSubListContext* SparqlQueryParser::GroupGraphPatternSubContext::groupGraphPatternSubList(size_t i) {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternSubListContext>(i);
}


size_t SparqlQueryParser::GroupGraphPatternSubContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGroupGraphPatternSub;
}


std::any SparqlQueryParser::GroupGraphPatternSubContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGroupGraphPatternSub(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GroupGraphPatternSubContext* SparqlQueryParser::groupGraphPatternSub() {
  GroupGraphPatternSubContext *_localctx = _tracker.createInstance<GroupGraphPatternSubContext>(_ctx, getState());
  enterRule(_localctx, 54, SparqlQueryParser::RuleGroupGraphPatternSub);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(465);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::TRUE

    || _la == SparqlQueryParser::FALSE || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & 4564451263) != 0)) {
      setState(464);
      triplesBlock();
    }
    setState(470);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 492581221302272) != 0) || _la == SparqlQueryParser::OPEN_CURLY_BRACE) {
      setState(467);
      groupGraphPatternSubList();
      setState(472);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupGraphPatternSubListContext ------------------------------------------------------------------

SparqlQueryParser::GroupGraphPatternSubListContext::GroupGraphPatternSubListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::GraphPatternNotTriplesContext* SparqlQueryParser::GroupGraphPatternSubListContext::graphPatternNotTriples() {
  return getRuleContext<SparqlQueryParser::GraphPatternNotTriplesContext>(0);
}

tree::TerminalNode* SparqlQueryParser::GroupGraphPatternSubListContext::DOT() {
  return getToken(SparqlQueryParser::DOT, 0);
}

SparqlQueryParser::TriplesBlockContext* SparqlQueryParser::GroupGraphPatternSubListContext::triplesBlock() {
  return getRuleContext<SparqlQueryParser::TriplesBlockContext>(0);
}


size_t SparqlQueryParser::GroupGraphPatternSubListContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGroupGraphPatternSubList;
}


std::any SparqlQueryParser::GroupGraphPatternSubListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGroupGraphPatternSubList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GroupGraphPatternSubListContext* SparqlQueryParser::groupGraphPatternSubList() {
  GroupGraphPatternSubListContext *_localctx = _tracker.createInstance<GroupGraphPatternSubListContext>(_ctx, getState());
  enterRule(_localctx, 56, SparqlQueryParser::RuleGroupGraphPatternSubList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(473);
    graphPatternNotTriples();
    setState(475);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::DOT) {
      setState(474);
      match(SparqlQueryParser::DOT);
    }
    setState(478);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::TRUE

    || _la == SparqlQueryParser::FALSE || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & 4564451263) != 0)) {
      setState(477);
      triplesBlock();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TriplesBlockContext ------------------------------------------------------------------

SparqlQueryParser::TriplesBlockContext::TriplesBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::TriplesSameSubjectPathContext *> SparqlQueryParser::TriplesBlockContext::triplesSameSubjectPath() {
  return getRuleContexts<SparqlQueryParser::TriplesSameSubjectPathContext>();
}

SparqlQueryParser::TriplesSameSubjectPathContext* SparqlQueryParser::TriplesBlockContext::triplesSameSubjectPath(size_t i) {
  return getRuleContext<SparqlQueryParser::TriplesSameSubjectPathContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::TriplesBlockContext::DOT() {
  return getTokens(SparqlQueryParser::DOT);
}

tree::TerminalNode* SparqlQueryParser::TriplesBlockContext::DOT(size_t i) {
  return getToken(SparqlQueryParser::DOT, i);
}


size_t SparqlQueryParser::TriplesBlockContext::getRuleIndex() const {
  return SparqlQueryParser::RuleTriplesBlock;
}


std::any SparqlQueryParser::TriplesBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitTriplesBlock(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::TriplesBlockContext* SparqlQueryParser::triplesBlock() {
  TriplesBlockContext *_localctx = _tracker.createInstance<TriplesBlockContext>(_ctx, getState());
  enterRule(_localctx, 58, SparqlQueryParser::RuleTriplesBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(480);
    triplesSameSubjectPath();
    setState(487);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::DOT) {
      setState(481);
      match(SparqlQueryParser::DOT);
      setState(483);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SparqlQueryParser::TRUE

      || _la == SparqlQueryParser::FALSE || ((((_la - 105) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 105)) & 4564451263) != 0)) {
        setState(482);
        triplesSameSubjectPath();
      }
      setState(489);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternNotTriplesContext ------------------------------------------------------------------

SparqlQueryParser::GraphPatternNotTriplesContext::GraphPatternNotTriplesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::GroupOrUnionGraphPatternContext* SparqlQueryParser::GraphPatternNotTriplesContext::groupOrUnionGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupOrUnionGraphPatternContext>(0);
}

SparqlQueryParser::OptionalGraphPatternContext* SparqlQueryParser::GraphPatternNotTriplesContext::optionalGraphPattern() {
  return getRuleContext<SparqlQueryParser::OptionalGraphPatternContext>(0);
}

SparqlQueryParser::MinusGraphPatternContext* SparqlQueryParser::GraphPatternNotTriplesContext::minusGraphPattern() {
  return getRuleContext<SparqlQueryParser::MinusGraphPatternContext>(0);
}

SparqlQueryParser::GraphGraphPatternContext* SparqlQueryParser::GraphPatternNotTriplesContext::graphGraphPattern() {
  return getRuleContext<SparqlQueryParser::GraphGraphPatternContext>(0);
}

SparqlQueryParser::ServiceGraphPatternContext* SparqlQueryParser::GraphPatternNotTriplesContext::serviceGraphPattern() {
  return getRuleContext<SparqlQueryParser::ServiceGraphPatternContext>(0);
}

SparqlQueryParser::FilterContext* SparqlQueryParser::GraphPatternNotTriplesContext::filter() {
  return getRuleContext<SparqlQueryParser::FilterContext>(0);
}

SparqlQueryParser::BindContext* SparqlQueryParser::GraphPatternNotTriplesContext::bind() {
  return getRuleContext<SparqlQueryParser::BindContext>(0);
}

SparqlQueryParser::InlineDataContext* SparqlQueryParser::GraphPatternNotTriplesContext::inlineData() {
  return getRuleContext<SparqlQueryParser::InlineDataContext>(0);
}


size_t SparqlQueryParser::GraphPatternNotTriplesContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGraphPatternNotTriples;
}


std::any SparqlQueryParser::GraphPatternNotTriplesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGraphPatternNotTriples(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GraphPatternNotTriplesContext* SparqlQueryParser::graphPatternNotTriples() {
  GraphPatternNotTriplesContext *_localctx = _tracker.createInstance<GraphPatternNotTriplesContext>(_ctx, getState());
  enterRule(_localctx, 60, SparqlQueryParser::RuleGraphPatternNotTriples);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(498);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::OPEN_CURLY_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(490);
        groupOrUnionGraphPattern();
        break;
      }

      case SparqlQueryParser::OPTIONAL: {
        enterOuterAlt(_localctx, 2);
        setState(491);
        optionalGraphPattern();
        break;
      }

      case SparqlQueryParser::MINUS: {
        enterOuterAlt(_localctx, 3);
        setState(492);
        minusGraphPattern();
        break;
      }

      case SparqlQueryParser::GRAPH: {
        enterOuterAlt(_localctx, 4);
        setState(493);
        graphGraphPattern();
        break;
      }

      case SparqlQueryParser::SERVICE: {
        enterOuterAlt(_localctx, 5);
        setState(494);
        serviceGraphPattern();
        break;
      }

      case SparqlQueryParser::FILTER: {
        enterOuterAlt(_localctx, 6);
        setState(495);
        filter();
        break;
      }

      case SparqlQueryParser::BIND: {
        enterOuterAlt(_localctx, 7);
        setState(496);
        bind();
        break;
      }

      case SparqlQueryParser::VALUES: {
        enterOuterAlt(_localctx, 8);
        setState(497);
        inlineData();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalGraphPatternContext ------------------------------------------------------------------

SparqlQueryParser::OptionalGraphPatternContext::OptionalGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::OptionalGraphPatternContext::OPTIONAL() {
  return getToken(SparqlQueryParser::OPTIONAL, 0);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::OptionalGraphPatternContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}


size_t SparqlQueryParser::OptionalGraphPatternContext::getRuleIndex() const {
  return SparqlQueryParser::RuleOptionalGraphPattern;
}


std::any SparqlQueryParser::OptionalGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitOptionalGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::OptionalGraphPatternContext* SparqlQueryParser::optionalGraphPattern() {
  OptionalGraphPatternContext *_localctx = _tracker.createInstance<OptionalGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 62, SparqlQueryParser::RuleOptionalGraphPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(500);
    match(SparqlQueryParser::OPTIONAL);
    setState(501);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphGraphPatternContext ------------------------------------------------------------------

SparqlQueryParser::GraphGraphPatternContext::GraphGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::GraphGraphPatternContext::GRAPH() {
  return getToken(SparqlQueryParser::GRAPH, 0);
}

SparqlQueryParser::VarOrIRIContext* SparqlQueryParser::GraphGraphPatternContext::varOrIRI() {
  return getRuleContext<SparqlQueryParser::VarOrIRIContext>(0);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::GraphGraphPatternContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}


size_t SparqlQueryParser::GraphGraphPatternContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGraphGraphPattern;
}


std::any SparqlQueryParser::GraphGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGraphGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GraphGraphPatternContext* SparqlQueryParser::graphGraphPattern() {
  GraphGraphPatternContext *_localctx = _tracker.createInstance<GraphGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 64, SparqlQueryParser::RuleGraphGraphPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(503);
    match(SparqlQueryParser::GRAPH);
    setState(504);
    varOrIRI();
    setState(505);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ServiceGraphPatternContext ------------------------------------------------------------------

SparqlQueryParser::ServiceGraphPatternContext::ServiceGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ServiceGraphPatternContext::SERVICE() {
  return getToken(SparqlQueryParser::SERVICE, 0);
}

SparqlQueryParser::VarOrIRIContext* SparqlQueryParser::ServiceGraphPatternContext::varOrIRI() {
  return getRuleContext<SparqlQueryParser::VarOrIRIContext>(0);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::ServiceGraphPatternContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}

tree::TerminalNode* SparqlQueryParser::ServiceGraphPatternContext::SILENT() {
  return getToken(SparqlQueryParser::SILENT, 0);
}


size_t SparqlQueryParser::ServiceGraphPatternContext::getRuleIndex() const {
  return SparqlQueryParser::RuleServiceGraphPattern;
}


std::any SparqlQueryParser::ServiceGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitServiceGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ServiceGraphPatternContext* SparqlQueryParser::serviceGraphPattern() {
  ServiceGraphPatternContext *_localctx = _tracker.createInstance<ServiceGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 66, SparqlQueryParser::RuleServiceGraphPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(507);
    match(SparqlQueryParser::SERVICE);
    setState(509);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::SILENT) {
      setState(508);
      match(SparqlQueryParser::SILENT);
    }
    setState(511);
    varOrIRI();
    setState(512);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindContext ------------------------------------------------------------------

SparqlQueryParser::BindContext::BindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::BindContext::BIND() {
  return getToken(SparqlQueryParser::BIND, 0);
}

tree::TerminalNode* SparqlQueryParser::BindContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::BindContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BindContext::AS() {
  return getToken(SparqlQueryParser::AS, 0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::BindContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BindContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}


size_t SparqlQueryParser::BindContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBind;
}


std::any SparqlQueryParser::BindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBind(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BindContext* SparqlQueryParser::bind() {
  BindContext *_localctx = _tracker.createInstance<BindContext>(_ctx, getState());
  enterRule(_localctx, 68, SparqlQueryParser::RuleBind);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    match(SparqlQueryParser::BIND);
    setState(515);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(516);
    expression();
    setState(517);
    match(SparqlQueryParser::AS);
    setState(518);
    var();
    setState(519);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlineDataContext ------------------------------------------------------------------

SparqlQueryParser::InlineDataContext::InlineDataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::InlineDataContext::VALUES() {
  return getToken(SparqlQueryParser::VALUES, 0);
}

SparqlQueryParser::DataBlockContext* SparqlQueryParser::InlineDataContext::dataBlock() {
  return getRuleContext<SparqlQueryParser::DataBlockContext>(0);
}


size_t SparqlQueryParser::InlineDataContext::getRuleIndex() const {
  return SparqlQueryParser::RuleInlineData;
}


std::any SparqlQueryParser::InlineDataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitInlineData(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::InlineDataContext* SparqlQueryParser::inlineData() {
  InlineDataContext *_localctx = _tracker.createInstance<InlineDataContext>(_ctx, getState());
  enterRule(_localctx, 70, SparqlQueryParser::RuleInlineData);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(521);
    match(SparqlQueryParser::VALUES);
    setState(522);
    dataBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataBlockContext ------------------------------------------------------------------

SparqlQueryParser::DataBlockContext::DataBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::InlineDataOneVarContext* SparqlQueryParser::DataBlockContext::inlineDataOneVar() {
  return getRuleContext<SparqlQueryParser::InlineDataOneVarContext>(0);
}

SparqlQueryParser::InlineDataFullContext* SparqlQueryParser::DataBlockContext::inlineDataFull() {
  return getRuleContext<SparqlQueryParser::InlineDataFullContext>(0);
}


size_t SparqlQueryParser::DataBlockContext::getRuleIndex() const {
  return SparqlQueryParser::RuleDataBlock;
}


std::any SparqlQueryParser::DataBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitDataBlock(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::DataBlockContext* SparqlQueryParser::dataBlock() {
  DataBlockContext *_localctx = _tracker.createInstance<DataBlockContext>(_ctx, getState());
  enterRule(_localctx, 72, SparqlQueryParser::RuleDataBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(526);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 1);
        setState(524);
        inlineDataOneVar();
        break;
      }

      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(525);
        inlineDataFull();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlineDataOneVarContext ------------------------------------------------------------------

SparqlQueryParser::InlineDataOneVarContext::InlineDataOneVarContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarContext* SparqlQueryParser::InlineDataOneVarContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

tree::TerminalNode* SparqlQueryParser::InlineDataOneVarContext::OPEN_CURLY_BRACE() {
  return getToken(SparqlQueryParser::OPEN_CURLY_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::InlineDataOneVarContext::CLOSE_CURLY_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_CURLY_BRACE, 0);
}

std::vector<SparqlQueryParser::DataBlockValueContext *> SparqlQueryParser::InlineDataOneVarContext::dataBlockValue() {
  return getRuleContexts<SparqlQueryParser::DataBlockValueContext>();
}

SparqlQueryParser::DataBlockValueContext* SparqlQueryParser::InlineDataOneVarContext::dataBlockValue(size_t i) {
  return getRuleContext<SparqlQueryParser::DataBlockValueContext>(i);
}


size_t SparqlQueryParser::InlineDataOneVarContext::getRuleIndex() const {
  return SparqlQueryParser::RuleInlineDataOneVar;
}


std::any SparqlQueryParser::InlineDataOneVarContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitInlineDataOneVar(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::InlineDataOneVarContext* SparqlQueryParser::inlineDataOneVar() {
  InlineDataOneVarContext *_localctx = _tracker.createInstance<InlineDataOneVarContext>(_ctx, getState());
  enterRule(_localctx, 74, SparqlQueryParser::RuleInlineDataOneVar);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(528);
    var();
    setState(529);
    match(SparqlQueryParser::OPEN_CURLY_BRACE);
    setState(533);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18004502904832) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & 1048455) != 0)) {
      setState(530);
      dataBlockValue();
      setState(535);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(536);
    match(SparqlQueryParser::CLOSE_CURLY_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlineDataFullContext ------------------------------------------------------------------

SparqlQueryParser::InlineDataFullContext::InlineDataFullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::InlineDataFullContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::InlineDataFullContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::InlineDataFullContext::OPEN_CURLY_BRACE() {
  return getToken(SparqlQueryParser::OPEN_CURLY_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::InlineDataFullContext::CLOSE_CURLY_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_CURLY_BRACE, 0);
}

std::vector<SparqlQueryParser::VarContext *> SparqlQueryParser::InlineDataFullContext::var() {
  return getRuleContexts<SparqlQueryParser::VarContext>();
}

SparqlQueryParser::VarContext* SparqlQueryParser::InlineDataFullContext::var(size_t i) {
  return getRuleContext<SparqlQueryParser::VarContext>(i);
}

std::vector<SparqlQueryParser::DataBlockValuesContext *> SparqlQueryParser::InlineDataFullContext::dataBlockValues() {
  return getRuleContexts<SparqlQueryParser::DataBlockValuesContext>();
}

SparqlQueryParser::DataBlockValuesContext* SparqlQueryParser::InlineDataFullContext::dataBlockValues(size_t i) {
  return getRuleContext<SparqlQueryParser::DataBlockValuesContext>(i);
}


size_t SparqlQueryParser::InlineDataFullContext::getRuleIndex() const {
  return SparqlQueryParser::RuleInlineDataFull;
}


std::any SparqlQueryParser::InlineDataFullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitInlineDataFull(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::InlineDataFullContext* SparqlQueryParser::inlineDataFull() {
  InlineDataFullContext *_localctx = _tracker.createInstance<InlineDataFullContext>(_ctx, getState());
  enterRule(_localctx, 76, SparqlQueryParser::RuleInlineDataFull);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(538);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(542);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::VAR1

    || _la == SparqlQueryParser::VAR2) {
      setState(539);
      var();
      setState(544);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(545);
    match(SparqlQueryParser::CLOSE_BRACE);
    setState(546);
    match(SparqlQueryParser::OPEN_CURLY_BRACE);
    setState(550);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::OPEN_BRACE) {
      setState(547);
      dataBlockValues();
      setState(552);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(553);
    match(SparqlQueryParser::CLOSE_CURLY_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataBlockValuesContext ------------------------------------------------------------------

SparqlQueryParser::DataBlockValuesContext::DataBlockValuesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::DataBlockValuesContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::DataBlockValuesContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

std::vector<SparqlQueryParser::DataBlockValueContext *> SparqlQueryParser::DataBlockValuesContext::dataBlockValue() {
  return getRuleContexts<SparqlQueryParser::DataBlockValueContext>();
}

SparqlQueryParser::DataBlockValueContext* SparqlQueryParser::DataBlockValuesContext::dataBlockValue(size_t i) {
  return getRuleContext<SparqlQueryParser::DataBlockValueContext>(i);
}


size_t SparqlQueryParser::DataBlockValuesContext::getRuleIndex() const {
  return SparqlQueryParser::RuleDataBlockValues;
}


std::any SparqlQueryParser::DataBlockValuesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitDataBlockValues(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::DataBlockValuesContext* SparqlQueryParser::dataBlockValues() {
  DataBlockValuesContext *_localctx = _tracker.createInstance<DataBlockValuesContext>(_ctx, getState());
  enterRule(_localctx, 78, SparqlQueryParser::RuleDataBlockValues);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(555);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(559);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18004502904832) != 0) || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & 1048455) != 0)) {
      setState(556);
      dataBlockValue();
      setState(561);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(562);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataBlockValueContext ------------------------------------------------------------------

SparqlQueryParser::DataBlockValueContext::DataBlockValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::IriContext* SparqlQueryParser::DataBlockValueContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

SparqlQueryParser::RdfLiteralContext* SparqlQueryParser::DataBlockValueContext::rdfLiteral() {
  return getRuleContext<SparqlQueryParser::RdfLiteralContext>(0);
}

SparqlQueryParser::NumericLiteralContext* SparqlQueryParser::DataBlockValueContext::numericLiteral() {
  return getRuleContext<SparqlQueryParser::NumericLiteralContext>(0);
}

SparqlQueryParser::BooleanLiteralContext* SparqlQueryParser::DataBlockValueContext::booleanLiteral() {
  return getRuleContext<SparqlQueryParser::BooleanLiteralContext>(0);
}

tree::TerminalNode* SparqlQueryParser::DataBlockValueContext::UNDEF() {
  return getToken(SparqlQueryParser::UNDEF, 0);
}


size_t SparqlQueryParser::DataBlockValueContext::getRuleIndex() const {
  return SparqlQueryParser::RuleDataBlockValue;
}


std::any SparqlQueryParser::DataBlockValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitDataBlockValue(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::DataBlockValueContext* SparqlQueryParser::dataBlockValue() {
  DataBlockValueContext *_localctx = _tracker.createInstance<DataBlockValueContext>(_ctx, getState());
  enterRule(_localctx, 80, SparqlQueryParser::RuleDataBlockValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(569);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 1);
        setState(564);
        iri();
        break;
      }

      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2: {
        enterOuterAlt(_localctx, 2);
        setState(565);
        rdfLiteral();
        break;
      }

      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE: {
        enterOuterAlt(_localctx, 3);
        setState(566);
        numericLiteral();
        break;
      }

      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE: {
        enterOuterAlt(_localctx, 4);
        setState(567);
        booleanLiteral();
        break;
      }

      case SparqlQueryParser::UNDEF: {
        enterOuterAlt(_localctx, 5);
        setState(568);
        match(SparqlQueryParser::UNDEF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MinusGraphPatternContext ------------------------------------------------------------------

SparqlQueryParser::MinusGraphPatternContext::MinusGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::MinusGraphPatternContext::MINUS() {
  return getToken(SparqlQueryParser::MINUS, 0);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::MinusGraphPatternContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}


size_t SparqlQueryParser::MinusGraphPatternContext::getRuleIndex() const {
  return SparqlQueryParser::RuleMinusGraphPattern;
}


std::any SparqlQueryParser::MinusGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitMinusGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::MinusGraphPatternContext* SparqlQueryParser::minusGraphPattern() {
  MinusGraphPatternContext *_localctx = _tracker.createInstance<MinusGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 82, SparqlQueryParser::RuleMinusGraphPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(571);
    match(SparqlQueryParser::MINUS);
    setState(572);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupOrUnionGraphPatternContext ------------------------------------------------------------------

SparqlQueryParser::GroupOrUnionGraphPatternContext::GroupOrUnionGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::GroupGraphPatternContext *> SparqlQueryParser::GroupOrUnionGraphPatternContext::groupGraphPattern() {
  return getRuleContexts<SparqlQueryParser::GroupGraphPatternContext>();
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::GroupOrUnionGraphPatternContext::groupGraphPattern(size_t i) {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::GroupOrUnionGraphPatternContext::UNION() {
  return getTokens(SparqlQueryParser::UNION);
}

tree::TerminalNode* SparqlQueryParser::GroupOrUnionGraphPatternContext::UNION(size_t i) {
  return getToken(SparqlQueryParser::UNION, i);
}


size_t SparqlQueryParser::GroupOrUnionGraphPatternContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGroupOrUnionGraphPattern;
}


std::any SparqlQueryParser::GroupOrUnionGraphPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGroupOrUnionGraphPattern(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GroupOrUnionGraphPatternContext* SparqlQueryParser::groupOrUnionGraphPattern() {
  GroupOrUnionGraphPatternContext *_localctx = _tracker.createInstance<GroupOrUnionGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 84, SparqlQueryParser::RuleGroupOrUnionGraphPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(574);
    groupGraphPattern();
    setState(579);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::UNION) {
      setState(575);
      match(SparqlQueryParser::UNION);
      setState(576);
      groupGraphPattern();
      setState(581);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FilterContext ------------------------------------------------------------------

SparqlQueryParser::FilterContext::FilterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::FilterContext::FILTER() {
  return getToken(SparqlQueryParser::FILTER, 0);
}

SparqlQueryParser::ConstraintContext* SparqlQueryParser::FilterContext::constraint() {
  return getRuleContext<SparqlQueryParser::ConstraintContext>(0);
}


size_t SparqlQueryParser::FilterContext::getRuleIndex() const {
  return SparqlQueryParser::RuleFilter;
}


std::any SparqlQueryParser::FilterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitFilter(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::FilterContext* SparqlQueryParser::filter() {
  FilterContext *_localctx = _tracker.createInstance<FilterContext>(_ctx, getState());
  enterRule(_localctx, 86, SparqlQueryParser::RuleFilter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(582);
    match(SparqlQueryParser::FILTER);
    setState(583);
    constraint();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstraintContext ------------------------------------------------------------------

SparqlQueryParser::ConstraintContext::ConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ConstraintContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::ConstraintContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::ConstraintContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

SparqlQueryParser::BuiltInCallContext* SparqlQueryParser::ConstraintContext::builtInCall() {
  return getRuleContext<SparqlQueryParser::BuiltInCallContext>(0);
}

SparqlQueryParser::FunctionCallContext* SparqlQueryParser::ConstraintContext::functionCall() {
  return getRuleContext<SparqlQueryParser::FunctionCallContext>(0);
}


size_t SparqlQueryParser::ConstraintContext::getRuleIndex() const {
  return SparqlQueryParser::RuleConstraint;
}


std::any SparqlQueryParser::ConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitConstraint(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ConstraintContext* SparqlQueryParser::constraint() {
  ConstraintContext *_localctx = _tracker.createInstance<ConstraintContext>(_ctx, getState());
  enterRule(_localctx, 88, SparqlQueryParser::RuleConstraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(591);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(585);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(586);
        expression();
        setState(587);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STR:
      case SparqlQueryParser::LANG:
      case SparqlQueryParser::LANGMATCHES:
      case SparqlQueryParser::DATATYPE:
      case SparqlQueryParser::BOUND:
      case SparqlQueryParser::SAMETERM:
      case SparqlQueryParser::ISIRI:
      case SparqlQueryParser::ISURI:
      case SparqlQueryParser::ISBLANK:
      case SparqlQueryParser::ISLITERAL:
      case SparqlQueryParser::REGEX:
      case SparqlQueryParser::SUBSTR:
      case SparqlQueryParser::IRI:
      case SparqlQueryParser::URI:
      case SparqlQueryParser::BNODE:
      case SparqlQueryParser::RAND:
      case SparqlQueryParser::ABS:
      case SparqlQueryParser::CEIL:
      case SparqlQueryParser::FLOOR:
      case SparqlQueryParser::ROUND:
      case SparqlQueryParser::CONCAT:
      case SparqlQueryParser::STRLEN:
      case SparqlQueryParser::UCASE:
      case SparqlQueryParser::LCASE:
      case SparqlQueryParser::ENCODE_FOR_URI:
      case SparqlQueryParser::CONTAINS:
      case SparqlQueryParser::STRSTARTS:
      case SparqlQueryParser::STRENDS:
      case SparqlQueryParser::STRBEFORE:
      case SparqlQueryParser::STRAFTER:
      case SparqlQueryParser::REPLACE:
      case SparqlQueryParser::YEAR:
      case SparqlQueryParser::MONTH:
      case SparqlQueryParser::DAY:
      case SparqlQueryParser::HOURS:
      case SparqlQueryParser::MINUTES:
      case SparqlQueryParser::SECONDS:
      case SparqlQueryParser::TIMEZONE:
      case SparqlQueryParser::TZ:
      case SparqlQueryParser::NOW:
      case SparqlQueryParser::UUID:
      case SparqlQueryParser::STRUUID:
      case SparqlQueryParser::MD5:
      case SparqlQueryParser::SHA1:
      case SparqlQueryParser::SHA256:
      case SparqlQueryParser::SHA384:
      case SparqlQueryParser::SHA512:
      case SparqlQueryParser::COALESCE:
      case SparqlQueryParser::IF:
      case SparqlQueryParser::STRLANG:
      case SparqlQueryParser::STRDT:
      case SparqlQueryParser::ISNUMERIC:
      case SparqlQueryParser::COUNT:
      case SparqlQueryParser::SUM:
      case SparqlQueryParser::MIN:
      case SparqlQueryParser::MAX:
      case SparqlQueryParser::AVG:
      case SparqlQueryParser::SAMPLE:
      case SparqlQueryParser::GROUP_CONCAT:
      case SparqlQueryParser::NOT:
      case SparqlQueryParser::EXISTS: {
        enterOuterAlt(_localctx, 2);
        setState(589);
        builtInCall();
        break;
      }

      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 3);
        setState(590);
        functionCall();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionCallContext ------------------------------------------------------------------

SparqlQueryParser::FunctionCallContext::FunctionCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::IriContext* SparqlQueryParser::FunctionCallContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

SparqlQueryParser::ArgListContext* SparqlQueryParser::FunctionCallContext::argList() {
  return getRuleContext<SparqlQueryParser::ArgListContext>(0);
}


size_t SparqlQueryParser::FunctionCallContext::getRuleIndex() const {
  return SparqlQueryParser::RuleFunctionCall;
}


std::any SparqlQueryParser::FunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitFunctionCall(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::FunctionCallContext* SparqlQueryParser::functionCall() {
  FunctionCallContext *_localctx = _tracker.createInstance<FunctionCallContext>(_ctx, getState());
  enterRule(_localctx, 90, SparqlQueryParser::RuleFunctionCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(593);
    iri();
    setState(594);
    argList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgListContext ------------------------------------------------------------------

SparqlQueryParser::ArgListContext::ArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ArgListContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::ArgListContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

SparqlQueryParser::ExpressionListContext* SparqlQueryParser::ArgListContext::expressionList() {
  return getRuleContext<SparqlQueryParser::ExpressionListContext>(0);
}

tree::TerminalNode* SparqlQueryParser::ArgListContext::DISTINCT() {
  return getToken(SparqlQueryParser::DISTINCT, 0);
}


size_t SparqlQueryParser::ArgListContext::getRuleIndex() const {
  return SparqlQueryParser::RuleArgList;
}


std::any SparqlQueryParser::ArgListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitArgList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ArgListContext* SparqlQueryParser::argList() {
  ArgListContext *_localctx = _tracker.createInstance<ArgListContext>(_ctx, getState());
  enterRule(_localctx, 92, SparqlQueryParser::RuleArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(596);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(602);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::DISTINCT:
      case SparqlQueryParser::STR:
      case SparqlQueryParser::LANG:
      case SparqlQueryParser::LANGMATCHES:
      case SparqlQueryParser::DATATYPE:
      case SparqlQueryParser::BOUND:
      case SparqlQueryParser::SAMETERM:
      case SparqlQueryParser::ISIRI:
      case SparqlQueryParser::ISURI:
      case SparqlQueryParser::ISBLANK:
      case SparqlQueryParser::ISLITERAL:
      case SparqlQueryParser::REGEX:
      case SparqlQueryParser::SUBSTR:
      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE:
      case SparqlQueryParser::IRI:
      case SparqlQueryParser::URI:
      case SparqlQueryParser::BNODE:
      case SparqlQueryParser::RAND:
      case SparqlQueryParser::ABS:
      case SparqlQueryParser::CEIL:
      case SparqlQueryParser::FLOOR:
      case SparqlQueryParser::ROUND:
      case SparqlQueryParser::CONCAT:
      case SparqlQueryParser::STRLEN:
      case SparqlQueryParser::UCASE:
      case SparqlQueryParser::LCASE:
      case SparqlQueryParser::ENCODE_FOR_URI:
      case SparqlQueryParser::CONTAINS:
      case SparqlQueryParser::STRSTARTS:
      case SparqlQueryParser::STRENDS:
      case SparqlQueryParser::STRBEFORE:
      case SparqlQueryParser::STRAFTER:
      case SparqlQueryParser::REPLACE:
      case SparqlQueryParser::YEAR:
      case SparqlQueryParser::MONTH:
      case SparqlQueryParser::DAY:
      case SparqlQueryParser::HOURS:
      case SparqlQueryParser::MINUTES:
      case SparqlQueryParser::SECONDS:
      case SparqlQueryParser::TIMEZONE:
      case SparqlQueryParser::TZ:
      case SparqlQueryParser::NOW:
      case SparqlQueryParser::UUID:
      case SparqlQueryParser::STRUUID:
      case SparqlQueryParser::MD5:
      case SparqlQueryParser::SHA1:
      case SparqlQueryParser::SHA256:
      case SparqlQueryParser::SHA384:
      case SparqlQueryParser::SHA512:
      case SparqlQueryParser::COALESCE:
      case SparqlQueryParser::IF:
      case SparqlQueryParser::STRLANG:
      case SparqlQueryParser::STRDT:
      case SparqlQueryParser::ISNUMERIC:
      case SparqlQueryParser::COUNT:
      case SparqlQueryParser::SUM:
      case SparqlQueryParser::MIN:
      case SparqlQueryParser::MAX:
      case SparqlQueryParser::AVG:
      case SparqlQueryParser::SAMPLE:
      case SparqlQueryParser::GROUP_CONCAT:
      case SparqlQueryParser::NOT:
      case SparqlQueryParser::EXISTS:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2:
      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE:
      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::PLUS_SIGN:
      case SparqlQueryParser::MINUS_SIGN:
      case SparqlQueryParser::NEGATION: {
        setState(598);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(597);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(600);
        expressionList();
        break;
      }

      case SparqlQueryParser::CLOSE_BRACE: {
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(604);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionListContext ------------------------------------------------------------------

SparqlQueryParser::ExpressionListContext::ExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::ExpressionContext *> SparqlQueryParser::ExpressionListContext::expression() {
  return getRuleContexts<SparqlQueryParser::ExpressionContext>();
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::ExpressionListContext::expression(size_t i) {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::ExpressionListContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::ExpressionListContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}


size_t SparqlQueryParser::ExpressionListContext::getRuleIndex() const {
  return SparqlQueryParser::RuleExpressionList;
}


std::any SparqlQueryParser::ExpressionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitExpressionList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ExpressionListContext* SparqlQueryParser::expressionList() {
  ExpressionListContext *_localctx = _tracker.createInstance<ExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 94, SparqlQueryParser::RuleExpressionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(606);
    expression();
    setState(611);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::COMMA) {
      setState(607);
      match(SparqlQueryParser::COMMA);
      setState(608);
      expression();
      setState(613);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructTemplateContext ------------------------------------------------------------------

SparqlQueryParser::ConstructTemplateContext::ConstructTemplateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ConstructTemplateContext::OPEN_CURLY_BRACE() {
  return getToken(SparqlQueryParser::OPEN_CURLY_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::ConstructTemplateContext::CLOSE_CURLY_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_CURLY_BRACE, 0);
}

SparqlQueryParser::ConstructTriplesContext* SparqlQueryParser::ConstructTemplateContext::constructTriples() {
  return getRuleContext<SparqlQueryParser::ConstructTriplesContext>(0);
}


size_t SparqlQueryParser::ConstructTemplateContext::getRuleIndex() const {
  return SparqlQueryParser::RuleConstructTemplate;
}


std::any SparqlQueryParser::ConstructTemplateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitConstructTemplate(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ConstructTemplateContext* SparqlQueryParser::constructTemplate() {
  ConstructTemplateContext *_localctx = _tracker.createInstance<ConstructTemplateContext>(_ctx, getState());
  enterRule(_localctx, 96, SparqlQueryParser::RuleConstructTemplate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(614);
    match(SparqlQueryParser::OPEN_CURLY_BRACE);
    setState(616);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::TRUE

    || _la == SparqlQueryParser::FALSE || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & 4564451263) != 0)) {
      setState(615);
      constructTriples();
    }
    setState(618);
    match(SparqlQueryParser::CLOSE_CURLY_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructTriplesContext ------------------------------------------------------------------

SparqlQueryParser::ConstructTriplesContext::ConstructTriplesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::TriplesSameSubjectContext* SparqlQueryParser::ConstructTriplesContext::triplesSameSubject() {
  return getRuleContext<SparqlQueryParser::TriplesSameSubjectContext>(0);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::ConstructTriplesContext::DOT() {
  return getTokens(SparqlQueryParser::DOT);
}

tree::TerminalNode* SparqlQueryParser::ConstructTriplesContext::DOT(size_t i) {
  return getToken(SparqlQueryParser::DOT, i);
}

std::vector<SparqlQueryParser::ConstructTriplesContext *> SparqlQueryParser::ConstructTriplesContext::constructTriples() {
  return getRuleContexts<SparqlQueryParser::ConstructTriplesContext>();
}

SparqlQueryParser::ConstructTriplesContext* SparqlQueryParser::ConstructTriplesContext::constructTriples(size_t i) {
  return getRuleContext<SparqlQueryParser::ConstructTriplesContext>(i);
}


size_t SparqlQueryParser::ConstructTriplesContext::getRuleIndex() const {
  return SparqlQueryParser::RuleConstructTriples;
}


std::any SparqlQueryParser::ConstructTriplesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitConstructTriples(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ConstructTriplesContext* SparqlQueryParser::constructTriples() {
  ConstructTriplesContext *_localctx = _tracker.createInstance<ConstructTriplesContext>(_ctx, getState());
  enterRule(_localctx, 98, SparqlQueryParser::RuleConstructTriples);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(620);
    triplesSameSubject();
    setState(627);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(621);
        match(SparqlQueryParser::DOT);
        setState(623);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::TRUE

        || _la == SparqlQueryParser::FALSE || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & 4564451263) != 0)) {
          setState(622);
          constructTriples();
        } 
      }
      setState(629);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TriplesSameSubjectContext ------------------------------------------------------------------

SparqlQueryParser::TriplesSameSubjectContext::TriplesSameSubjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarOrTermContext* SparqlQueryParser::TriplesSameSubjectContext::varOrTerm() {
  return getRuleContext<SparqlQueryParser::VarOrTermContext>(0);
}

SparqlQueryParser::PropertyListNotEmptyContext* SparqlQueryParser::TriplesSameSubjectContext::propertyListNotEmpty() {
  return getRuleContext<SparqlQueryParser::PropertyListNotEmptyContext>(0);
}

SparqlQueryParser::TriplesNodeContext* SparqlQueryParser::TriplesSameSubjectContext::triplesNode() {
  return getRuleContext<SparqlQueryParser::TriplesNodeContext>(0);
}

SparqlQueryParser::PropertyListContext* SparqlQueryParser::TriplesSameSubjectContext::propertyList() {
  return getRuleContext<SparqlQueryParser::PropertyListContext>(0);
}


size_t SparqlQueryParser::TriplesSameSubjectContext::getRuleIndex() const {
  return SparqlQueryParser::RuleTriplesSameSubject;
}


std::any SparqlQueryParser::TriplesSameSubjectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitTriplesSameSubject(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::TriplesSameSubjectContext* SparqlQueryParser::triplesSameSubject() {
  TriplesSameSubjectContext *_localctx = _tracker.createInstance<TriplesSameSubjectContext>(_ctx, getState());
  enterRule(_localctx, 100, SparqlQueryParser::RuleTriplesSameSubject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(636);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(630);
      varOrTerm();
      setState(631);
      propertyListNotEmpty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(633);
      triplesNode();
      setState(634);
      propertyList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListContext ------------------------------------------------------------------

SparqlQueryParser::PropertyListContext::PropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PropertyListNotEmptyContext* SparqlQueryParser::PropertyListContext::propertyListNotEmpty() {
  return getRuleContext<SparqlQueryParser::PropertyListNotEmptyContext>(0);
}


size_t SparqlQueryParser::PropertyListContext::getRuleIndex() const {
  return SparqlQueryParser::RulePropertyList;
}


std::any SparqlQueryParser::PropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPropertyList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PropertyListContext* SparqlQueryParser::propertyList() {
  PropertyListContext *_localctx = _tracker.createInstance<PropertyListContext>(_ctx, getState());
  enterRule(_localctx, 102, SparqlQueryParser::RulePropertyList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(639);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::A || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & 55) != 0)) {
      setState(638);
      propertyListNotEmpty();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListNotEmptyContext ------------------------------------------------------------------

SparqlQueryParser::PropertyListNotEmptyContext::PropertyListNotEmptyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::VerbContext *> SparqlQueryParser::PropertyListNotEmptyContext::verb() {
  return getRuleContexts<SparqlQueryParser::VerbContext>();
}

SparqlQueryParser::VerbContext* SparqlQueryParser::PropertyListNotEmptyContext::verb(size_t i) {
  return getRuleContext<SparqlQueryParser::VerbContext>(i);
}

std::vector<SparqlQueryParser::ObjectListContext *> SparqlQueryParser::PropertyListNotEmptyContext::objectList() {
  return getRuleContexts<SparqlQueryParser::ObjectListContext>();
}

SparqlQueryParser::ObjectListContext* SparqlQueryParser::PropertyListNotEmptyContext::objectList(size_t i) {
  return getRuleContext<SparqlQueryParser::ObjectListContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::PropertyListNotEmptyContext::SEMICOLON() {
  return getTokens(SparqlQueryParser::SEMICOLON);
}

tree::TerminalNode* SparqlQueryParser::PropertyListNotEmptyContext::SEMICOLON(size_t i) {
  return getToken(SparqlQueryParser::SEMICOLON, i);
}


size_t SparqlQueryParser::PropertyListNotEmptyContext::getRuleIndex() const {
  return SparqlQueryParser::RulePropertyListNotEmpty;
}


std::any SparqlQueryParser::PropertyListNotEmptyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPropertyListNotEmpty(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PropertyListNotEmptyContext* SparqlQueryParser::propertyListNotEmpty() {
  PropertyListNotEmptyContext *_localctx = _tracker.createInstance<PropertyListNotEmptyContext>(_ctx, getState());
  enterRule(_localctx, 104, SparqlQueryParser::RulePropertyListNotEmpty);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(641);
    verb();
    setState(642);
    objectList();
    setState(651);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::SEMICOLON) {
      setState(643);
      match(SparqlQueryParser::SEMICOLON);
      setState(647);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SparqlQueryParser::A || ((((_la - 105) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 105)) & 55) != 0)) {
        setState(644);
        verb();
        setState(645);
        objectList();
      }
      setState(653);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VerbContext ------------------------------------------------------------------

SparqlQueryParser::VerbContext::VerbContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarOrIRIContext* SparqlQueryParser::VerbContext::varOrIRI() {
  return getRuleContext<SparqlQueryParser::VarOrIRIContext>(0);
}

tree::TerminalNode* SparqlQueryParser::VerbContext::A() {
  return getToken(SparqlQueryParser::A, 0);
}


size_t SparqlQueryParser::VerbContext::getRuleIndex() const {
  return SparqlQueryParser::RuleVerb;
}


std::any SparqlQueryParser::VerbContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitVerb(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::VerbContext* SparqlQueryParser::verb() {
  VerbContext *_localctx = _tracker.createInstance<VerbContext>(_ctx, getState());
  enterRule(_localctx, 106, SparqlQueryParser::RuleVerb);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(656);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 1);
        setState(654);
        varOrIRI();
        break;
      }

      case SparqlQueryParser::A: {
        enterOuterAlt(_localctx, 2);
        setState(655);
        match(SparqlQueryParser::A);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectListContext ------------------------------------------------------------------

SparqlQueryParser::ObjectListContext::ObjectListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::ObjectContext *> SparqlQueryParser::ObjectListContext::object() {
  return getRuleContexts<SparqlQueryParser::ObjectContext>();
}

SparqlQueryParser::ObjectContext* SparqlQueryParser::ObjectListContext::object(size_t i) {
  return getRuleContext<SparqlQueryParser::ObjectContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::ObjectListContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::ObjectListContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}


size_t SparqlQueryParser::ObjectListContext::getRuleIndex() const {
  return SparqlQueryParser::RuleObjectList;
}


std::any SparqlQueryParser::ObjectListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitObjectList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ObjectListContext* SparqlQueryParser::objectList() {
  ObjectListContext *_localctx = _tracker.createInstance<ObjectListContext>(_ctx, getState());
  enterRule(_localctx, 108, SparqlQueryParser::RuleObjectList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(658);
    object();
    setState(663);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::COMMA) {
      setState(659);
      match(SparqlQueryParser::COMMA);
      setState(660);
      object();
      setState(665);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectContext ------------------------------------------------------------------

SparqlQueryParser::ObjectContext::ObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::GraphNodeContext* SparqlQueryParser::ObjectContext::graphNode() {
  return getRuleContext<SparqlQueryParser::GraphNodeContext>(0);
}


size_t SparqlQueryParser::ObjectContext::getRuleIndex() const {
  return SparqlQueryParser::RuleObject;
}


std::any SparqlQueryParser::ObjectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitObject(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ObjectContext* SparqlQueryParser::object() {
  ObjectContext *_localctx = _tracker.createInstance<ObjectContext>(_ctx, getState());
  enterRule(_localctx, 110, SparqlQueryParser::RuleObject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(666);
    graphNode();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TriplesSameSubjectPathContext ------------------------------------------------------------------

SparqlQueryParser::TriplesSameSubjectPathContext::TriplesSameSubjectPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarOrTermContext* SparqlQueryParser::TriplesSameSubjectPathContext::varOrTerm() {
  return getRuleContext<SparqlQueryParser::VarOrTermContext>(0);
}

SparqlQueryParser::PropertyListPathNotEmptyContext* SparqlQueryParser::TriplesSameSubjectPathContext::propertyListPathNotEmpty() {
  return getRuleContext<SparqlQueryParser::PropertyListPathNotEmptyContext>(0);
}

SparqlQueryParser::TriplesNodePathContext* SparqlQueryParser::TriplesSameSubjectPathContext::triplesNodePath() {
  return getRuleContext<SparqlQueryParser::TriplesNodePathContext>(0);
}

SparqlQueryParser::PropertyListPathContext* SparqlQueryParser::TriplesSameSubjectPathContext::propertyListPath() {
  return getRuleContext<SparqlQueryParser::PropertyListPathContext>(0);
}


size_t SparqlQueryParser::TriplesSameSubjectPathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleTriplesSameSubjectPath;
}


std::any SparqlQueryParser::TriplesSameSubjectPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitTriplesSameSubjectPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::TriplesSameSubjectPathContext* SparqlQueryParser::triplesSameSubjectPath() {
  TriplesSameSubjectPathContext *_localctx = _tracker.createInstance<TriplesSameSubjectPathContext>(_ctx, getState());
  enterRule(_localctx, 112, SparqlQueryParser::RuleTriplesSameSubjectPath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(674);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(668);
      varOrTerm();
      setState(669);
      propertyListPathNotEmpty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(671);
      triplesNodePath();
      setState(672);
      propertyListPath();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListPathContext ------------------------------------------------------------------

SparqlQueryParser::PropertyListPathContext::PropertyListPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PropertyListPathNotEmptyContext* SparqlQueryParser::PropertyListPathContext::propertyListPathNotEmpty() {
  return getRuleContext<SparqlQueryParser::PropertyListPathNotEmptyContext>(0);
}


size_t SparqlQueryParser::PropertyListPathContext::getRuleIndex() const {
  return SparqlQueryParser::RulePropertyListPath;
}


std::any SparqlQueryParser::PropertyListPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPropertyListPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PropertyListPathContext* SparqlQueryParser::propertyListPath() {
  PropertyListPathContext *_localctx = _tracker.createInstance<PropertyListPathContext>(_ctx, getState());
  enterRule(_localctx, 114, SparqlQueryParser::RulePropertyListPath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(677);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::A

    || _la == SparqlQueryParser::ALL || ((((_la - 100) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 100)) & 70381629081313) != 0)) {
      setState(676);
      propertyListPathNotEmpty();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListPathNotEmptyContext ------------------------------------------------------------------

SparqlQueryParser::PropertyListPathNotEmptyContext::PropertyListPathNotEmptyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::ObjectListPathContext* SparqlQueryParser::PropertyListPathNotEmptyContext::objectListPath() {
  return getRuleContext<SparqlQueryParser::ObjectListPathContext>(0);
}

SparqlQueryParser::VerbPathContext* SparqlQueryParser::PropertyListPathNotEmptyContext::verbPath() {
  return getRuleContext<SparqlQueryParser::VerbPathContext>(0);
}

SparqlQueryParser::VerbSimpleContext* SparqlQueryParser::PropertyListPathNotEmptyContext::verbSimple() {
  return getRuleContext<SparqlQueryParser::VerbSimpleContext>(0);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::PropertyListPathNotEmptyContext::SEMICOLON() {
  return getTokens(SparqlQueryParser::SEMICOLON);
}

tree::TerminalNode* SparqlQueryParser::PropertyListPathNotEmptyContext::SEMICOLON(size_t i) {
  return getToken(SparqlQueryParser::SEMICOLON, i);
}

std::vector<SparqlQueryParser::PropertyListPathNotEmptyListContext *> SparqlQueryParser::PropertyListPathNotEmptyContext::propertyListPathNotEmptyList() {
  return getRuleContexts<SparqlQueryParser::PropertyListPathNotEmptyListContext>();
}

SparqlQueryParser::PropertyListPathNotEmptyListContext* SparqlQueryParser::PropertyListPathNotEmptyContext::propertyListPathNotEmptyList(size_t i) {
  return getRuleContext<SparqlQueryParser::PropertyListPathNotEmptyListContext>(i);
}


size_t SparqlQueryParser::PropertyListPathNotEmptyContext::getRuleIndex() const {
  return SparqlQueryParser::RulePropertyListPathNotEmpty;
}


std::any SparqlQueryParser::PropertyListPathNotEmptyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPropertyListPathNotEmpty(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PropertyListPathNotEmptyContext* SparqlQueryParser::propertyListPathNotEmpty() {
  PropertyListPathNotEmptyContext *_localctx = _tracker.createInstance<PropertyListPathNotEmptyContext>(_ctx, getState());
  enterRule(_localctx, 116, SparqlQueryParser::RulePropertyListPathNotEmpty);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(681);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::A:
      case SparqlQueryParser::ALL:
      case SparqlQueryParser::ANY:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::INVERSE:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::NEGATION: {
        setState(679);
        verbPath();
        break;
      }

      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        setState(680);
        verbSimple();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(683);
    objectListPath();
    setState(690);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::SEMICOLON) {
      setState(684);
      match(SparqlQueryParser::SEMICOLON);
      setState(686);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SparqlQueryParser::A

      || _la == SparqlQueryParser::ALL || ((((_la - 100) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 100)) & 70381629081313) != 0)) {
        setState(685);
        propertyListPathNotEmptyList();
      }
      setState(692);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListPathNotEmptyListContext ------------------------------------------------------------------

SparqlQueryParser::PropertyListPathNotEmptyListContext::PropertyListPathNotEmptyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::ObjectListContext* SparqlQueryParser::PropertyListPathNotEmptyListContext::objectList() {
  return getRuleContext<SparqlQueryParser::ObjectListContext>(0);
}

SparqlQueryParser::VerbPathContext* SparqlQueryParser::PropertyListPathNotEmptyListContext::verbPath() {
  return getRuleContext<SparqlQueryParser::VerbPathContext>(0);
}

SparqlQueryParser::VerbSimpleContext* SparqlQueryParser::PropertyListPathNotEmptyListContext::verbSimple() {
  return getRuleContext<SparqlQueryParser::VerbSimpleContext>(0);
}


size_t SparqlQueryParser::PropertyListPathNotEmptyListContext::getRuleIndex() const {
  return SparqlQueryParser::RulePropertyListPathNotEmptyList;
}


std::any SparqlQueryParser::PropertyListPathNotEmptyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPropertyListPathNotEmptyList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PropertyListPathNotEmptyListContext* SparqlQueryParser::propertyListPathNotEmptyList() {
  PropertyListPathNotEmptyListContext *_localctx = _tracker.createInstance<PropertyListPathNotEmptyListContext>(_ctx, getState());
  enterRule(_localctx, 118, SparqlQueryParser::RulePropertyListPathNotEmptyList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(695);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::A:
      case SparqlQueryParser::ALL:
      case SparqlQueryParser::ANY:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::INVERSE:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::NEGATION: {
        setState(693);
        verbPath();
        break;
      }

      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        setState(694);
        verbSimple();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(697);
    objectList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VerbPathContext ------------------------------------------------------------------

SparqlQueryParser::VerbPathContext::VerbPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PathContext* SparqlQueryParser::VerbPathContext::path() {
  return getRuleContext<SparqlQueryParser::PathContext>(0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::AS() {
  return getToken(SparqlQueryParser::AS, 0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::VerbPathContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::ANY() {
  return getToken(SparqlQueryParser::ANY, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::ALL() {
  return getToken(SparqlQueryParser::ALL, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::SHORTEST() {
  return getToken(SparqlQueryParser::SHORTEST, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::WALKS() {
  return getToken(SparqlQueryParser::WALKS, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::SIMPLE() {
  return getToken(SparqlQueryParser::SIMPLE, 0);
}

tree::TerminalNode* SparqlQueryParser::VerbPathContext::ACYCLIC() {
  return getToken(SparqlQueryParser::ACYCLIC, 0);
}


size_t SparqlQueryParser::VerbPathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleVerbPath;
}


std::any SparqlQueryParser::VerbPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitVerbPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::VerbPathContext* SparqlQueryParser::verbPath() {
  VerbPathContext *_localctx = _tracker.createInstance<VerbPathContext>(_ctx, getState());
  enterRule(_localctx, 120, SparqlQueryParser::RuleVerbPath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(713);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::A:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::INVERSE:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::NEGATION: {
        enterOuterAlt(_localctx, 1);
        setState(699);
        path();
        break;
      }

      case SparqlQueryParser::ALL:
      case SparqlQueryParser::ANY: {
        enterOuterAlt(_localctx, 2);
        setState(700);
        _la = _input->LA(1);
        if (!(_la == SparqlQueryParser::ALL

        || _la == SparqlQueryParser::ANY)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(702);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::SHORTEST) {
          setState(701);
          match(SparqlQueryParser::SHORTEST);
        }
        setState(705);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 102) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 102)) & 7) != 0)) {
          setState(704);
          _la = _input->LA(1);
          if (!(((((_la - 102) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 102)) & 7) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(707);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(708);
        path();
        setState(709);
        match(SparqlQueryParser::AS);
        setState(710);
        var();
        setState(711);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VerbSimpleContext ------------------------------------------------------------------

SparqlQueryParser::VerbSimpleContext::VerbSimpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarContext* SparqlQueryParser::VerbSimpleContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}


size_t SparqlQueryParser::VerbSimpleContext::getRuleIndex() const {
  return SparqlQueryParser::RuleVerbSimple;
}


std::any SparqlQueryParser::VerbSimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitVerbSimple(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::VerbSimpleContext* SparqlQueryParser::verbSimple() {
  VerbSimpleContext *_localctx = _tracker.createInstance<VerbSimpleContext>(_ctx, getState());
  enterRule(_localctx, 122, SparqlQueryParser::RuleVerbSimple);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(715);
    var();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectListPathContext ------------------------------------------------------------------

SparqlQueryParser::ObjectListPathContext::ObjectListPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::ObjectPathContext *> SparqlQueryParser::ObjectListPathContext::objectPath() {
  return getRuleContexts<SparqlQueryParser::ObjectPathContext>();
}

SparqlQueryParser::ObjectPathContext* SparqlQueryParser::ObjectListPathContext::objectPath(size_t i) {
  return getRuleContext<SparqlQueryParser::ObjectPathContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::ObjectListPathContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::ObjectListPathContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}


size_t SparqlQueryParser::ObjectListPathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleObjectListPath;
}


std::any SparqlQueryParser::ObjectListPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitObjectListPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ObjectListPathContext* SparqlQueryParser::objectListPath() {
  ObjectListPathContext *_localctx = _tracker.createInstance<ObjectListPathContext>(_ctx, getState());
  enterRule(_localctx, 124, SparqlQueryParser::RuleObjectListPath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(717);
    objectPath();
    setState(722);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::COMMA) {
      setState(718);
      match(SparqlQueryParser::COMMA);
      setState(719);
      objectPath();
      setState(724);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectPathContext ------------------------------------------------------------------

SparqlQueryParser::ObjectPathContext::ObjectPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::GraphNodePathContext* SparqlQueryParser::ObjectPathContext::graphNodePath() {
  return getRuleContext<SparqlQueryParser::GraphNodePathContext>(0);
}


size_t SparqlQueryParser::ObjectPathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleObjectPath;
}


std::any SparqlQueryParser::ObjectPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitObjectPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ObjectPathContext* SparqlQueryParser::objectPath() {
  ObjectPathContext *_localctx = _tracker.createInstance<ObjectPathContext>(_ctx, getState());
  enterRule(_localctx, 126, SparqlQueryParser::RuleObjectPath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(725);
    graphNodePath();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathContext ------------------------------------------------------------------

SparqlQueryParser::PathContext::PathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PathAlternativeContext* SparqlQueryParser::PathContext::pathAlternative() {
  return getRuleContext<SparqlQueryParser::PathAlternativeContext>(0);
}


size_t SparqlQueryParser::PathContext::getRuleIndex() const {
  return SparqlQueryParser::RulePath;
}


std::any SparqlQueryParser::PathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathContext* SparqlQueryParser::path() {
  PathContext *_localctx = _tracker.createInstance<PathContext>(_ctx, getState());
  enterRule(_localctx, 128, SparqlQueryParser::RulePath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(727);
    pathAlternative();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathAlternativeContext ------------------------------------------------------------------

SparqlQueryParser::PathAlternativeContext::PathAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::PathSequenceContext *> SparqlQueryParser::PathAlternativeContext::pathSequence() {
  return getRuleContexts<SparqlQueryParser::PathSequenceContext>();
}

SparqlQueryParser::PathSequenceContext* SparqlQueryParser::PathAlternativeContext::pathSequence(size_t i) {
  return getRuleContext<SparqlQueryParser::PathSequenceContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::PathAlternativeContext::PIPE() {
  return getTokens(SparqlQueryParser::PIPE);
}

tree::TerminalNode* SparqlQueryParser::PathAlternativeContext::PIPE(size_t i) {
  return getToken(SparqlQueryParser::PIPE, i);
}


size_t SparqlQueryParser::PathAlternativeContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathAlternative;
}


std::any SparqlQueryParser::PathAlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathAlternative(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathAlternativeContext* SparqlQueryParser::pathAlternative() {
  PathAlternativeContext *_localctx = _tracker.createInstance<PathAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 130, SparqlQueryParser::RulePathAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(729);
    pathSequence();
    setState(734);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::PIPE) {
      setState(730);
      match(SparqlQueryParser::PIPE);
      setState(731);
      pathSequence();
      setState(736);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathSequenceContext ------------------------------------------------------------------

SparqlQueryParser::PathSequenceContext::PathSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::PathEltOrInverseContext *> SparqlQueryParser::PathSequenceContext::pathEltOrInverse() {
  return getRuleContexts<SparqlQueryParser::PathEltOrInverseContext>();
}

SparqlQueryParser::PathEltOrInverseContext* SparqlQueryParser::PathSequenceContext::pathEltOrInverse(size_t i) {
  return getRuleContext<SparqlQueryParser::PathEltOrInverseContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::PathSequenceContext::DIVIDE() {
  return getTokens(SparqlQueryParser::DIVIDE);
}

tree::TerminalNode* SparqlQueryParser::PathSequenceContext::DIVIDE(size_t i) {
  return getToken(SparqlQueryParser::DIVIDE, i);
}


size_t SparqlQueryParser::PathSequenceContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathSequence;
}


std::any SparqlQueryParser::PathSequenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathSequence(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathSequenceContext* SparqlQueryParser::pathSequence() {
  PathSequenceContext *_localctx = _tracker.createInstance<PathSequenceContext>(_ctx, getState());
  enterRule(_localctx, 132, SparqlQueryParser::RulePathSequence);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(737);
    pathEltOrInverse();
    setState(742);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::DIVIDE) {
      setState(738);
      match(SparqlQueryParser::DIVIDE);
      setState(739);
      pathEltOrInverse();
      setState(744);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathEltContext ------------------------------------------------------------------

SparqlQueryParser::PathEltContext::PathEltContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PathPrimaryContext* SparqlQueryParser::PathEltContext::pathPrimary() {
  return getRuleContext<SparqlQueryParser::PathPrimaryContext>(0);
}

SparqlQueryParser::PathModContext* SparqlQueryParser::PathEltContext::pathMod() {
  return getRuleContext<SparqlQueryParser::PathModContext>(0);
}


size_t SparqlQueryParser::PathEltContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathElt;
}


std::any SparqlQueryParser::PathEltContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathElt(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathEltContext* SparqlQueryParser::pathElt() {
  PathEltContext *_localctx = _tracker.createInstance<PathEltContext>(_ctx, getState());
  enterRule(_localctx, 134, SparqlQueryParser::RulePathElt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(745);
    pathPrimary();
    setState(747);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 135) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 135)) & 833) != 0)) {
      setState(746);
      pathMod();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathEltOrInverseContext ------------------------------------------------------------------

SparqlQueryParser::PathEltOrInverseContext::PathEltOrInverseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PathEltContext* SparqlQueryParser::PathEltOrInverseContext::pathElt() {
  return getRuleContext<SparqlQueryParser::PathEltContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PathEltOrInverseContext::INVERSE() {
  return getToken(SparqlQueryParser::INVERSE, 0);
}


size_t SparqlQueryParser::PathEltOrInverseContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathEltOrInverse;
}


std::any SparqlQueryParser::PathEltOrInverseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathEltOrInverse(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathEltOrInverseContext* SparqlQueryParser::pathEltOrInverse() {
  PathEltOrInverseContext *_localctx = _tracker.createInstance<PathEltOrInverseContext>(_ctx, getState());
  enterRule(_localctx, 136, SparqlQueryParser::RulePathEltOrInverse);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(750);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::INVERSE) {
      setState(749);
      match(SparqlQueryParser::INVERSE);
    }
    setState(752);
    pathElt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathModContext ------------------------------------------------------------------

SparqlQueryParser::PathModContext::PathModContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PathModContext::QUESTION_MARK() {
  return getToken(SparqlQueryParser::QUESTION_MARK, 0);
}

tree::TerminalNode* SparqlQueryParser::PathModContext::ASTERISK() {
  return getToken(SparqlQueryParser::ASTERISK, 0);
}

tree::TerminalNode* SparqlQueryParser::PathModContext::PLUS_SIGN() {
  return getToken(SparqlQueryParser::PLUS_SIGN, 0);
}

tree::TerminalNode* SparqlQueryParser::PathModContext::OPEN_CURLY_BRACE() {
  return getToken(SparqlQueryParser::OPEN_CURLY_BRACE, 0);
}

SparqlQueryParser::PathQuantityContext* SparqlQueryParser::PathModContext::pathQuantity() {
  return getRuleContext<SparqlQueryParser::PathQuantityContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PathModContext::CLOSE_CURLY_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_CURLY_BRACE, 0);
}


size_t SparqlQueryParser::PathModContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathMod;
}


std::any SparqlQueryParser::PathModContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathMod(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathModContext* SparqlQueryParser::pathMod() {
  PathModContext *_localctx = _tracker.createInstance<PathModContext>(_ctx, getState());
  enterRule(_localctx, 138, SparqlQueryParser::RulePathMod);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(761);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::QUESTION_MARK: {
        enterOuterAlt(_localctx, 1);
        setState(754);
        match(SparqlQueryParser::QUESTION_MARK);
        break;
      }

      case SparqlQueryParser::ASTERISK: {
        enterOuterAlt(_localctx, 2);
        setState(755);
        match(SparqlQueryParser::ASTERISK);
        break;
      }

      case SparqlQueryParser::PLUS_SIGN: {
        enterOuterAlt(_localctx, 3);
        setState(756);
        match(SparqlQueryParser::PLUS_SIGN);
        break;
      }

      case SparqlQueryParser::OPEN_CURLY_BRACE: {
        enterOuterAlt(_localctx, 4);
        setState(757);
        match(SparqlQueryParser::OPEN_CURLY_BRACE);
        setState(758);
        pathQuantity();
        setState(759);
        match(SparqlQueryParser::CLOSE_CURLY_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathQuantityContext ------------------------------------------------------------------

SparqlQueryParser::PathQuantityContext::PathQuantityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PathQuantityExactContext* SparqlQueryParser::PathQuantityContext::pathQuantityExact() {
  return getRuleContext<SparqlQueryParser::PathQuantityExactContext>(0);
}

SparqlQueryParser::PathQuantityRangeContext* SparqlQueryParser::PathQuantityContext::pathQuantityRange() {
  return getRuleContext<SparqlQueryParser::PathQuantityRangeContext>(0);
}

SparqlQueryParser::PathQuantityMinContext* SparqlQueryParser::PathQuantityContext::pathQuantityMin() {
  return getRuleContext<SparqlQueryParser::PathQuantityMinContext>(0);
}

SparqlQueryParser::PathQuantityMaxContext* SparqlQueryParser::PathQuantityContext::pathQuantityMax() {
  return getRuleContext<SparqlQueryParser::PathQuantityMaxContext>(0);
}


size_t SparqlQueryParser::PathQuantityContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathQuantity;
}


std::any SparqlQueryParser::PathQuantityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathQuantity(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathQuantityContext* SparqlQueryParser::pathQuantity() {
  PathQuantityContext *_localctx = _tracker.createInstance<PathQuantityContext>(_ctx, getState());
  enterRule(_localctx, 140, SparqlQueryParser::RulePathQuantity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(767);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(763);
      pathQuantityExact();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(764);
      pathQuantityRange();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(765);
      pathQuantityMin();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(766);
      pathQuantityMax();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathQuantityExactContext ------------------------------------------------------------------

SparqlQueryParser::PathQuantityExactContext::PathQuantityExactContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PathQuantityExactContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}


size_t SparqlQueryParser::PathQuantityExactContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathQuantityExact;
}


std::any SparqlQueryParser::PathQuantityExactContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathQuantityExact(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathQuantityExactContext* SparqlQueryParser::pathQuantityExact() {
  PathQuantityExactContext *_localctx = _tracker.createInstance<PathQuantityExactContext>(_ctx, getState());
  enterRule(_localctx, 142, SparqlQueryParser::RulePathQuantityExact);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(769);
    match(SparqlQueryParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathQuantityRangeContext ------------------------------------------------------------------

SparqlQueryParser::PathQuantityRangeContext::PathQuantityRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PathQuantityRangeContext::COMMA() {
  return getToken(SparqlQueryParser::COMMA, 0);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::PathQuantityRangeContext::INTEGER() {
  return getTokens(SparqlQueryParser::INTEGER);
}

tree::TerminalNode* SparqlQueryParser::PathQuantityRangeContext::INTEGER(size_t i) {
  return getToken(SparqlQueryParser::INTEGER, i);
}


size_t SparqlQueryParser::PathQuantityRangeContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathQuantityRange;
}


std::any SparqlQueryParser::PathQuantityRangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathQuantityRange(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathQuantityRangeContext* SparqlQueryParser::pathQuantityRange() {
  PathQuantityRangeContext *_localctx = _tracker.createInstance<PathQuantityRangeContext>(_ctx, getState());
  enterRule(_localctx, 144, SparqlQueryParser::RulePathQuantityRange);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(771);
    antlrcpp::downCast<PathQuantityRangeContext *>(_localctx)->min = match(SparqlQueryParser::INTEGER);
    setState(772);
    match(SparqlQueryParser::COMMA);
    setState(773);
    antlrcpp::downCast<PathQuantityRangeContext *>(_localctx)->max = match(SparqlQueryParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathQuantityMinContext ------------------------------------------------------------------

SparqlQueryParser::PathQuantityMinContext::PathQuantityMinContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PathQuantityMinContext::COMMA() {
  return getToken(SparqlQueryParser::COMMA, 0);
}

tree::TerminalNode* SparqlQueryParser::PathQuantityMinContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}


size_t SparqlQueryParser::PathQuantityMinContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathQuantityMin;
}


std::any SparqlQueryParser::PathQuantityMinContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathQuantityMin(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathQuantityMinContext* SparqlQueryParser::pathQuantityMin() {
  PathQuantityMinContext *_localctx = _tracker.createInstance<PathQuantityMinContext>(_ctx, getState());
  enterRule(_localctx, 146, SparqlQueryParser::RulePathQuantityMin);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(775);
    antlrcpp::downCast<PathQuantityMinContext *>(_localctx)->min = match(SparqlQueryParser::INTEGER);
    setState(776);
    match(SparqlQueryParser::COMMA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathQuantityMaxContext ------------------------------------------------------------------

SparqlQueryParser::PathQuantityMaxContext::PathQuantityMaxContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PathQuantityMaxContext::COMMA() {
  return getToken(SparqlQueryParser::COMMA, 0);
}

tree::TerminalNode* SparqlQueryParser::PathQuantityMaxContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}


size_t SparqlQueryParser::PathQuantityMaxContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathQuantityMax;
}


std::any SparqlQueryParser::PathQuantityMaxContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathQuantityMax(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathQuantityMaxContext* SparqlQueryParser::pathQuantityMax() {
  PathQuantityMaxContext *_localctx = _tracker.createInstance<PathQuantityMaxContext>(_ctx, getState());
  enterRule(_localctx, 148, SparqlQueryParser::RulePathQuantityMax);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(778);
    match(SparqlQueryParser::COMMA);
    setState(779);
    antlrcpp::downCast<PathQuantityMaxContext *>(_localctx)->max = match(SparqlQueryParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPrimaryContext ------------------------------------------------------------------

SparqlQueryParser::PathPrimaryContext::PathPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::IriContext* SparqlQueryParser::PathPrimaryContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PathPrimaryContext::A() {
  return getToken(SparqlQueryParser::A, 0);
}

tree::TerminalNode* SparqlQueryParser::PathPrimaryContext::NEGATION() {
  return getToken(SparqlQueryParser::NEGATION, 0);
}

SparqlQueryParser::PathNegatedPropertySetContext* SparqlQueryParser::PathPrimaryContext::pathNegatedPropertySet() {
  return getRuleContext<SparqlQueryParser::PathNegatedPropertySetContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PathPrimaryContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::PathContext* SparqlQueryParser::PathPrimaryContext::path() {
  return getRuleContext<SparqlQueryParser::PathContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PathPrimaryContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}


size_t SparqlQueryParser::PathPrimaryContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathPrimary;
}


std::any SparqlQueryParser::PathPrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathPrimary(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathPrimaryContext* SparqlQueryParser::pathPrimary() {
  PathPrimaryContext *_localctx = _tracker.createInstance<PathPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 150, SparqlQueryParser::RulePathPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(789);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 1);
        setState(781);
        iri();
        break;
      }

      case SparqlQueryParser::A: {
        enterOuterAlt(_localctx, 2);
        setState(782);
        match(SparqlQueryParser::A);
        break;
      }

      case SparqlQueryParser::NEGATION: {
        enterOuterAlt(_localctx, 3);
        setState(783);
        match(SparqlQueryParser::NEGATION);
        setState(784);
        pathNegatedPropertySet();
        break;
      }

      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 4);
        setState(785);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(786);
        path();
        setState(787);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathNegatedPropertySetContext ------------------------------------------------------------------

SparqlQueryParser::PathNegatedPropertySetContext::PathNegatedPropertySetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::PathOneInPropertySetContext *> SparqlQueryParser::PathNegatedPropertySetContext::pathOneInPropertySet() {
  return getRuleContexts<SparqlQueryParser::PathOneInPropertySetContext>();
}

SparqlQueryParser::PathOneInPropertySetContext* SparqlQueryParser::PathNegatedPropertySetContext::pathOneInPropertySet(size_t i) {
  return getRuleContext<SparqlQueryParser::PathOneInPropertySetContext>(i);
}

tree::TerminalNode* SparqlQueryParser::PathNegatedPropertySetContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::PathNegatedPropertySetContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::PathNegatedPropertySetContext::PIPE() {
  return getTokens(SparqlQueryParser::PIPE);
}

tree::TerminalNode* SparqlQueryParser::PathNegatedPropertySetContext::PIPE(size_t i) {
  return getToken(SparqlQueryParser::PIPE, i);
}


size_t SparqlQueryParser::PathNegatedPropertySetContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathNegatedPropertySet;
}


std::any SparqlQueryParser::PathNegatedPropertySetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathNegatedPropertySet(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathNegatedPropertySetContext* SparqlQueryParser::pathNegatedPropertySet() {
  PathNegatedPropertySetContext *_localctx = _tracker.createInstance<PathNegatedPropertySetContext>(_ctx, getState());
  enterRule(_localctx, 152, SparqlQueryParser::RulePathNegatedPropertySet);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(804);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::A:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::INVERSE: {
        enterOuterAlt(_localctx, 1);
        setState(791);
        pathOneInPropertySet();
        break;
      }

      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(792);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(801);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::A || ((((_la - 105) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 105)) & 134217735) != 0)) {
          setState(793);
          pathOneInPropertySet();
          setState(798);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == SparqlQueryParser::PIPE) {
            setState(794);
            match(SparqlQueryParser::PIPE);
            setState(795);
            pathOneInPropertySet();
            setState(800);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(803);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathOneInPropertySetContext ------------------------------------------------------------------

SparqlQueryParser::PathOneInPropertySetContext::PathOneInPropertySetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::IriContext* SparqlQueryParser::PathOneInPropertySetContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PathOneInPropertySetContext::A() {
  return getToken(SparqlQueryParser::A, 0);
}

tree::TerminalNode* SparqlQueryParser::PathOneInPropertySetContext::INVERSE() {
  return getToken(SparqlQueryParser::INVERSE, 0);
}


size_t SparqlQueryParser::PathOneInPropertySetContext::getRuleIndex() const {
  return SparqlQueryParser::RulePathOneInPropertySet;
}


std::any SparqlQueryParser::PathOneInPropertySetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPathOneInPropertySet(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PathOneInPropertySetContext* SparqlQueryParser::pathOneInPropertySet() {
  PathOneInPropertySetContext *_localctx = _tracker.createInstance<PathOneInPropertySetContext>(_ctx, getState());
  enterRule(_localctx, 154, SparqlQueryParser::RulePathOneInPropertySet);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(807);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::INVERSE) {
      setState(806);
      match(SparqlQueryParser::INVERSE);
    }
    setState(811);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        setState(809);
        iri();
        break;
      }

      case SparqlQueryParser::A: {
        setState(810);
        match(SparqlQueryParser::A);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerContext ------------------------------------------------------------------

SparqlQueryParser::IntegerContext::IntegerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::IntegerContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}


size_t SparqlQueryParser::IntegerContext::getRuleIndex() const {
  return SparqlQueryParser::RuleInteger;
}


std::any SparqlQueryParser::IntegerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitInteger(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::IntegerContext* SparqlQueryParser::integer() {
  IntegerContext *_localctx = _tracker.createInstance<IntegerContext>(_ctx, getState());
  enterRule(_localctx, 156, SparqlQueryParser::RuleInteger);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(813);
    match(SparqlQueryParser::INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TriplesNodeContext ------------------------------------------------------------------

SparqlQueryParser::TriplesNodeContext::TriplesNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::CollectionContext* SparqlQueryParser::TriplesNodeContext::collection() {
  return getRuleContext<SparqlQueryParser::CollectionContext>(0);
}

SparqlQueryParser::BlankNodePropertyListContext* SparqlQueryParser::TriplesNodeContext::blankNodePropertyList() {
  return getRuleContext<SparqlQueryParser::BlankNodePropertyListContext>(0);
}


size_t SparqlQueryParser::TriplesNodeContext::getRuleIndex() const {
  return SparqlQueryParser::RuleTriplesNode;
}


std::any SparqlQueryParser::TriplesNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitTriplesNode(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::TriplesNodeContext* SparqlQueryParser::triplesNode() {
  TriplesNodeContext *_localctx = _tracker.createInstance<TriplesNodeContext>(_ctx, getState());
  enterRule(_localctx, 158, SparqlQueryParser::RuleTriplesNode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(817);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(815);
        collection();
        break;
      }

      case SparqlQueryParser::OPEN_SQUARE_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(816);
        blankNodePropertyList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlankNodePropertyListContext ------------------------------------------------------------------

SparqlQueryParser::BlankNodePropertyListContext::BlankNodePropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::BlankNodePropertyListContext::OPEN_SQUARE_BRACKET() {
  return getToken(SparqlQueryParser::OPEN_SQUARE_BRACKET, 0);
}

SparqlQueryParser::PropertyListNotEmptyContext* SparqlQueryParser::BlankNodePropertyListContext::propertyListNotEmpty() {
  return getRuleContext<SparqlQueryParser::PropertyListNotEmptyContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BlankNodePropertyListContext::CLOSE_SQUARE_BRACKET() {
  return getToken(SparqlQueryParser::CLOSE_SQUARE_BRACKET, 0);
}


size_t SparqlQueryParser::BlankNodePropertyListContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBlankNodePropertyList;
}


std::any SparqlQueryParser::BlankNodePropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBlankNodePropertyList(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BlankNodePropertyListContext* SparqlQueryParser::blankNodePropertyList() {
  BlankNodePropertyListContext *_localctx = _tracker.createInstance<BlankNodePropertyListContext>(_ctx, getState());
  enterRule(_localctx, 160, SparqlQueryParser::RuleBlankNodePropertyList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(819);
    match(SparqlQueryParser::OPEN_SQUARE_BRACKET);
    setState(820);
    propertyListNotEmpty();
    setState(821);
    match(SparqlQueryParser::CLOSE_SQUARE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TriplesNodePathContext ------------------------------------------------------------------

SparqlQueryParser::TriplesNodePathContext::TriplesNodePathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::CollectionPathContext* SparqlQueryParser::TriplesNodePathContext::collectionPath() {
  return getRuleContext<SparqlQueryParser::CollectionPathContext>(0);
}

SparqlQueryParser::BlankNodePropertyListPathContext* SparqlQueryParser::TriplesNodePathContext::blankNodePropertyListPath() {
  return getRuleContext<SparqlQueryParser::BlankNodePropertyListPathContext>(0);
}


size_t SparqlQueryParser::TriplesNodePathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleTriplesNodePath;
}


std::any SparqlQueryParser::TriplesNodePathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitTriplesNodePath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::TriplesNodePathContext* SparqlQueryParser::triplesNodePath() {
  TriplesNodePathContext *_localctx = _tracker.createInstance<TriplesNodePathContext>(_ctx, getState());
  enterRule(_localctx, 162, SparqlQueryParser::RuleTriplesNodePath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(825);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(823);
        collectionPath();
        break;
      }

      case SparqlQueryParser::OPEN_SQUARE_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(824);
        blankNodePropertyListPath();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlankNodePropertyListPathContext ------------------------------------------------------------------

SparqlQueryParser::BlankNodePropertyListPathContext::BlankNodePropertyListPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::BlankNodePropertyListPathContext::OPEN_SQUARE_BRACKET() {
  return getToken(SparqlQueryParser::OPEN_SQUARE_BRACKET, 0);
}

SparqlQueryParser::PropertyListPathNotEmptyContext* SparqlQueryParser::BlankNodePropertyListPathContext::propertyListPathNotEmpty() {
  return getRuleContext<SparqlQueryParser::PropertyListPathNotEmptyContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BlankNodePropertyListPathContext::CLOSE_SQUARE_BRACKET() {
  return getToken(SparqlQueryParser::CLOSE_SQUARE_BRACKET, 0);
}


size_t SparqlQueryParser::BlankNodePropertyListPathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBlankNodePropertyListPath;
}


std::any SparqlQueryParser::BlankNodePropertyListPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBlankNodePropertyListPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BlankNodePropertyListPathContext* SparqlQueryParser::blankNodePropertyListPath() {
  BlankNodePropertyListPathContext *_localctx = _tracker.createInstance<BlankNodePropertyListPathContext>(_ctx, getState());
  enterRule(_localctx, 164, SparqlQueryParser::RuleBlankNodePropertyListPath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(827);
    match(SparqlQueryParser::OPEN_SQUARE_BRACKET);
    setState(828);
    propertyListPathNotEmpty();
    setState(829);
    match(SparqlQueryParser::CLOSE_SQUARE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionContext ------------------------------------------------------------------

SparqlQueryParser::CollectionContext::CollectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::CollectionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::CollectionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

std::vector<SparqlQueryParser::GraphNodeContext *> SparqlQueryParser::CollectionContext::graphNode() {
  return getRuleContexts<SparqlQueryParser::GraphNodeContext>();
}

SparqlQueryParser::GraphNodeContext* SparqlQueryParser::CollectionContext::graphNode(size_t i) {
  return getRuleContext<SparqlQueryParser::GraphNodeContext>(i);
}


size_t SparqlQueryParser::CollectionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleCollection;
}


std::any SparqlQueryParser::CollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitCollection(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::CollectionContext* SparqlQueryParser::collection() {
  CollectionContext *_localctx = _tracker.createInstance<CollectionContext>(_ctx, getState());
  enterRule(_localctx, 166, SparqlQueryParser::RuleCollection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(831);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(833); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(832);
      graphNode();
      setState(835); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == SparqlQueryParser::TRUE

    || _la == SparqlQueryParser::FALSE || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & 4564451263) != 0));
    setState(837);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionPathContext ------------------------------------------------------------------

SparqlQueryParser::CollectionPathContext::CollectionPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::CollectionPathContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::CollectionPathContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

std::vector<SparqlQueryParser::GraphNodePathContext *> SparqlQueryParser::CollectionPathContext::graphNodePath() {
  return getRuleContexts<SparqlQueryParser::GraphNodePathContext>();
}

SparqlQueryParser::GraphNodePathContext* SparqlQueryParser::CollectionPathContext::graphNodePath(size_t i) {
  return getRuleContext<SparqlQueryParser::GraphNodePathContext>(i);
}


size_t SparqlQueryParser::CollectionPathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleCollectionPath;
}


std::any SparqlQueryParser::CollectionPathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitCollectionPath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::CollectionPathContext* SparqlQueryParser::collectionPath() {
  CollectionPathContext *_localctx = _tracker.createInstance<CollectionPathContext>(_ctx, getState());
  enterRule(_localctx, 168, SparqlQueryParser::RuleCollectionPath);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(839);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(841); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(840);
      graphNodePath();
      setState(843); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == SparqlQueryParser::TRUE

    || _la == SparqlQueryParser::FALSE || ((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & 4564451263) != 0));
    setState(845);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphNodeContext ------------------------------------------------------------------

SparqlQueryParser::GraphNodeContext::GraphNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarOrTermContext* SparqlQueryParser::GraphNodeContext::varOrTerm() {
  return getRuleContext<SparqlQueryParser::VarOrTermContext>(0);
}

SparqlQueryParser::TriplesNodeContext* SparqlQueryParser::GraphNodeContext::triplesNode() {
  return getRuleContext<SparqlQueryParser::TriplesNodeContext>(0);
}


size_t SparqlQueryParser::GraphNodeContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGraphNode;
}


std::any SparqlQueryParser::GraphNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGraphNode(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GraphNodeContext* SparqlQueryParser::graphNode() {
  GraphNodeContext *_localctx = _tracker.createInstance<GraphNodeContext>(_ctx, getState());
  enterRule(_localctx, 170, SparqlQueryParser::RuleGraphNode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(849);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(847);
      varOrTerm();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(848);
      triplesNode();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphNodePathContext ------------------------------------------------------------------

SparqlQueryParser::GraphNodePathContext::GraphNodePathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarOrTermContext* SparqlQueryParser::GraphNodePathContext::varOrTerm() {
  return getRuleContext<SparqlQueryParser::VarOrTermContext>(0);
}

SparqlQueryParser::TriplesNodePathContext* SparqlQueryParser::GraphNodePathContext::triplesNodePath() {
  return getRuleContext<SparqlQueryParser::TriplesNodePathContext>(0);
}


size_t SparqlQueryParser::GraphNodePathContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGraphNodePath;
}


std::any SparqlQueryParser::GraphNodePathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGraphNodePath(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GraphNodePathContext* SparqlQueryParser::graphNodePath() {
  GraphNodePathContext *_localctx = _tracker.createInstance<GraphNodePathContext>(_ctx, getState());
  enterRule(_localctx, 172, SparqlQueryParser::RuleGraphNodePath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(853);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(851);
      varOrTerm();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(852);
      triplesNodePath();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarOrTermContext ------------------------------------------------------------------

SparqlQueryParser::VarOrTermContext::VarOrTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarContext* SparqlQueryParser::VarOrTermContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

SparqlQueryParser::GraphTermContext* SparqlQueryParser::VarOrTermContext::graphTerm() {
  return getRuleContext<SparqlQueryParser::GraphTermContext>(0);
}


size_t SparqlQueryParser::VarOrTermContext::getRuleIndex() const {
  return SparqlQueryParser::RuleVarOrTerm;
}


std::any SparqlQueryParser::VarOrTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitVarOrTerm(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::VarOrTermContext* SparqlQueryParser::varOrTerm() {
  VarOrTermContext *_localctx = _tracker.createInstance<VarOrTermContext>(_ctx, getState());
  enterRule(_localctx, 174, SparqlQueryParser::RuleVarOrTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(857);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 1);
        setState(855);
        var();
        break;
      }

      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::BLANK_NODE_LABEL:
      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE:
      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::OPEN_SQUARE_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(856);
        graphTerm();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarOrIRIContext ------------------------------------------------------------------

SparqlQueryParser::VarOrIRIContext::VarOrIRIContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::VarContext* SparqlQueryParser::VarOrIRIContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

SparqlQueryParser::IriContext* SparqlQueryParser::VarOrIRIContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}


size_t SparqlQueryParser::VarOrIRIContext::getRuleIndex() const {
  return SparqlQueryParser::RuleVarOrIRI;
}


std::any SparqlQueryParser::VarOrIRIContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitVarOrIRI(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::VarOrIRIContext* SparqlQueryParser::varOrIRI() {
  VarOrIRIContext *_localctx = _tracker.createInstance<VarOrIRIContext>(_ctx, getState());
  enterRule(_localctx, 176, SparqlQueryParser::RuleVarOrIRI);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(861);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 1);
        setState(859);
        var();
        break;
      }

      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 2);
        setState(860);
        iri();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarContext ------------------------------------------------------------------

SparqlQueryParser::VarContext::VarContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::VarContext::VAR1() {
  return getToken(SparqlQueryParser::VAR1, 0);
}

tree::TerminalNode* SparqlQueryParser::VarContext::VAR2() {
  return getToken(SparqlQueryParser::VAR2, 0);
}


size_t SparqlQueryParser::VarContext::getRuleIndex() const {
  return SparqlQueryParser::RuleVar;
}


std::any SparqlQueryParser::VarContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitVar(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::VarContext* SparqlQueryParser::var() {
  VarContext *_localctx = _tracker.createInstance<VarContext>(_ctx, getState());
  enterRule(_localctx, 178, SparqlQueryParser::RuleVar);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(863);
    _la = _input->LA(1);
    if (!(_la == SparqlQueryParser::VAR1

    || _la == SparqlQueryParser::VAR2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphTermContext ------------------------------------------------------------------

SparqlQueryParser::GraphTermContext::GraphTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::IriContext* SparqlQueryParser::GraphTermContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

SparqlQueryParser::RdfLiteralContext* SparqlQueryParser::GraphTermContext::rdfLiteral() {
  return getRuleContext<SparqlQueryParser::RdfLiteralContext>(0);
}

SparqlQueryParser::NumericLiteralContext* SparqlQueryParser::GraphTermContext::numericLiteral() {
  return getRuleContext<SparqlQueryParser::NumericLiteralContext>(0);
}

SparqlQueryParser::BooleanLiteralContext* SparqlQueryParser::GraphTermContext::booleanLiteral() {
  return getRuleContext<SparqlQueryParser::BooleanLiteralContext>(0);
}

SparqlQueryParser::BlankNodeContext* SparqlQueryParser::GraphTermContext::blankNode() {
  return getRuleContext<SparqlQueryParser::BlankNodeContext>(0);
}

SparqlQueryParser::NilContext* SparqlQueryParser::GraphTermContext::nil() {
  return getRuleContext<SparqlQueryParser::NilContext>(0);
}


size_t SparqlQueryParser::GraphTermContext::getRuleIndex() const {
  return SparqlQueryParser::RuleGraphTerm;
}


std::any SparqlQueryParser::GraphTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitGraphTerm(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::GraphTermContext* SparqlQueryParser::graphTerm() {
  GraphTermContext *_localctx = _tracker.createInstance<GraphTermContext>(_ctx, getState());
  enterRule(_localctx, 180, SparqlQueryParser::RuleGraphTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(871);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 1);
        setState(865);
        iri();
        break;
      }

      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2: {
        enterOuterAlt(_localctx, 2);
        setState(866);
        rdfLiteral();
        break;
      }

      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE: {
        enterOuterAlt(_localctx, 3);
        setState(867);
        numericLiteral();
        break;
      }

      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE: {
        enterOuterAlt(_localctx, 4);
        setState(868);
        booleanLiteral();
        break;
      }

      case SparqlQueryParser::BLANK_NODE_LABEL:
      case SparqlQueryParser::OPEN_SQUARE_BRACKET: {
        enterOuterAlt(_localctx, 5);
        setState(869);
        blankNode();
        break;
      }

      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 6);
        setState(870);
        nil();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NilContext ------------------------------------------------------------------

SparqlQueryParser::NilContext::NilContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::NilContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::NilContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}


size_t SparqlQueryParser::NilContext::getRuleIndex() const {
  return SparqlQueryParser::RuleNil;
}


std::any SparqlQueryParser::NilContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitNil(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::NilContext* SparqlQueryParser::nil() {
  NilContext *_localctx = _tracker.createInstance<NilContext>(_ctx, getState());
  enterRule(_localctx, 182, SparqlQueryParser::RuleNil);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(873);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(874);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

SparqlQueryParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::ConditionalOrExpressionContext* SparqlQueryParser::ExpressionContext::conditionalOrExpression() {
  return getRuleContext<SparqlQueryParser::ConditionalOrExpressionContext>(0);
}


size_t SparqlQueryParser::ExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleExpression;
}


std::any SparqlQueryParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 184, SparqlQueryParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(876);
    conditionalOrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalOrExpressionContext ------------------------------------------------------------------

SparqlQueryParser::ConditionalOrExpressionContext::ConditionalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::ConditionalAndExpressionContext *> SparqlQueryParser::ConditionalOrExpressionContext::conditionalAndExpression() {
  return getRuleContexts<SparqlQueryParser::ConditionalAndExpressionContext>();
}

SparqlQueryParser::ConditionalAndExpressionContext* SparqlQueryParser::ConditionalOrExpressionContext::conditionalAndExpression(size_t i) {
  return getRuleContext<SparqlQueryParser::ConditionalAndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::ConditionalOrExpressionContext::OR() {
  return getTokens(SparqlQueryParser::OR);
}

tree::TerminalNode* SparqlQueryParser::ConditionalOrExpressionContext::OR(size_t i) {
  return getToken(SparqlQueryParser::OR, i);
}


size_t SparqlQueryParser::ConditionalOrExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleConditionalOrExpression;
}


std::any SparqlQueryParser::ConditionalOrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitConditionalOrExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ConditionalOrExpressionContext* SparqlQueryParser::conditionalOrExpression() {
  ConditionalOrExpressionContext *_localctx = _tracker.createInstance<ConditionalOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 186, SparqlQueryParser::RuleConditionalOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(878);
    conditionalAndExpression();
    setState(883);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::OR) {
      setState(879);
      match(SparqlQueryParser::OR);
      setState(880);
      conditionalAndExpression();
      setState(885);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalAndExpressionContext ------------------------------------------------------------------

SparqlQueryParser::ConditionalAndExpressionContext::ConditionalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::RelationalExpressionContext *> SparqlQueryParser::ConditionalAndExpressionContext::relationalExpression() {
  return getRuleContexts<SparqlQueryParser::RelationalExpressionContext>();
}

SparqlQueryParser::RelationalExpressionContext* SparqlQueryParser::ConditionalAndExpressionContext::relationalExpression(size_t i) {
  return getRuleContext<SparqlQueryParser::RelationalExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::ConditionalAndExpressionContext::AND() {
  return getTokens(SparqlQueryParser::AND);
}

tree::TerminalNode* SparqlQueryParser::ConditionalAndExpressionContext::AND(size_t i) {
  return getToken(SparqlQueryParser::AND, i);
}


size_t SparqlQueryParser::ConditionalAndExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleConditionalAndExpression;
}


std::any SparqlQueryParser::ConditionalAndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitConditionalAndExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ConditionalAndExpressionContext* SparqlQueryParser::conditionalAndExpression() {
  ConditionalAndExpressionContext *_localctx = _tracker.createInstance<ConditionalAndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 188, SparqlQueryParser::RuleConditionalAndExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(886);
    relationalExpression();
    setState(891);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::AND) {
      setState(887);
      match(SparqlQueryParser::AND);
      setState(888);
      relationalExpression();
      setState(893);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

SparqlQueryParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::AdditiveExpressionContext *> SparqlQueryParser::RelationalExpressionContext::additiveExpression() {
  return getRuleContexts<SparqlQueryParser::AdditiveExpressionContext>();
}

SparqlQueryParser::AdditiveExpressionContext* SparqlQueryParser::RelationalExpressionContext::additiveExpression(size_t i) {
  return getRuleContext<SparqlQueryParser::AdditiveExpressionContext>(i);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::EQUAL() {
  return getToken(SparqlQueryParser::EQUAL, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::NOT_EQUAL() {
  return getToken(SparqlQueryParser::NOT_EQUAL, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::LESS() {
  return getToken(SparqlQueryParser::LESS, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::GREATER() {
  return getToken(SparqlQueryParser::GREATER, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::LESS_EQUAL() {
  return getToken(SparqlQueryParser::LESS_EQUAL, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::GREATER_EQUAL() {
  return getToken(SparqlQueryParser::GREATER_EQUAL, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::IN() {
  return getToken(SparqlQueryParser::IN, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::RelationalExpressionContext::NOT() {
  return getToken(SparqlQueryParser::NOT, 0);
}

SparqlQueryParser::ExpressionListContext* SparqlQueryParser::RelationalExpressionContext::expressionList() {
  return getRuleContext<SparqlQueryParser::ExpressionListContext>(0);
}


size_t SparqlQueryParser::RelationalExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleRelationalExpression;
}


std::any SparqlQueryParser::RelationalExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitRelationalExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::RelationalExpressionContext* SparqlQueryParser::relationalExpression() {
  RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 190, SparqlQueryParser::RuleRelationalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(910);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(894);
      additiveExpression();
      setState(897);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 127) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 127)) & 14680071) != 0)) {
        setState(895);
        antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->op = _input->LT(1);
        _la = _input->LA(1);
        if (!(((((_la - 127) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 127)) & 14680071) != 0))) {
          antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(896);
        additiveExpression();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(899);
      additiveExpression();
      setState(901);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SparqlQueryParser::NOT) {
        setState(900);
        match(SparqlQueryParser::NOT);
      }
      setState(903);
      match(SparqlQueryParser::IN);
      setState(904);
      match(SparqlQueryParser::OPEN_BRACE);
      setState(906);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 25) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 25)) & -16760833) != 0) || ((((_la - 89) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 89)) & 157643647858705151) != 0)) {
        setState(905);
        expressionList();
      }
      setState(908);
      match(SparqlQueryParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

SparqlQueryParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::MultiplicativeExpressionContext* SparqlQueryParser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContext<SparqlQueryParser::MultiplicativeExpressionContext>(0);
}

std::vector<SparqlQueryParser::RhsAdditiveExpressionContext *> SparqlQueryParser::AdditiveExpressionContext::rhsAdditiveExpression() {
  return getRuleContexts<SparqlQueryParser::RhsAdditiveExpressionContext>();
}

SparqlQueryParser::RhsAdditiveExpressionContext* SparqlQueryParser::AdditiveExpressionContext::rhsAdditiveExpression(size_t i) {
  return getRuleContext<SparqlQueryParser::RhsAdditiveExpressionContext>(i);
}


size_t SparqlQueryParser::AdditiveExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleAdditiveExpression;
}


std::any SparqlQueryParser::AdditiveExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitAdditiveExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::AdditiveExpressionContext* SparqlQueryParser::additiveExpression() {
  AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, getState());
  enterRule(_localctx, 192, SparqlQueryParser::RuleAdditiveExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(912);
    multiplicativeExpression();
    setState(916);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 201326655) != 0)) {
      setState(913);
      rhsAdditiveExpression();
      setState(918);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RhsAdditiveExpressionContext ------------------------------------------------------------------

SparqlQueryParser::RhsAdditiveExpressionContext::RhsAdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::RhsAdditiveExpressionSubContext* SparqlQueryParser::RhsAdditiveExpressionContext::rhsAdditiveExpressionSub() {
  return getRuleContext<SparqlQueryParser::RhsAdditiveExpressionSubContext>(0);
}

std::vector<SparqlQueryParser::UnaryExpressionContext *> SparqlQueryParser::RhsAdditiveExpressionContext::unaryExpression() {
  return getRuleContexts<SparqlQueryParser::UnaryExpressionContext>();
}

SparqlQueryParser::UnaryExpressionContext* SparqlQueryParser::RhsAdditiveExpressionContext::unaryExpression(size_t i) {
  return getRuleContext<SparqlQueryParser::UnaryExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::RhsAdditiveExpressionContext::ASTERISK() {
  return getTokens(SparqlQueryParser::ASTERISK);
}

tree::TerminalNode* SparqlQueryParser::RhsAdditiveExpressionContext::ASTERISK(size_t i) {
  return getToken(SparqlQueryParser::ASTERISK, i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::RhsAdditiveExpressionContext::DIVIDE() {
  return getTokens(SparqlQueryParser::DIVIDE);
}

tree::TerminalNode* SparqlQueryParser::RhsAdditiveExpressionContext::DIVIDE(size_t i) {
  return getToken(SparqlQueryParser::DIVIDE, i);
}


size_t SparqlQueryParser::RhsAdditiveExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleRhsAdditiveExpression;
}


std::any SparqlQueryParser::RhsAdditiveExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitRhsAdditiveExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::RhsAdditiveExpressionContext* SparqlQueryParser::rhsAdditiveExpression() {
  RhsAdditiveExpressionContext *_localctx = _tracker.createInstance<RhsAdditiveExpressionContext>(_ctx, getState());
  enterRule(_localctx, 194, SparqlQueryParser::RuleRhsAdditiveExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(919);
    rhsAdditiveExpressionSub();
    setState(924);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SparqlQueryParser::ASTERISK

    || _la == SparqlQueryParser::DIVIDE) {
      setState(920);
      antlrcpp::downCast<RhsAdditiveExpressionContext *>(_localctx)->_tset1701 = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == SparqlQueryParser::ASTERISK

      || _la == SparqlQueryParser::DIVIDE)) {
        antlrcpp::downCast<RhsAdditiveExpressionContext *>(_localctx)->_tset1701 = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      antlrcpp::downCast<RhsAdditiveExpressionContext *>(_localctx)->op.push_back(antlrcpp::downCast<RhsAdditiveExpressionContext *>(_localctx)->_tset1701);
      setState(921);
      unaryExpression();
      setState(926);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RhsAdditiveExpressionSubContext ------------------------------------------------------------------

SparqlQueryParser::RhsAdditiveExpressionSubContext::RhsAdditiveExpressionSubContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::MultiplicativeExpressionContext* SparqlQueryParser::RhsAdditiveExpressionSubContext::multiplicativeExpression() {
  return getRuleContext<SparqlQueryParser::MultiplicativeExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::RhsAdditiveExpressionSubContext::PLUS_SIGN() {
  return getToken(SparqlQueryParser::PLUS_SIGN, 0);
}

tree::TerminalNode* SparqlQueryParser::RhsAdditiveExpressionSubContext::MINUS_SIGN() {
  return getToken(SparqlQueryParser::MINUS_SIGN, 0);
}

SparqlQueryParser::NumericLiteralPositiveContext* SparqlQueryParser::RhsAdditiveExpressionSubContext::numericLiteralPositive() {
  return getRuleContext<SparqlQueryParser::NumericLiteralPositiveContext>(0);
}

SparqlQueryParser::NumericLiteralNegativeContext* SparqlQueryParser::RhsAdditiveExpressionSubContext::numericLiteralNegative() {
  return getRuleContext<SparqlQueryParser::NumericLiteralNegativeContext>(0);
}


size_t SparqlQueryParser::RhsAdditiveExpressionSubContext::getRuleIndex() const {
  return SparqlQueryParser::RuleRhsAdditiveExpressionSub;
}


std::any SparqlQueryParser::RhsAdditiveExpressionSubContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitRhsAdditiveExpressionSub(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::RhsAdditiveExpressionSubContext* SparqlQueryParser::rhsAdditiveExpressionSub() {
  RhsAdditiveExpressionSubContext *_localctx = _tracker.createInstance<RhsAdditiveExpressionSubContext>(_ctx, getState());
  enterRule(_localctx, 196, SparqlQueryParser::RuleRhsAdditiveExpressionSub);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(931);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::PLUS_SIGN:
      case SparqlQueryParser::MINUS_SIGN: {
        enterOuterAlt(_localctx, 1);
        setState(927);
        _la = _input->LA(1);
        if (!(_la == SparqlQueryParser::PLUS_SIGN

        || _la == SparqlQueryParser::MINUS_SIGN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(928);
        multiplicativeExpression();
        break;
      }

      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE: {
        enterOuterAlt(_localctx, 2);
        setState(929);
        numericLiteralPositive();
        break;
      }

      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE: {
        enterOuterAlt(_localctx, 3);
        setState(930);
        numericLiteralNegative();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

SparqlQueryParser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SparqlQueryParser::UnaryExpressionContext *> SparqlQueryParser::MultiplicativeExpressionContext::unaryExpression() {
  return getRuleContexts<SparqlQueryParser::UnaryExpressionContext>();
}

SparqlQueryParser::UnaryExpressionContext* SparqlQueryParser::MultiplicativeExpressionContext::unaryExpression(size_t i) {
  return getRuleContext<SparqlQueryParser::UnaryExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::MultiplicativeExpressionContext::ASTERISK() {
  return getTokens(SparqlQueryParser::ASTERISK);
}

tree::TerminalNode* SparqlQueryParser::MultiplicativeExpressionContext::ASTERISK(size_t i) {
  return getToken(SparqlQueryParser::ASTERISK, i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::MultiplicativeExpressionContext::DIVIDE() {
  return getTokens(SparqlQueryParser::DIVIDE);
}

tree::TerminalNode* SparqlQueryParser::MultiplicativeExpressionContext::DIVIDE(size_t i) {
  return getToken(SparqlQueryParser::DIVIDE, i);
}


size_t SparqlQueryParser::MultiplicativeExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleMultiplicativeExpression;
}


std::any SparqlQueryParser::MultiplicativeExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitMultiplicativeExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::MultiplicativeExpressionContext* SparqlQueryParser::multiplicativeExpression() {
  MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 198, SparqlQueryParser::RuleMultiplicativeExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(933);
    unaryExpression();
    setState(938);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(934);
        antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->_tset1744 = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == SparqlQueryParser::ASTERISK

        || _la == SparqlQueryParser::DIVIDE)) {
          antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->_tset1744 = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->op.push_back(antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->_tset1744);
        setState(935);
        unaryExpression(); 
      }
      setState(940);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

SparqlQueryParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::PrimaryExpressionContext* SparqlQueryParser::UnaryExpressionContext::primaryExpression() {
  return getRuleContext<SparqlQueryParser::PrimaryExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::UnaryExpressionContext::NEGATION() {
  return getToken(SparqlQueryParser::NEGATION, 0);
}

tree::TerminalNode* SparqlQueryParser::UnaryExpressionContext::PLUS_SIGN() {
  return getToken(SparqlQueryParser::PLUS_SIGN, 0);
}

tree::TerminalNode* SparqlQueryParser::UnaryExpressionContext::MINUS_SIGN() {
  return getToken(SparqlQueryParser::MINUS_SIGN, 0);
}


size_t SparqlQueryParser::UnaryExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleUnaryExpression;
}


std::any SparqlQueryParser::UnaryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitUnaryExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::UnaryExpressionContext* SparqlQueryParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 200, SparqlQueryParser::RuleUnaryExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(942);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 141) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 141)) & 35) != 0)) {
      setState(941);
      antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 141) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 141)) & 35) != 0))) {
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(944);
    primaryExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

SparqlQueryParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PrimaryExpressionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::PrimaryExpressionContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::PrimaryExpressionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

SparqlQueryParser::BuiltInCallContext* SparqlQueryParser::PrimaryExpressionContext::builtInCall() {
  return getRuleContext<SparqlQueryParser::BuiltInCallContext>(0);
}

SparqlQueryParser::IriOrFunctionContext* SparqlQueryParser::PrimaryExpressionContext::iriOrFunction() {
  return getRuleContext<SparqlQueryParser::IriOrFunctionContext>(0);
}

SparqlQueryParser::RdfLiteralContext* SparqlQueryParser::PrimaryExpressionContext::rdfLiteral() {
  return getRuleContext<SparqlQueryParser::RdfLiteralContext>(0);
}

SparqlQueryParser::NumericLiteralContext* SparqlQueryParser::PrimaryExpressionContext::numericLiteral() {
  return getRuleContext<SparqlQueryParser::NumericLiteralContext>(0);
}

SparqlQueryParser::BooleanLiteralContext* SparqlQueryParser::PrimaryExpressionContext::booleanLiteral() {
  return getRuleContext<SparqlQueryParser::BooleanLiteralContext>(0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::PrimaryExpressionContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}


size_t SparqlQueryParser::PrimaryExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RulePrimaryExpression;
}


std::any SparqlQueryParser::PrimaryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPrimaryExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PrimaryExpressionContext* SparqlQueryParser::primaryExpression() {
  PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 202, SparqlQueryParser::RulePrimaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(956);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(946);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(947);
        expression();
        setState(948);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STR:
      case SparqlQueryParser::LANG:
      case SparqlQueryParser::LANGMATCHES:
      case SparqlQueryParser::DATATYPE:
      case SparqlQueryParser::BOUND:
      case SparqlQueryParser::SAMETERM:
      case SparqlQueryParser::ISIRI:
      case SparqlQueryParser::ISURI:
      case SparqlQueryParser::ISBLANK:
      case SparqlQueryParser::ISLITERAL:
      case SparqlQueryParser::REGEX:
      case SparqlQueryParser::SUBSTR:
      case SparqlQueryParser::IRI:
      case SparqlQueryParser::URI:
      case SparqlQueryParser::BNODE:
      case SparqlQueryParser::RAND:
      case SparqlQueryParser::ABS:
      case SparqlQueryParser::CEIL:
      case SparqlQueryParser::FLOOR:
      case SparqlQueryParser::ROUND:
      case SparqlQueryParser::CONCAT:
      case SparqlQueryParser::STRLEN:
      case SparqlQueryParser::UCASE:
      case SparqlQueryParser::LCASE:
      case SparqlQueryParser::ENCODE_FOR_URI:
      case SparqlQueryParser::CONTAINS:
      case SparqlQueryParser::STRSTARTS:
      case SparqlQueryParser::STRENDS:
      case SparqlQueryParser::STRBEFORE:
      case SparqlQueryParser::STRAFTER:
      case SparqlQueryParser::REPLACE:
      case SparqlQueryParser::YEAR:
      case SparqlQueryParser::MONTH:
      case SparqlQueryParser::DAY:
      case SparqlQueryParser::HOURS:
      case SparqlQueryParser::MINUTES:
      case SparqlQueryParser::SECONDS:
      case SparqlQueryParser::TIMEZONE:
      case SparqlQueryParser::TZ:
      case SparqlQueryParser::NOW:
      case SparqlQueryParser::UUID:
      case SparqlQueryParser::STRUUID:
      case SparqlQueryParser::MD5:
      case SparqlQueryParser::SHA1:
      case SparqlQueryParser::SHA256:
      case SparqlQueryParser::SHA384:
      case SparqlQueryParser::SHA512:
      case SparqlQueryParser::COALESCE:
      case SparqlQueryParser::IF:
      case SparqlQueryParser::STRLANG:
      case SparqlQueryParser::STRDT:
      case SparqlQueryParser::ISNUMERIC:
      case SparqlQueryParser::COUNT:
      case SparqlQueryParser::SUM:
      case SparqlQueryParser::MIN:
      case SparqlQueryParser::MAX:
      case SparqlQueryParser::AVG:
      case SparqlQueryParser::SAMPLE:
      case SparqlQueryParser::GROUP_CONCAT:
      case SparqlQueryParser::NOT:
      case SparqlQueryParser::EXISTS: {
        enterOuterAlt(_localctx, 2);
        setState(950);
        builtInCall();
        break;
      }

      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 3);
        setState(951);
        iriOrFunction();
        break;
      }

      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2: {
        enterOuterAlt(_localctx, 4);
        setState(952);
        rdfLiteral();
        break;
      }

      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE: {
        enterOuterAlt(_localctx, 5);
        setState(953);
        numericLiteral();
        break;
      }

      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE: {
        enterOuterAlt(_localctx, 6);
        setState(954);
        booleanLiteral();
        break;
      }

      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2: {
        enterOuterAlt(_localctx, 7);
        setState(955);
        var();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BuiltInCallContext ------------------------------------------------------------------

SparqlQueryParser::BuiltInCallContext::BuiltInCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::AggregateContext* SparqlQueryParser::BuiltInCallContext::aggregate() {
  return getRuleContext<SparqlQueryParser::AggregateContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STR() {
  return getToken(SparqlQueryParser::STR, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

std::vector<SparqlQueryParser::ExpressionContext *> SparqlQueryParser::BuiltInCallContext::expression() {
  return getRuleContexts<SparqlQueryParser::ExpressionContext>();
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::BuiltInCallContext::expression(size_t i) {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(i);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::LANG() {
  return getToken(SparqlQueryParser::LANG, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::LANGMATCHES() {
  return getToken(SparqlQueryParser::LANGMATCHES, 0);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::BuiltInCallContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::DATATYPE() {
  return getToken(SparqlQueryParser::DATATYPE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::BOUND() {
  return getToken(SparqlQueryParser::BOUND, 0);
}

SparqlQueryParser::VarContext* SparqlQueryParser::BuiltInCallContext::var() {
  return getRuleContext<SparqlQueryParser::VarContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::IRI() {
  return getToken(SparqlQueryParser::IRI, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::URI() {
  return getToken(SparqlQueryParser::URI, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::BNODE() {
  return getToken(SparqlQueryParser::BNODE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::RAND() {
  return getToken(SparqlQueryParser::RAND, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ABS() {
  return getToken(SparqlQueryParser::ABS, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::CEIL() {
  return getToken(SparqlQueryParser::CEIL, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::FLOOR() {
  return getToken(SparqlQueryParser::FLOOR, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ROUND() {
  return getToken(SparqlQueryParser::ROUND, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::CONCAT() {
  return getToken(SparqlQueryParser::CONCAT, 0);
}

SparqlQueryParser::ExpressionListContext* SparqlQueryParser::BuiltInCallContext::expressionList() {
  return getRuleContext<SparqlQueryParser::ExpressionListContext>(0);
}

SparqlQueryParser::SubStringExpressionContext* SparqlQueryParser::BuiltInCallContext::subStringExpression() {
  return getRuleContext<SparqlQueryParser::SubStringExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRLEN() {
  return getToken(SparqlQueryParser::STRLEN, 0);
}

SparqlQueryParser::StrReplaceExpressionContext* SparqlQueryParser::BuiltInCallContext::strReplaceExpression() {
  return getRuleContext<SparqlQueryParser::StrReplaceExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::UCASE() {
  return getToken(SparqlQueryParser::UCASE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::LCASE() {
  return getToken(SparqlQueryParser::LCASE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ENCODE_FOR_URI() {
  return getToken(SparqlQueryParser::ENCODE_FOR_URI, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::CONTAINS() {
  return getToken(SparqlQueryParser::CONTAINS, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRSTARTS() {
  return getToken(SparqlQueryParser::STRSTARTS, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRENDS() {
  return getToken(SparqlQueryParser::STRENDS, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRBEFORE() {
  return getToken(SparqlQueryParser::STRBEFORE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRAFTER() {
  return getToken(SparqlQueryParser::STRAFTER, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::YEAR() {
  return getToken(SparqlQueryParser::YEAR, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::MONTH() {
  return getToken(SparqlQueryParser::MONTH, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::DAY() {
  return getToken(SparqlQueryParser::DAY, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::HOURS() {
  return getToken(SparqlQueryParser::HOURS, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::MINUTES() {
  return getToken(SparqlQueryParser::MINUTES, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::SECONDS() {
  return getToken(SparqlQueryParser::SECONDS, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::TIMEZONE() {
  return getToken(SparqlQueryParser::TIMEZONE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::TZ() {
  return getToken(SparqlQueryParser::TZ, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::NOW() {
  return getToken(SparqlQueryParser::NOW, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::UUID() {
  return getToken(SparqlQueryParser::UUID, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRUUID() {
  return getToken(SparqlQueryParser::STRUUID, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::MD5() {
  return getToken(SparqlQueryParser::MD5, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::SHA1() {
  return getToken(SparqlQueryParser::SHA1, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::SHA256() {
  return getToken(SparqlQueryParser::SHA256, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::SHA384() {
  return getToken(SparqlQueryParser::SHA384, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::SHA512() {
  return getToken(SparqlQueryParser::SHA512, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::COALESCE() {
  return getToken(SparqlQueryParser::COALESCE, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::IF() {
  return getToken(SparqlQueryParser::IF, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRLANG() {
  return getToken(SparqlQueryParser::STRLANG, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::STRDT() {
  return getToken(SparqlQueryParser::STRDT, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::SAMETERM() {
  return getToken(SparqlQueryParser::SAMETERM, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ISIRI() {
  return getToken(SparqlQueryParser::ISIRI, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ISURI() {
  return getToken(SparqlQueryParser::ISURI, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ISBLANK() {
  return getToken(SparqlQueryParser::ISBLANK, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ISLITERAL() {
  return getToken(SparqlQueryParser::ISLITERAL, 0);
}

tree::TerminalNode* SparqlQueryParser::BuiltInCallContext::ISNUMERIC() {
  return getToken(SparqlQueryParser::ISNUMERIC, 0);
}

SparqlQueryParser::RegexExpressionContext* SparqlQueryParser::BuiltInCallContext::regexExpression() {
  return getRuleContext<SparqlQueryParser::RegexExpressionContext>(0);
}

SparqlQueryParser::ExistsFunctionContext* SparqlQueryParser::BuiltInCallContext::existsFunction() {
  return getRuleContext<SparqlQueryParser::ExistsFunctionContext>(0);
}

SparqlQueryParser::NotExistsFunctionContext* SparqlQueryParser::BuiltInCallContext::notExistsFunction() {
  return getRuleContext<SparqlQueryParser::NotExistsFunctionContext>(0);
}


size_t SparqlQueryParser::BuiltInCallContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBuiltInCall;
}


std::any SparqlQueryParser::BuiltInCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBuiltInCall(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BuiltInCallContext* SparqlQueryParser::builtInCall() {
  BuiltInCallContext *_localctx = _tracker.createInstance<BuiltInCallContext>(_ctx, getState());
  enterRule(_localctx, 204, SparqlQueryParser::RuleBuiltInCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1226);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::COUNT:
      case SparqlQueryParser::SUM:
      case SparqlQueryParser::MIN:
      case SparqlQueryParser::MAX:
      case SparqlQueryParser::AVG:
      case SparqlQueryParser::SAMPLE:
      case SparqlQueryParser::GROUP_CONCAT: {
        enterOuterAlt(_localctx, 1);
        setState(958);
        aggregate();
        break;
      }

      case SparqlQueryParser::STR: {
        enterOuterAlt(_localctx, 2);
        setState(959);
        match(SparqlQueryParser::STR);
        setState(960);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(961);
        expression();
        setState(962);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::LANG: {
        enterOuterAlt(_localctx, 3);
        setState(964);
        match(SparqlQueryParser::LANG);
        setState(965);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(966);
        expression();
        setState(967);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::LANGMATCHES: {
        enterOuterAlt(_localctx, 4);
        setState(969);
        match(SparqlQueryParser::LANGMATCHES);
        setState(970);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(971);
        expression();
        setState(972);
        match(SparqlQueryParser::COMMA);
        setState(973);
        expression();
        setState(974);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::DATATYPE: {
        enterOuterAlt(_localctx, 5);
        setState(976);
        match(SparqlQueryParser::DATATYPE);
        setState(977);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(978);
        expression();
        setState(979);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::BOUND: {
        enterOuterAlt(_localctx, 6);
        setState(981);
        match(SparqlQueryParser::BOUND);
        setState(982);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(983);
        var();
        setState(984);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::IRI: {
        enterOuterAlt(_localctx, 7);
        setState(986);
        match(SparqlQueryParser::IRI);
        setState(987);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(988);
        expression();
        setState(989);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::URI: {
        enterOuterAlt(_localctx, 8);
        setState(991);
        match(SparqlQueryParser::URI);
        setState(992);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(993);
        expression();
        setState(994);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::BNODE: {
        enterOuterAlt(_localctx, 9);
        setState(996);
        match(SparqlQueryParser::BNODE);
        setState(997);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(999);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 25) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 25)) & -16760833) != 0) || ((((_la - 89) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 89)) & 157643647858705151) != 0)) {
          setState(998);
          expression();
        }
        setState(1001);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::RAND: {
        enterOuterAlt(_localctx, 10);
        setState(1002);
        match(SparqlQueryParser::RAND);
        setState(1003);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1004);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ABS: {
        enterOuterAlt(_localctx, 11);
        setState(1005);
        match(SparqlQueryParser::ABS);
        setState(1006);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1007);
        expression();
        setState(1008);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::CEIL: {
        enterOuterAlt(_localctx, 12);
        setState(1010);
        match(SparqlQueryParser::CEIL);
        setState(1011);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1012);
        expression();
        setState(1013);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::FLOOR: {
        enterOuterAlt(_localctx, 13);
        setState(1015);
        match(SparqlQueryParser::FLOOR);
        setState(1016);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1017);
        expression();
        setState(1018);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ROUND: {
        enterOuterAlt(_localctx, 14);
        setState(1020);
        match(SparqlQueryParser::ROUND);
        setState(1021);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1022);
        expression();
        setState(1023);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::CONCAT: {
        enterOuterAlt(_localctx, 15);
        setState(1025);
        match(SparqlQueryParser::CONCAT);
        setState(1026);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1028);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 25) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 25)) & -16760833) != 0) || ((((_la - 89) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 89)) & 157643647858705151) != 0)) {
          setState(1027);
          expressionList();
        }
        setState(1030);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SUBSTR: {
        enterOuterAlt(_localctx, 16);
        setState(1031);
        subStringExpression();
        break;
      }

      case SparqlQueryParser::STRLEN: {
        enterOuterAlt(_localctx, 17);
        setState(1032);
        match(SparqlQueryParser::STRLEN);
        setState(1033);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1034);
        expression();
        setState(1035);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::REPLACE: {
        enterOuterAlt(_localctx, 18);
        setState(1037);
        strReplaceExpression();
        break;
      }

      case SparqlQueryParser::UCASE: {
        enterOuterAlt(_localctx, 19);
        setState(1038);
        match(SparqlQueryParser::UCASE);
        setState(1039);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1040);
        expression();
        setState(1041);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::LCASE: {
        enterOuterAlt(_localctx, 20);
        setState(1043);
        match(SparqlQueryParser::LCASE);
        setState(1044);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1045);
        expression();
        setState(1046);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ENCODE_FOR_URI: {
        enterOuterAlt(_localctx, 21);
        setState(1048);
        match(SparqlQueryParser::ENCODE_FOR_URI);
        setState(1049);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1050);
        expression();
        setState(1051);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::CONTAINS: {
        enterOuterAlt(_localctx, 22);
        setState(1053);
        match(SparqlQueryParser::CONTAINS);
        setState(1054);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1055);
        expression();
        setState(1056);
        match(SparqlQueryParser::COMMA);
        setState(1057);
        expression();
        setState(1058);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRSTARTS: {
        enterOuterAlt(_localctx, 23);
        setState(1060);
        match(SparqlQueryParser::STRSTARTS);
        setState(1061);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1062);
        expression();
        setState(1063);
        match(SparqlQueryParser::COMMA);
        setState(1064);
        expression();
        setState(1065);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRENDS: {
        enterOuterAlt(_localctx, 24);
        setState(1067);
        match(SparqlQueryParser::STRENDS);
        setState(1068);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1069);
        expression();
        setState(1070);
        match(SparqlQueryParser::COMMA);
        setState(1071);
        expression();
        setState(1072);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRBEFORE: {
        enterOuterAlt(_localctx, 25);
        setState(1074);
        match(SparqlQueryParser::STRBEFORE);
        setState(1075);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1076);
        expression();
        setState(1077);
        match(SparqlQueryParser::COMMA);
        setState(1078);
        expression();
        setState(1079);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRAFTER: {
        enterOuterAlt(_localctx, 26);
        setState(1081);
        match(SparqlQueryParser::STRAFTER);
        setState(1082);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1083);
        expression();
        setState(1084);
        match(SparqlQueryParser::COMMA);
        setState(1085);
        expression();
        setState(1086);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::YEAR: {
        enterOuterAlt(_localctx, 27);
        setState(1088);
        match(SparqlQueryParser::YEAR);
        setState(1089);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1090);
        expression();
        setState(1091);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::MONTH: {
        enterOuterAlt(_localctx, 28);
        setState(1093);
        match(SparqlQueryParser::MONTH);
        setState(1094);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1095);
        expression();
        setState(1096);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::DAY: {
        enterOuterAlt(_localctx, 29);
        setState(1098);
        match(SparqlQueryParser::DAY);
        setState(1099);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1100);
        expression();
        setState(1101);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::HOURS: {
        enterOuterAlt(_localctx, 30);
        setState(1103);
        match(SparqlQueryParser::HOURS);
        setState(1104);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1105);
        expression();
        setState(1106);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::MINUTES: {
        enterOuterAlt(_localctx, 31);
        setState(1108);
        match(SparqlQueryParser::MINUTES);
        setState(1109);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1110);
        expression();
        setState(1111);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SECONDS: {
        enterOuterAlt(_localctx, 32);
        setState(1113);
        match(SparqlQueryParser::SECONDS);
        setState(1114);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1115);
        expression();
        setState(1116);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::TIMEZONE: {
        enterOuterAlt(_localctx, 33);
        setState(1118);
        match(SparqlQueryParser::TIMEZONE);
        setState(1119);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1120);
        expression();
        setState(1121);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::TZ: {
        enterOuterAlt(_localctx, 34);
        setState(1123);
        match(SparqlQueryParser::TZ);
        setState(1124);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1125);
        expression();
        setState(1126);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::NOW: {
        enterOuterAlt(_localctx, 35);
        setState(1128);
        match(SparqlQueryParser::NOW);
        setState(1129);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1130);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::UUID: {
        enterOuterAlt(_localctx, 36);
        setState(1131);
        match(SparqlQueryParser::UUID);
        setState(1132);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1133);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRUUID: {
        enterOuterAlt(_localctx, 37);
        setState(1134);
        match(SparqlQueryParser::STRUUID);
        setState(1135);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1136);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::MD5: {
        enterOuterAlt(_localctx, 38);
        setState(1137);
        match(SparqlQueryParser::MD5);
        setState(1138);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1139);
        expression();
        setState(1140);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SHA1: {
        enterOuterAlt(_localctx, 39);
        setState(1142);
        match(SparqlQueryParser::SHA1);
        setState(1143);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1144);
        expression();
        setState(1145);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SHA256: {
        enterOuterAlt(_localctx, 40);
        setState(1147);
        match(SparqlQueryParser::SHA256);
        setState(1148);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1149);
        expression();
        setState(1150);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SHA384: {
        enterOuterAlt(_localctx, 41);
        setState(1152);
        match(SparqlQueryParser::SHA384);
        setState(1153);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1154);
        expression();
        setState(1155);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SHA512: {
        enterOuterAlt(_localctx, 42);
        setState(1157);
        match(SparqlQueryParser::SHA512);
        setState(1158);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1159);
        expression();
        setState(1160);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::COALESCE: {
        enterOuterAlt(_localctx, 43);
        setState(1162);
        match(SparqlQueryParser::COALESCE);
        setState(1163);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1165);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 25) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 25)) & -16760833) != 0) || ((((_la - 89) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 89)) & 157643647858705151) != 0)) {
          setState(1164);
          expressionList();
        }
        setState(1167);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::IF: {
        enterOuterAlt(_localctx, 44);
        setState(1168);
        match(SparqlQueryParser::IF);
        setState(1169);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1170);
        expression();
        setState(1171);
        match(SparqlQueryParser::COMMA);
        setState(1172);
        expression();
        setState(1173);
        match(SparqlQueryParser::COMMA);
        setState(1174);
        expression();
        setState(1175);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRLANG: {
        enterOuterAlt(_localctx, 45);
        setState(1177);
        match(SparqlQueryParser::STRLANG);
        setState(1178);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1179);
        expression();
        setState(1180);
        match(SparqlQueryParser::COMMA);
        setState(1181);
        expression();
        setState(1182);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::STRDT: {
        enterOuterAlt(_localctx, 46);
        setState(1184);
        match(SparqlQueryParser::STRDT);
        setState(1185);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1186);
        expression();
        setState(1187);
        match(SparqlQueryParser::COMMA);
        setState(1188);
        expression();
        setState(1189);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SAMETERM: {
        enterOuterAlt(_localctx, 47);
        setState(1191);
        match(SparqlQueryParser::SAMETERM);
        setState(1192);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1193);
        expression();
        setState(1194);
        match(SparqlQueryParser::COMMA);
        setState(1195);
        expression();
        setState(1196);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ISIRI: {
        enterOuterAlt(_localctx, 48);
        setState(1198);
        match(SparqlQueryParser::ISIRI);
        setState(1199);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1200);
        expression();
        setState(1201);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ISURI: {
        enterOuterAlt(_localctx, 49);
        setState(1203);
        match(SparqlQueryParser::ISURI);
        setState(1204);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1205);
        expression();
        setState(1206);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ISBLANK: {
        enterOuterAlt(_localctx, 50);
        setState(1208);
        match(SparqlQueryParser::ISBLANK);
        setState(1209);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1210);
        expression();
        setState(1211);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ISLITERAL: {
        enterOuterAlt(_localctx, 51);
        setState(1213);
        match(SparqlQueryParser::ISLITERAL);
        setState(1214);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1215);
        expression();
        setState(1216);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::ISNUMERIC: {
        enterOuterAlt(_localctx, 52);
        setState(1218);
        match(SparqlQueryParser::ISNUMERIC);
        setState(1219);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1220);
        expression();
        setState(1221);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::REGEX: {
        enterOuterAlt(_localctx, 53);
        setState(1223);
        regexExpression();
        break;
      }

      case SparqlQueryParser::EXISTS: {
        enterOuterAlt(_localctx, 54);
        setState(1224);
        existsFunction();
        break;
      }

      case SparqlQueryParser::NOT: {
        enterOuterAlt(_localctx, 55);
        setState(1225);
        notExistsFunction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RegexExpressionContext ------------------------------------------------------------------

SparqlQueryParser::RegexExpressionContext::RegexExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::RegexExpressionContext::REGEX() {
  return getToken(SparqlQueryParser::REGEX, 0);
}

tree::TerminalNode* SparqlQueryParser::RegexExpressionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

std::vector<SparqlQueryParser::ExpressionContext *> SparqlQueryParser::RegexExpressionContext::expression() {
  return getRuleContexts<SparqlQueryParser::ExpressionContext>();
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::RegexExpressionContext::expression(size_t i) {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::RegexExpressionContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::RegexExpressionContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}

tree::TerminalNode* SparqlQueryParser::RegexExpressionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}


size_t SparqlQueryParser::RegexExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleRegexExpression;
}


std::any SparqlQueryParser::RegexExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitRegexExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::RegexExpressionContext* SparqlQueryParser::regexExpression() {
  RegexExpressionContext *_localctx = _tracker.createInstance<RegexExpressionContext>(_ctx, getState());
  enterRule(_localctx, 206, SparqlQueryParser::RuleRegexExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1228);
    match(SparqlQueryParser::REGEX);
    setState(1229);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(1230);
    expression();
    setState(1231);
    match(SparqlQueryParser::COMMA);
    setState(1232);
    expression();
    setState(1235);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::COMMA) {
      setState(1233);
      match(SparqlQueryParser::COMMA);
      setState(1234);
      expression();
    }
    setState(1237);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubStringExpressionContext ------------------------------------------------------------------

SparqlQueryParser::SubStringExpressionContext::SubStringExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::SubStringExpressionContext::SUBSTR() {
  return getToken(SparqlQueryParser::SUBSTR, 0);
}

tree::TerminalNode* SparqlQueryParser::SubStringExpressionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

std::vector<SparqlQueryParser::ExpressionContext *> SparqlQueryParser::SubStringExpressionContext::expression() {
  return getRuleContexts<SparqlQueryParser::ExpressionContext>();
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::SubStringExpressionContext::expression(size_t i) {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::SubStringExpressionContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::SubStringExpressionContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}

tree::TerminalNode* SparqlQueryParser::SubStringExpressionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}


size_t SparqlQueryParser::SubStringExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleSubStringExpression;
}


std::any SparqlQueryParser::SubStringExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitSubStringExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::SubStringExpressionContext* SparqlQueryParser::subStringExpression() {
  SubStringExpressionContext *_localctx = _tracker.createInstance<SubStringExpressionContext>(_ctx, getState());
  enterRule(_localctx, 208, SparqlQueryParser::RuleSubStringExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1239);
    match(SparqlQueryParser::SUBSTR);
    setState(1240);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(1241);
    expression();
    setState(1242);
    match(SparqlQueryParser::COMMA);
    setState(1243);
    expression();
    setState(1246);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::COMMA) {
      setState(1244);
      match(SparqlQueryParser::COMMA);
      setState(1245);
      expression();
    }
    setState(1248);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrReplaceExpressionContext ------------------------------------------------------------------

SparqlQueryParser::StrReplaceExpressionContext::StrReplaceExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::StrReplaceExpressionContext::REPLACE() {
  return getToken(SparqlQueryParser::REPLACE, 0);
}

tree::TerminalNode* SparqlQueryParser::StrReplaceExpressionContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

std::vector<SparqlQueryParser::ExpressionContext *> SparqlQueryParser::StrReplaceExpressionContext::expression() {
  return getRuleContexts<SparqlQueryParser::ExpressionContext>();
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::StrReplaceExpressionContext::expression(size_t i) {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SparqlQueryParser::StrReplaceExpressionContext::COMMA() {
  return getTokens(SparqlQueryParser::COMMA);
}

tree::TerminalNode* SparqlQueryParser::StrReplaceExpressionContext::COMMA(size_t i) {
  return getToken(SparqlQueryParser::COMMA, i);
}

tree::TerminalNode* SparqlQueryParser::StrReplaceExpressionContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}


size_t SparqlQueryParser::StrReplaceExpressionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleStrReplaceExpression;
}


std::any SparqlQueryParser::StrReplaceExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitStrReplaceExpression(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::StrReplaceExpressionContext* SparqlQueryParser::strReplaceExpression() {
  StrReplaceExpressionContext *_localctx = _tracker.createInstance<StrReplaceExpressionContext>(_ctx, getState());
  enterRule(_localctx, 210, SparqlQueryParser::RuleStrReplaceExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1250);
    match(SparqlQueryParser::REPLACE);
    setState(1251);
    match(SparqlQueryParser::OPEN_BRACE);
    setState(1252);
    expression();
    setState(1253);
    match(SparqlQueryParser::COMMA);
    setState(1254);
    expression();
    setState(1255);
    match(SparqlQueryParser::COMMA);
    setState(1256);
    expression();
    setState(1259);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::COMMA) {
      setState(1257);
      match(SparqlQueryParser::COMMA);
      setState(1258);
      expression();
    }
    setState(1261);
    match(SparqlQueryParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExistsFunctionContext ------------------------------------------------------------------

SparqlQueryParser::ExistsFunctionContext::ExistsFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::ExistsFunctionContext::EXISTS() {
  return getToken(SparqlQueryParser::EXISTS, 0);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::ExistsFunctionContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}


size_t SparqlQueryParser::ExistsFunctionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleExistsFunction;
}


std::any SparqlQueryParser::ExistsFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitExistsFunction(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::ExistsFunctionContext* SparqlQueryParser::existsFunction() {
  ExistsFunctionContext *_localctx = _tracker.createInstance<ExistsFunctionContext>(_ctx, getState());
  enterRule(_localctx, 212, SparqlQueryParser::RuleExistsFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1263);
    match(SparqlQueryParser::EXISTS);
    setState(1264);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NotExistsFunctionContext ------------------------------------------------------------------

SparqlQueryParser::NotExistsFunctionContext::NotExistsFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::NotExistsFunctionContext::NOT() {
  return getToken(SparqlQueryParser::NOT, 0);
}

tree::TerminalNode* SparqlQueryParser::NotExistsFunctionContext::EXISTS() {
  return getToken(SparqlQueryParser::EXISTS, 0);
}

SparqlQueryParser::GroupGraphPatternContext* SparqlQueryParser::NotExistsFunctionContext::groupGraphPattern() {
  return getRuleContext<SparqlQueryParser::GroupGraphPatternContext>(0);
}


size_t SparqlQueryParser::NotExistsFunctionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleNotExistsFunction;
}


std::any SparqlQueryParser::NotExistsFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitNotExistsFunction(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::NotExistsFunctionContext* SparqlQueryParser::notExistsFunction() {
  NotExistsFunctionContext *_localctx = _tracker.createInstance<NotExistsFunctionContext>(_ctx, getState());
  enterRule(_localctx, 214, SparqlQueryParser::RuleNotExistsFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1266);
    match(SparqlQueryParser::NOT);
    setState(1267);
    match(SparqlQueryParser::EXISTS);
    setState(1268);
    groupGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AggregateContext ------------------------------------------------------------------

SparqlQueryParser::AggregateContext::AggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::COUNT() {
  return getToken(SparqlQueryParser::COUNT, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::OPEN_BRACE() {
  return getToken(SparqlQueryParser::OPEN_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::CLOSE_BRACE() {
  return getToken(SparqlQueryParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::ASTERISK() {
  return getToken(SparqlQueryParser::ASTERISK, 0);
}

SparqlQueryParser::ExpressionContext* SparqlQueryParser::AggregateContext::expression() {
  return getRuleContext<SparqlQueryParser::ExpressionContext>(0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::DISTINCT() {
  return getToken(SparqlQueryParser::DISTINCT, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::SUM() {
  return getToken(SparqlQueryParser::SUM, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::MIN() {
  return getToken(SparqlQueryParser::MIN, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::MAX() {
  return getToken(SparqlQueryParser::MAX, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::AVG() {
  return getToken(SparqlQueryParser::AVG, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::SAMPLE() {
  return getToken(SparqlQueryParser::SAMPLE, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::GROUP_CONCAT() {
  return getToken(SparqlQueryParser::GROUP_CONCAT, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::SEMICOLON() {
  return getToken(SparqlQueryParser::SEMICOLON, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::SEPARATOR() {
  return getToken(SparqlQueryParser::SEPARATOR, 0);
}

tree::TerminalNode* SparqlQueryParser::AggregateContext::EQUAL() {
  return getToken(SparqlQueryParser::EQUAL, 0);
}

SparqlQueryParser::StringContext* SparqlQueryParser::AggregateContext::string() {
  return getRuleContext<SparqlQueryParser::StringContext>(0);
}


size_t SparqlQueryParser::AggregateContext::getRuleIndex() const {
  return SparqlQueryParser::RuleAggregate;
}


std::any SparqlQueryParser::AggregateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitAggregate(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::AggregateContext* SparqlQueryParser::aggregate() {
  AggregateContext *_localctx = _tracker.createInstance<AggregateContext>(_ctx, getState());
  enterRule(_localctx, 216, SparqlQueryParser::RuleAggregate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1334);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::COUNT: {
        enterOuterAlt(_localctx, 1);
        setState(1270);
        match(SparqlQueryParser::COUNT);
        setState(1271);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1273);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1272);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1277);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case SparqlQueryParser::ASTERISK: {
            setState(1275);
            match(SparqlQueryParser::ASTERISK);
            break;
          }

          case SparqlQueryParser::STR:
          case SparqlQueryParser::LANG:
          case SparqlQueryParser::LANGMATCHES:
          case SparqlQueryParser::DATATYPE:
          case SparqlQueryParser::BOUND:
          case SparqlQueryParser::SAMETERM:
          case SparqlQueryParser::ISIRI:
          case SparqlQueryParser::ISURI:
          case SparqlQueryParser::ISBLANK:
          case SparqlQueryParser::ISLITERAL:
          case SparqlQueryParser::REGEX:
          case SparqlQueryParser::SUBSTR:
          case SparqlQueryParser::TRUE:
          case SparqlQueryParser::FALSE:
          case SparqlQueryParser::IRI:
          case SparqlQueryParser::URI:
          case SparqlQueryParser::BNODE:
          case SparqlQueryParser::RAND:
          case SparqlQueryParser::ABS:
          case SparqlQueryParser::CEIL:
          case SparqlQueryParser::FLOOR:
          case SparqlQueryParser::ROUND:
          case SparqlQueryParser::CONCAT:
          case SparqlQueryParser::STRLEN:
          case SparqlQueryParser::UCASE:
          case SparqlQueryParser::LCASE:
          case SparqlQueryParser::ENCODE_FOR_URI:
          case SparqlQueryParser::CONTAINS:
          case SparqlQueryParser::STRSTARTS:
          case SparqlQueryParser::STRENDS:
          case SparqlQueryParser::STRBEFORE:
          case SparqlQueryParser::STRAFTER:
          case SparqlQueryParser::REPLACE:
          case SparqlQueryParser::YEAR:
          case SparqlQueryParser::MONTH:
          case SparqlQueryParser::DAY:
          case SparqlQueryParser::HOURS:
          case SparqlQueryParser::MINUTES:
          case SparqlQueryParser::SECONDS:
          case SparqlQueryParser::TIMEZONE:
          case SparqlQueryParser::TZ:
          case SparqlQueryParser::NOW:
          case SparqlQueryParser::UUID:
          case SparqlQueryParser::STRUUID:
          case SparqlQueryParser::MD5:
          case SparqlQueryParser::SHA1:
          case SparqlQueryParser::SHA256:
          case SparqlQueryParser::SHA384:
          case SparqlQueryParser::SHA512:
          case SparqlQueryParser::COALESCE:
          case SparqlQueryParser::IF:
          case SparqlQueryParser::STRLANG:
          case SparqlQueryParser::STRDT:
          case SparqlQueryParser::ISNUMERIC:
          case SparqlQueryParser::COUNT:
          case SparqlQueryParser::SUM:
          case SparqlQueryParser::MIN:
          case SparqlQueryParser::MAX:
          case SparqlQueryParser::AVG:
          case SparqlQueryParser::SAMPLE:
          case SparqlQueryParser::GROUP_CONCAT:
          case SparqlQueryParser::NOT:
          case SparqlQueryParser::EXISTS:
          case SparqlQueryParser::IRIREF:
          case SparqlQueryParser::PNAME_NS:
          case SparqlQueryParser::PNAME_LN:
          case SparqlQueryParser::VAR1:
          case SparqlQueryParser::VAR2:
          case SparqlQueryParser::INTEGER:
          case SparqlQueryParser::DECIMAL:
          case SparqlQueryParser::DOUBLE:
          case SparqlQueryParser::INTEGER_POSITIVE:
          case SparqlQueryParser::DECIMAL_POSITIVE:
          case SparqlQueryParser::DOUBLE_POSITIVE:
          case SparqlQueryParser::INTEGER_NEGATIVE:
          case SparqlQueryParser::DECIMAL_NEGATIVE:
          case SparqlQueryParser::DOUBLE_NEGATIVE:
          case SparqlQueryParser::STRING_LITERAL1:
          case SparqlQueryParser::STRING_LITERAL2:
          case SparqlQueryParser::STRING_LITERAL_LONG1:
          case SparqlQueryParser::STRING_LITERAL_LONG2:
          case SparqlQueryParser::OPEN_BRACE:
          case SparqlQueryParser::PLUS_SIGN:
          case SparqlQueryParser::MINUS_SIGN:
          case SparqlQueryParser::NEGATION: {
            setState(1276);
            expression();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1279);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SUM: {
        enterOuterAlt(_localctx, 2);
        setState(1280);
        match(SparqlQueryParser::SUM);
        setState(1281);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1283);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1282);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1285);
        expression();
        setState(1286);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::MIN: {
        enterOuterAlt(_localctx, 3);
        setState(1288);
        match(SparqlQueryParser::MIN);
        setState(1289);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1291);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1290);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1293);
        expression();
        setState(1294);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::MAX: {
        enterOuterAlt(_localctx, 4);
        setState(1296);
        match(SparqlQueryParser::MAX);
        setState(1297);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1299);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1298);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1301);
        expression();
        setState(1302);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::AVG: {
        enterOuterAlt(_localctx, 5);
        setState(1304);
        match(SparqlQueryParser::AVG);
        setState(1305);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1307);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1306);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1309);
        expression();
        setState(1310);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::SAMPLE: {
        enterOuterAlt(_localctx, 6);
        setState(1312);
        match(SparqlQueryParser::SAMPLE);
        setState(1313);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1315);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1314);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1317);
        expression();
        setState(1318);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

      case SparqlQueryParser::GROUP_CONCAT: {
        enterOuterAlt(_localctx, 7);
        setState(1320);
        match(SparqlQueryParser::GROUP_CONCAT);
        setState(1321);
        match(SparqlQueryParser::OPEN_BRACE);
        setState(1323);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::DISTINCT) {
          setState(1322);
          match(SparqlQueryParser::DISTINCT);
        }
        setState(1325);
        expression();
        setState(1330);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == SparqlQueryParser::SEMICOLON) {
          setState(1326);
          match(SparqlQueryParser::SEMICOLON);
          setState(1327);
          match(SparqlQueryParser::SEPARATOR);
          setState(1328);
          match(SparqlQueryParser::EQUAL);
          setState(1329);
          string();
        }
        setState(1332);
        match(SparqlQueryParser::CLOSE_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IriOrFunctionContext ------------------------------------------------------------------

SparqlQueryParser::IriOrFunctionContext::IriOrFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::IriContext* SparqlQueryParser::IriOrFunctionContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}

SparqlQueryParser::ArgListContext* SparqlQueryParser::IriOrFunctionContext::argList() {
  return getRuleContext<SparqlQueryParser::ArgListContext>(0);
}


size_t SparqlQueryParser::IriOrFunctionContext::getRuleIndex() const {
  return SparqlQueryParser::RuleIriOrFunction;
}


std::any SparqlQueryParser::IriOrFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitIriOrFunction(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::IriOrFunctionContext* SparqlQueryParser::iriOrFunction() {
  IriOrFunctionContext *_localctx = _tracker.createInstance<IriOrFunctionContext>(_ctx, getState());
  enterRule(_localctx, 218, SparqlQueryParser::RuleIriOrFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1336);
    iri();
    setState(1338);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SparqlQueryParser::OPEN_BRACE) {
      setState(1337);
      argList();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RdfLiteralContext ------------------------------------------------------------------

SparqlQueryParser::RdfLiteralContext::RdfLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::StringContext* SparqlQueryParser::RdfLiteralContext::string() {
  return getRuleContext<SparqlQueryParser::StringContext>(0);
}

tree::TerminalNode* SparqlQueryParser::RdfLiteralContext::LANGTAG() {
  return getToken(SparqlQueryParser::LANGTAG, 0);
}

tree::TerminalNode* SparqlQueryParser::RdfLiteralContext::REFERENCE() {
  return getToken(SparqlQueryParser::REFERENCE, 0);
}

SparqlQueryParser::IriContext* SparqlQueryParser::RdfLiteralContext::iri() {
  return getRuleContext<SparqlQueryParser::IriContext>(0);
}


size_t SparqlQueryParser::RdfLiteralContext::getRuleIndex() const {
  return SparqlQueryParser::RuleRdfLiteral;
}


std::any SparqlQueryParser::RdfLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitRdfLiteral(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::RdfLiteralContext* SparqlQueryParser::rdfLiteral() {
  RdfLiteralContext *_localctx = _tracker.createInstance<RdfLiteralContext>(_ctx, getState());
  enterRule(_localctx, 220, SparqlQueryParser::RuleRdfLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1340);
    string();
    setState(1344);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::LANGTAG: {
        setState(1341);
        match(SparqlQueryParser::LANGTAG);
        break;
      }

      case SparqlQueryParser::REFERENCE: {
        setState(1342);
        match(SparqlQueryParser::REFERENCE);
        setState(1343);
        iri();
        break;
      }

      case SparqlQueryParser::VALUES:
      case SparqlQueryParser::OPTIONAL:
      case SparqlQueryParser::GRAPH:
      case SparqlQueryParser::FILTER:
      case SparqlQueryParser::A:
      case SparqlQueryParser::TRUE:
      case SparqlQueryParser::FALSE:
      case SparqlQueryParser::ALL:
      case SparqlQueryParser::AS:
      case SparqlQueryParser::UNDEF:
      case SparqlQueryParser::SERVICE:
      case SparqlQueryParser::BIND:
      case SparqlQueryParser::MINUS:
      case SparqlQueryParser::NOT:
      case SparqlQueryParser::IN:
      case SparqlQueryParser::ANY:
      case SparqlQueryParser::IRIREF:
      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN:
      case SparqlQueryParser::BLANK_NODE_LABEL:
      case SparqlQueryParser::VAR1:
      case SparqlQueryParser::VAR2:
      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE:
      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE:
      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE:
      case SparqlQueryParser::STRING_LITERAL1:
      case SparqlQueryParser::STRING_LITERAL2:
      case SparqlQueryParser::STRING_LITERAL_LONG1:
      case SparqlQueryParser::STRING_LITERAL_LONG2:
      case SparqlQueryParser::LESS_EQUAL:
      case SparqlQueryParser::GREATER_EQUAL:
      case SparqlQueryParser::NOT_EQUAL:
      case SparqlQueryParser::AND:
      case SparqlQueryParser::OR:
      case SparqlQueryParser::INVERSE:
      case SparqlQueryParser::OPEN_BRACE:
      case SparqlQueryParser::CLOSE_BRACE:
      case SparqlQueryParser::OPEN_CURLY_BRACE:
      case SparqlQueryParser::CLOSE_CURLY_BRACE:
      case SparqlQueryParser::OPEN_SQUARE_BRACKET:
      case SparqlQueryParser::CLOSE_SQUARE_BRACKET:
      case SparqlQueryParser::SEMICOLON:
      case SparqlQueryParser::DOT:
      case SparqlQueryParser::PLUS_SIGN:
      case SparqlQueryParser::MINUS_SIGN:
      case SparqlQueryParser::ASTERISK:
      case SparqlQueryParser::COMMA:
      case SparqlQueryParser::NEGATION:
      case SparqlQueryParser::DIVIDE:
      case SparqlQueryParser::EQUAL:
      case SparqlQueryParser::LESS:
      case SparqlQueryParser::GREATER: {
        break;
      }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralContext ------------------------------------------------------------------

SparqlQueryParser::NumericLiteralContext::NumericLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SparqlQueryParser::NumericLiteralUnsignedContext* SparqlQueryParser::NumericLiteralContext::numericLiteralUnsigned() {
  return getRuleContext<SparqlQueryParser::NumericLiteralUnsignedContext>(0);
}

SparqlQueryParser::NumericLiteralPositiveContext* SparqlQueryParser::NumericLiteralContext::numericLiteralPositive() {
  return getRuleContext<SparqlQueryParser::NumericLiteralPositiveContext>(0);
}

SparqlQueryParser::NumericLiteralNegativeContext* SparqlQueryParser::NumericLiteralContext::numericLiteralNegative() {
  return getRuleContext<SparqlQueryParser::NumericLiteralNegativeContext>(0);
}


size_t SparqlQueryParser::NumericLiteralContext::getRuleIndex() const {
  return SparqlQueryParser::RuleNumericLiteral;
}


std::any SparqlQueryParser::NumericLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitNumericLiteral(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::NumericLiteralContext* SparqlQueryParser::numericLiteral() {
  NumericLiteralContext *_localctx = _tracker.createInstance<NumericLiteralContext>(_ctx, getState());
  enterRule(_localctx, 222, SparqlQueryParser::RuleNumericLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1349);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::INTEGER:
      case SparqlQueryParser::DECIMAL:
      case SparqlQueryParser::DOUBLE: {
        enterOuterAlt(_localctx, 1);
        setState(1346);
        numericLiteralUnsigned();
        break;
      }

      case SparqlQueryParser::INTEGER_POSITIVE:
      case SparqlQueryParser::DECIMAL_POSITIVE:
      case SparqlQueryParser::DOUBLE_POSITIVE: {
        enterOuterAlt(_localctx, 2);
        setState(1347);
        numericLiteralPositive();
        break;
      }

      case SparqlQueryParser::INTEGER_NEGATIVE:
      case SparqlQueryParser::DECIMAL_NEGATIVE:
      case SparqlQueryParser::DOUBLE_NEGATIVE: {
        enterOuterAlt(_localctx, 3);
        setState(1348);
        numericLiteralNegative();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralUnsignedContext ------------------------------------------------------------------

SparqlQueryParser::NumericLiteralUnsignedContext::NumericLiteralUnsignedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralUnsignedContext::INTEGER() {
  return getToken(SparqlQueryParser::INTEGER, 0);
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralUnsignedContext::DECIMAL() {
  return getToken(SparqlQueryParser::DECIMAL, 0);
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralUnsignedContext::DOUBLE() {
  return getToken(SparqlQueryParser::DOUBLE, 0);
}


size_t SparqlQueryParser::NumericLiteralUnsignedContext::getRuleIndex() const {
  return SparqlQueryParser::RuleNumericLiteralUnsigned;
}


std::any SparqlQueryParser::NumericLiteralUnsignedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitNumericLiteralUnsigned(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::NumericLiteralUnsignedContext* SparqlQueryParser::numericLiteralUnsigned() {
  NumericLiteralUnsignedContext *_localctx = _tracker.createInstance<NumericLiteralUnsignedContext>(_ctx, getState());
  enterRule(_localctx, 224, SparqlQueryParser::RuleNumericLiteralUnsigned);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1351);
    _la = _input->LA(1);
    if (!(((((_la - 112) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 112)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralPositiveContext ------------------------------------------------------------------

SparqlQueryParser::NumericLiteralPositiveContext::NumericLiteralPositiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralPositiveContext::INTEGER_POSITIVE() {
  return getToken(SparqlQueryParser::INTEGER_POSITIVE, 0);
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralPositiveContext::DECIMAL_POSITIVE() {
  return getToken(SparqlQueryParser::DECIMAL_POSITIVE, 0);
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralPositiveContext::DOUBLE_POSITIVE() {
  return getToken(SparqlQueryParser::DOUBLE_POSITIVE, 0);
}


size_t SparqlQueryParser::NumericLiteralPositiveContext::getRuleIndex() const {
  return SparqlQueryParser::RuleNumericLiteralPositive;
}


std::any SparqlQueryParser::NumericLiteralPositiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitNumericLiteralPositive(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::NumericLiteralPositiveContext* SparqlQueryParser::numericLiteralPositive() {
  NumericLiteralPositiveContext *_localctx = _tracker.createInstance<NumericLiteralPositiveContext>(_ctx, getState());
  enterRule(_localctx, 226, SparqlQueryParser::RuleNumericLiteralPositive);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1353);
    _la = _input->LA(1);
    if (!(((((_la - 115) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 115)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralNegativeContext ------------------------------------------------------------------

SparqlQueryParser::NumericLiteralNegativeContext::NumericLiteralNegativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralNegativeContext::INTEGER_NEGATIVE() {
  return getToken(SparqlQueryParser::INTEGER_NEGATIVE, 0);
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralNegativeContext::DECIMAL_NEGATIVE() {
  return getToken(SparqlQueryParser::DECIMAL_NEGATIVE, 0);
}

tree::TerminalNode* SparqlQueryParser::NumericLiteralNegativeContext::DOUBLE_NEGATIVE() {
  return getToken(SparqlQueryParser::DOUBLE_NEGATIVE, 0);
}


size_t SparqlQueryParser::NumericLiteralNegativeContext::getRuleIndex() const {
  return SparqlQueryParser::RuleNumericLiteralNegative;
}


std::any SparqlQueryParser::NumericLiteralNegativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitNumericLiteralNegative(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::NumericLiteralNegativeContext* SparqlQueryParser::numericLiteralNegative() {
  NumericLiteralNegativeContext *_localctx = _tracker.createInstance<NumericLiteralNegativeContext>(_ctx, getState());
  enterRule(_localctx, 228, SparqlQueryParser::RuleNumericLiteralNegative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1355);
    _la = _input->LA(1);
    if (!(((((_la - 118) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 118)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

SparqlQueryParser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::BooleanLiteralContext::TRUE() {
  return getToken(SparqlQueryParser::TRUE, 0);
}

tree::TerminalNode* SparqlQueryParser::BooleanLiteralContext::FALSE() {
  return getToken(SparqlQueryParser::FALSE, 0);
}


size_t SparqlQueryParser::BooleanLiteralContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBooleanLiteral;
}


std::any SparqlQueryParser::BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BooleanLiteralContext* SparqlQueryParser::booleanLiteral() {
  BooleanLiteralContext *_localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 230, SparqlQueryParser::RuleBooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1357);
    _la = _input->LA(1);
    if (!(_la == SparqlQueryParser::TRUE

    || _la == SparqlQueryParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

SparqlQueryParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::StringContext::STRING_LITERAL1() {
  return getToken(SparqlQueryParser::STRING_LITERAL1, 0);
}

tree::TerminalNode* SparqlQueryParser::StringContext::STRING_LITERAL2() {
  return getToken(SparqlQueryParser::STRING_LITERAL2, 0);
}

tree::TerminalNode* SparqlQueryParser::StringContext::STRING_LITERAL_LONG1() {
  return getToken(SparqlQueryParser::STRING_LITERAL_LONG1, 0);
}

tree::TerminalNode* SparqlQueryParser::StringContext::STRING_LITERAL_LONG2() {
  return getToken(SparqlQueryParser::STRING_LITERAL_LONG2, 0);
}


size_t SparqlQueryParser::StringContext::getRuleIndex() const {
  return SparqlQueryParser::RuleString;
}


std::any SparqlQueryParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::StringContext* SparqlQueryParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 232, SparqlQueryParser::RuleString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1359);
    _la = _input->LA(1);
    if (!(((((_la - 121) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 121)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IriContext ------------------------------------------------------------------

SparqlQueryParser::IriContext::IriContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::IriContext::IRIREF() {
  return getToken(SparqlQueryParser::IRIREF, 0);
}

SparqlQueryParser::PrefixedNameContext* SparqlQueryParser::IriContext::prefixedName() {
  return getRuleContext<SparqlQueryParser::PrefixedNameContext>(0);
}


size_t SparqlQueryParser::IriContext::getRuleIndex() const {
  return SparqlQueryParser::RuleIri;
}


std::any SparqlQueryParser::IriContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitIri(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::IriContext* SparqlQueryParser::iri() {
  IriContext *_localctx = _tracker.createInstance<IriContext>(_ctx, getState());
  enterRule(_localctx, 234, SparqlQueryParser::RuleIri);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1363);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::IRIREF: {
        enterOuterAlt(_localctx, 1);
        setState(1361);
        match(SparqlQueryParser::IRIREF);
        break;
      }

      case SparqlQueryParser::PNAME_NS:
      case SparqlQueryParser::PNAME_LN: {
        enterOuterAlt(_localctx, 2);
        setState(1362);
        prefixedName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrefixedNameContext ------------------------------------------------------------------

SparqlQueryParser::PrefixedNameContext::PrefixedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::PrefixedNameContext::PNAME_LN() {
  return getToken(SparqlQueryParser::PNAME_LN, 0);
}

tree::TerminalNode* SparqlQueryParser::PrefixedNameContext::PNAME_NS() {
  return getToken(SparqlQueryParser::PNAME_NS, 0);
}


size_t SparqlQueryParser::PrefixedNameContext::getRuleIndex() const {
  return SparqlQueryParser::RulePrefixedName;
}


std::any SparqlQueryParser::PrefixedNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitPrefixedName(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::PrefixedNameContext* SparqlQueryParser::prefixedName() {
  PrefixedNameContext *_localctx = _tracker.createInstance<PrefixedNameContext>(_ctx, getState());
  enterRule(_localctx, 236, SparqlQueryParser::RulePrefixedName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1365);
    _la = _input->LA(1);
    if (!(_la == SparqlQueryParser::PNAME_NS

    || _la == SparqlQueryParser::PNAME_LN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlankNodeContext ------------------------------------------------------------------

SparqlQueryParser::BlankNodeContext::BlankNodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::BlankNodeContext::BLANK_NODE_LABEL() {
  return getToken(SparqlQueryParser::BLANK_NODE_LABEL, 0);
}

SparqlQueryParser::AnonContext* SparqlQueryParser::BlankNodeContext::anon() {
  return getRuleContext<SparqlQueryParser::AnonContext>(0);
}


size_t SparqlQueryParser::BlankNodeContext::getRuleIndex() const {
  return SparqlQueryParser::RuleBlankNode;
}


std::any SparqlQueryParser::BlankNodeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitBlankNode(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::BlankNodeContext* SparqlQueryParser::blankNode() {
  BlankNodeContext *_localctx = _tracker.createInstance<BlankNodeContext>(_ctx, getState());
  enterRule(_localctx, 238, SparqlQueryParser::RuleBlankNode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1369);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SparqlQueryParser::BLANK_NODE_LABEL: {
        enterOuterAlt(_localctx, 1);
        setState(1367);
        match(SparqlQueryParser::BLANK_NODE_LABEL);
        break;
      }

      case SparqlQueryParser::OPEN_SQUARE_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(1368);
        anon();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnonContext ------------------------------------------------------------------

SparqlQueryParser::AnonContext::AnonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SparqlQueryParser::AnonContext::OPEN_SQUARE_BRACKET() {
  return getToken(SparqlQueryParser::OPEN_SQUARE_BRACKET, 0);
}

tree::TerminalNode* SparqlQueryParser::AnonContext::CLOSE_SQUARE_BRACKET() {
  return getToken(SparqlQueryParser::CLOSE_SQUARE_BRACKET, 0);
}


size_t SparqlQueryParser::AnonContext::getRuleIndex() const {
  return SparqlQueryParser::RuleAnon;
}


std::any SparqlQueryParser::AnonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<SparqlQueryParserVisitor*>(visitor))
    return parserVisitor->visitAnon(this);
  else
    return visitor->visitChildren(this);
}

SparqlQueryParser::AnonContext* SparqlQueryParser::anon() {
  AnonContext *_localctx = _tracker.createInstance<AnonContext>(_ctx, getState());
  enterRule(_localctx, 240, SparqlQueryParser::RuleAnon);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1371);
    match(SparqlQueryParser::OPEN_SQUARE_BRACKET);
    setState(1372);
    match(SparqlQueryParser::CLOSE_SQUARE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void SparqlQueryParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  sparqlqueryparserParserInitialize();
#else
  ::antlr4::internal::call_once(sparqlqueryparserParserOnceFlag, sparqlqueryparserParserInitialize);
#endif
}
