#pragma once

#include <cstdint>
#include <memory>
#include <stack>
#include <vector>

#include "query/id.h"
#include "query/parser/grammar/sparql/update_autogenerated/SparqlUpdateParserBaseVisitor.h"
#include "query/parser/op/sparql/op_triple.h"
#include "query/query_context.h"

#include "antlr4-runtime.h"

namespace SPARQL {

class UpdateVisitor : public SparqlUpdateParserBaseVisitor {
private:
    // GlobalInfo& global_info;
    std::string base_iri;

    std::unordered_map<std::string, std::string> iri_prefix_map;

    std::unordered_map<std::string, ObjectId> bnode_map;

    std::vector<OpTriple> current_triples;

    Id current_sparql_element = ObjectId::get_null(); // initial value won't be used

    std::stack<Id> subject_stack;
    std::stack<Id> predicate_stack;
    std::stack<Id> object_stack;

    // uint64_t last_blank;

    // Parsing helpers
    std::string iriCtxToString(SparqlUpdateParser::IriContext*);

    std::string stringCtxToString(SparqlUpdateParser::StringContext*);

    ObjectId handleIntegerString(const std::string&, const std::string&);

    ObjectId get_new_blank_node();

public:
    UpdateVisitor();

    // The final result will be stored here to be moved out
    std::unique_ptr<OpUpdate> op_update;

    virtual std::any visitQuery(SparqlUpdateParser::QueryContext*) override;
    virtual std::any visitPrologue(SparqlUpdateParser::PrologueContext*) override;
    virtual std::any visitBaseDecl(SparqlUpdateParser::BaseDeclContext*) override;
    virtual std::any visitPrefixDecl(SparqlUpdateParser::PrefixDeclContext*) override;

    virtual std::any visitInsertData(SparqlUpdateParser::InsertDataContext*) override;
    virtual std::any visitDeleteData(SparqlUpdateParser::DeleteDataContext*) override;
    virtual std::any visitTriplesTemplate(SparqlUpdateParser::TriplesTemplateContext*) override;

    virtual std::any visitTriplesSameSubject(SparqlUpdateParser::TriplesSameSubjectContext*) override;
    virtual std::any visitPropertyListNotEmpty(SparqlUpdateParser::PropertyListNotEmptyContext*) override;
    virtual std::any visitPropertyListPathNotEmpty(SparqlUpdateParser::PropertyListPathNotEmptyContext*) override;
    virtual std::any visitObject(SparqlUpdateParser::ObjectContext*) override;
    virtual std::any visitObjectPath(SparqlUpdateParser::ObjectPathContext*) override;
    virtual std::any visitCollection(SparqlUpdateParser::CollectionContext*) override;
    virtual std::any visitCollectionPath(SparqlUpdateParser::CollectionPathContext*) override;

    virtual std::any visitVerb(SparqlUpdateParser::VerbContext*) override;

    // graphTerm
    virtual std::any visitIri(SparqlUpdateParser::IriContext*) override;
    virtual std::any visitRdfLiteral(SparqlUpdateParser::RdfLiteralContext*) override;
    virtual std::any visitNumericLiteralUnsigned(SparqlUpdateParser::NumericLiteralUnsignedContext*) override;
    virtual std::any visitNumericLiteralPositive(SparqlUpdateParser::NumericLiteralPositiveContext*) override;
    virtual std::any visitNumericLiteralNegative(SparqlUpdateParser::NumericLiteralNegativeContext*) override;
    virtual std::any visitBooleanLiteral(SparqlUpdateParser::BooleanLiteralContext*) override;
    virtual std::any visitBlankNode(SparqlUpdateParser::BlankNodeContext*) override;
    virtual std::any visitNil(SparqlUpdateParser::NilContext*) override;

};
}
