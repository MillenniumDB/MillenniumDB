#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <stack>
#include <vector>

#include "query/id.h"
#include "query/parser/grammar/sparql/autogenerated/SparqlParserBaseVisitor.h"
#include "query/parser/grammar/sparql/id_or_path.h"
#include "query/parser/op/sparql/op_path.h"
#include "query/parser/op/sparql/op_triple.h"
#include "query/parser/paths/regular_path_expr.h"
#include "query/query_context.h"

#include "antlr4-runtime.h"

class QueryContext;
class Expr;

namespace SPARQL {

class QueryVisitor : public SparqlParserBaseVisitor {
public:

// To be shared between in nested QueryVisitors
struct GlobalInfo {
    std::string base_iri;

    std::unordered_map<std::string, std::string> iri_prefix_map;

    uint64_t blank_node_autogenerated_count = 0;
};

private:
    GlobalInfo& global_info;

    std::vector<VarId>                 select_variables;
    std::vector<std::unique_ptr<Expr>> select_variables_expressions;
    std::vector<OpTriple>              current_triples;
    std::vector<OpPath>                current_paths;

    // filter of the current group graph pattern
    std::stack<std::vector<std::unique_ptr<Expr>>> current_filters;

    std::vector<std::variant<VarId, std::unique_ptr<Expr>>> order_by_items;
    std::vector<std::pair<std::optional<VarId>, std::unique_ptr<Expr>>> group_by_items;
    std::vector<bool> order_by_ascending;

    std::vector<std::unique_ptr<Expr>> having_expressions;

    IdOrPath current_sparql_element = ObjectId::get_null(); // initial value won't be used

    std::stack<Id> subject_stack;
    std::stack<IdOrPath> predicate_stack;
    std::stack<Id> object_stack;

    uint64_t limit  = Op::DEFAULT_LIMIT;
    uint64_t offset = Op::DEFAULT_OFFSET;

    bool current_path_inverse;
    std::unique_ptr<RegularPathExpr> current_path;

    std::unique_ptr<Expr> current_expr;

    PathSemantic current_path_semantic;
    VarId        current_path_variable = VarId(0); // initial value won't be used

    // Parsing helpers
    std::string iriCtxToString(SparqlParser::IriContext*);

    std::string stringCtxToString(SparqlParser::StringContext*);

    ObjectId handleIntegerString(const std::string&, const std::string&);

    VarId get_new_blank_node_var() {
        auto new_bnode_id = global_info.blank_node_autogenerated_count++;
        std::string new_var_name = "_:.b" + std::to_string(new_bnode_id);
        return get_query_ctx().get_or_create_var(new_var_name);
    }

public:
    QueryVisitor(GlobalInfo& global_info) : global_info(global_info) { }

    // The final result will be stored here to be moved out
    std::unique_ptr<Op> current_op;

    virtual antlrcpp::Any visitQuery(SparqlParser::QueryContext*) override;

    virtual antlrcpp::Any visitConstructQuery(SparqlParser::ConstructQueryContext*) override;
    virtual antlrcpp::Any visitDescribeQuery(SparqlParser::DescribeQueryContext*) override;
    virtual antlrcpp::Any visitAskQuery(SparqlParser::AskQueryContext*) override;
    virtual antlrcpp::Any visitUpdateCommand(SparqlParser::UpdateCommandContext*) override;
    virtual antlrcpp::Any visitPrologue(SparqlParser::PrologueContext*) override;
    virtual antlrcpp::Any visitBaseDecl(SparqlParser::BaseDeclContext*) override;
    virtual antlrcpp::Any visitPrefixDecl(SparqlParser::PrefixDeclContext*) override;
    virtual antlrcpp::Any visitSolutionModifier(SparqlParser::SolutionModifierContext*) override;
    virtual antlrcpp::Any visitOrderClause(SparqlParser::OrderClauseContext*) override;

    virtual antlrcpp::Any visitPrimaryExpression(SparqlParser::PrimaryExpressionContext*) override;
    virtual antlrcpp::Any visitUnaryExpression(SparqlParser::UnaryExpressionContext*) override;
    virtual antlrcpp::Any visitMultiplicativeExpression(SparqlParser::MultiplicativeExpressionContext*) override;
    virtual antlrcpp::Any visitAdditiveExpression(SparqlParser::AdditiveExpressionContext*) override;
    virtual antlrcpp::Any visitRelationalExpression(SparqlParser::RelationalExpressionContext*) override;
    virtual antlrcpp::Any visitConditionalAndExpression(SparqlParser::ConditionalAndExpressionContext*) override;
    virtual antlrcpp::Any visitConditionalOrExpression(SparqlParser::ConditionalOrExpressionContext*) override;

    virtual antlrcpp::Any visitAggregate(SparqlParser::AggregateContext*) override;
    virtual antlrcpp::Any visitSubStringExpression(SparqlParser::SubStringExpressionContext*) override;
    virtual antlrcpp::Any visitStrReplaceExpression(SparqlParser::StrReplaceExpressionContext*) override;
    virtual antlrcpp::Any visitRegexExpression(SparqlParser::RegexExpressionContext*) override;
    virtual antlrcpp::Any visitExistsFunction(SparqlParser::ExistsFunctionContext*) override;
    virtual antlrcpp::Any visitNotExistsFunction(SparqlParser::NotExistsFunctionContext*) override;

    virtual antlrcpp::Any visitSelectQuery(SparqlParser::SelectQueryContext*) override;
    virtual antlrcpp::Any visitSubSelect(SparqlParser::SubSelectContext*) override;
    virtual antlrcpp::Any visitSelectClause(SparqlParser::SelectClauseContext*) override;
    virtual antlrcpp::Any visitSelectSingleVariable(SparqlParser::SelectSingleVariableContext*) override;
    virtual antlrcpp::Any visitSelectExpressionAsVariable(SparqlParser::SelectExpressionAsVariableContext*) override;
    virtual antlrcpp::Any visitWhereClause(SparqlParser::WhereClauseContext*) override;
    virtual antlrcpp::Any visitGroupGraphPatternSub(SparqlParser::GroupGraphPatternSubContext*) override;
    virtual antlrcpp::Any visitTriplesSameSubjectPath(SparqlParser::TriplesSameSubjectPathContext*) override;
    virtual antlrcpp::Any visitTriplesSameSubject(SparqlParser::TriplesSameSubjectContext*) override;
    virtual antlrcpp::Any visitTriplesBlock(SparqlParser::TriplesBlockContext*) override;
    virtual antlrcpp::Any visitBlankNodePropertyListPath(SparqlParser::BlankNodePropertyListPathContext* ctx) override;
    virtual antlrcpp::Any visitPropertyListPathNotEmpty(SparqlParser::PropertyListPathNotEmptyContext*) override;
    virtual antlrcpp::Any visitPropertyListNotEmpty(SparqlParser::PropertyListNotEmptyContext*) override;
    virtual antlrcpp::Any visitObjectPath(SparqlParser::ObjectPathContext*) override;
    virtual antlrcpp::Any visitObject(SparqlParser::ObjectContext*) override;
    virtual antlrcpp::Any visitCollectionPath(SparqlParser::CollectionPathContext*) override;
    virtual antlrcpp::Any visitCollection(SparqlParser::CollectionContext*) override;

    virtual antlrcpp::Any visitGroupCondition(SparqlParser::GroupConditionContext*) override;
    virtual antlrcpp::Any visitHavingCondition(SparqlParser::HavingConditionContext*) override;

    virtual antlrcpp::Any visitVar(SparqlParser::VarContext*) override;
    virtual antlrcpp::Any visitIri(SparqlParser::IriContext*) override;
    virtual antlrcpp::Any visitRdfLiteral(SparqlParser::RdfLiteralContext*) override;
    virtual antlrcpp::Any visitNumericLiteralUnsigned(SparqlParser::NumericLiteralUnsignedContext*) override;
    virtual antlrcpp::Any visitNumericLiteralPositive(SparqlParser::NumericLiteralPositiveContext*) override;
    virtual antlrcpp::Any visitNumericLiteralNegative(SparqlParser::NumericLiteralNegativeContext*) override;
    virtual antlrcpp::Any visitBooleanLiteral(SparqlParser::BooleanLiteralContext*) override;
    virtual antlrcpp::Any visitBlankNode(SparqlParser::BlankNodeContext*) override;
    virtual antlrcpp::Any visitNil(SparqlParser::NilContext*) override;

    virtual antlrcpp::Any visitVerbPath(SparqlParser::VerbPathContext*) override;
    virtual antlrcpp::Any visitVerb(SparqlParser::VerbContext*) override;

    virtual antlrcpp::Any visitPathAlternative(SparqlParser::PathAlternativeContext*) override;
    virtual antlrcpp::Any visitPathSequence(SparqlParser::PathSequenceContext*) override;
    virtual antlrcpp::Any visitPathEltOrInverse(SparqlParser::PathEltOrInverseContext*) override;

    virtual antlrcpp::Any visitGroupOrUnionGraphPattern(SparqlParser::GroupOrUnionGraphPatternContext*) override;
    virtual antlrcpp::Any visitOptionalGraphPattern(SparqlParser::OptionalGraphPatternContext*) override;
    virtual antlrcpp::Any visitMinusGraphPattern(SparqlParser::MinusGraphPatternContext*) override;
    virtual antlrcpp::Any visitServiceGraphPattern(SparqlParser::ServiceGraphPatternContext*) override;
    virtual antlrcpp::Any visitGraphGraphPattern(SparqlParser::GraphGraphPatternContext*) override;
    virtual antlrcpp::Any visitBind(SparqlParser::BindContext*) override;
    virtual antlrcpp::Any visitValuesClause(SparqlParser::ValuesClauseContext*) override;
    virtual antlrcpp::Any visitInlineDataOneVar(SparqlParser::InlineDataOneVarContext*) override;
    virtual antlrcpp::Any visitInlineDataFull(SparqlParser::InlineDataFullContext*) override;

    virtual antlrcpp::Any visitFilter(SparqlParser::FilterContext*) override;
    virtual antlrcpp::Any visitBuiltInCall(SparqlParser::BuiltInCallContext*) override;
    virtual antlrcpp::Any visitFunctionCall(SparqlParser::FunctionCallContext*) override;
};
}
