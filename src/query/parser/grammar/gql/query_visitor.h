#pragma once

#include <memory>
#include <vector>

#include "query/parser/expr/gql/expr.h"
#include "query/parser/grammar/gql/autogenerated/GQLParserBaseVisitor.h"
#include "query/parser/op/gql/graph_pattern/op_basic_graph_pattern.h"
#include "query/parser/op/gql/graph_pattern/op_repetition.h"
#include "query/parser/op/gql/graph_pattern/path_mode.h"
#include "query/parser/op/gql/op.h"
#include "query/parser/op/gql/op_let.h"
#include "query/parser/op/gql/op_return.h"
#include "query/var_id.h"

namespace GQL {
class Expr;

class OpBasicGraphPattern;

class QueryVisitor : public GQLParserBaseVisitor {
private:
    enum EdgeType {
        EdgePointingLeft,
        EdgeUndirected,
        EdgePointingRight,
        EdgeLeftOrUndirected,
        EdgeUndirectedOrRight,
        EdgeLeftOrRight,
        EdgeAnyDirection,
    };

    enum PatternType {
        Other,
        Node,
        Edge,
        Subpath,
    };

    struct PatternInfo {
        std::unique_ptr<Op> pattern;
        PatternType type;
        VarId id;
        EdgeType edge_type;
        std::unique_ptr<OpRepetition::Repetition> repetition;

        PatternInfo(
            std::unique_ptr<Op> pattern,
            PatternType type,
            VarId id,
            EdgeType edge_type,
            std::unique_ptr<OpRepetition::Repetition> repetition = nullptr
        ) :
            pattern(std::move(pattern)),
            type(type),
            id(id),
            edge_type(edge_type),
            repetition(std::move(repetition))
        { }
    };

    std::map<VarId, VarType::Type> singleton_types;
    std::unique_ptr<VarId> current_id = nullptr;
    std::unique_ptr<VarId> current_label_var_id = nullptr;
    EdgeType edge_type;
    PathMode path_mode = PathMode();
    std::optional<LetItem> let_item;
    std::vector<LetItem> let_items;

    std::vector<std::unique_ptr<Op>> statements;
    std::vector<std::unique_ptr<Op>> query_statements;

    std::unique_ptr<OpRepetition::Repetition> current_repetition = nullptr;
    PatternType current_pattern;

    OpEdge create_edge(VarId left_node, VarId right_node, VarId edge_id, VarId direction_var, EdgeType type);
    uint64_t get_unsigned_integer(std::string& str);

    std::vector<std::unique_ptr<Expr>> filter_items;
    std::vector<OpReturn::Item> return_items;

    std::vector<std::unique_ptr<Expr>> order_by_items;
    std::vector<bool> order_by_ascending;
    std::vector<bool> order_nulls;
    bool distinct = false;

    uint64_t limit = Op::DEFAULT_LIMIT;
    uint64_t offset = Op::DEFAULT_OFFSET;

public:
    std::unique_ptr<Op> current_op;

    std::unique_ptr<Expr> current_expr;

    std::vector<std::unique_ptr<Expr>> current_expr_list;

    std::any visitPrimitiveQueryStatement(GQLParser::PrimitiveQueryStatementContext* ctx) override;
    std::any visitSimpleLinearDataAccessingStatement(GQLParser::SimpleLinearDataAccessingStatementContext* ctx
    ) override;

    std::any visitPrimitiveResultStatement(GQLParser::PrimitiveResultStatementContext* ctx) override;
    std::any visitReturnStatementBody(GQLParser::ReturnStatementBodyContext* ctx) override;
    std::any visitReturnItemList(GQLParser::ReturnItemListContext* ctx) override;
    std::any visitGroupingElementList(GQLParser::GroupingElementListContext* ctx) override;
    std::any visitMatchStatement(GQLParser::MatchStatementContext* ctx) override;
    std::any visitLetStatement(GQLParser::LetStatementContext* ctx) override;
    std::any visitLetVariableDefinitionList(GQLParser::LetVariableDefinitionListContext* ctx) override;
    std::any visitLetVariableDefinition(GQLParser::LetVariableDefinitionContext* ctx) override;

    std::any visitPathPatternList(GQLParser::PathPatternListContext* ctx) override;
    std::any visitPathPatternUnion(GQLParser::PathPatternUnionContext* ctx) override;
    std::any visitPathTerm(GQLParser::PathTermContext* ctx) override;
    std::any visitNodePattern(GQLParser::NodePatternContext* ctx) override;
    std::any visitEdgePattern(GQLParser::EdgePatternContext* ctx) override;
    std::any visitElementPatternFiller(GQLParser::ElementPatternFillerContext* ctx) override;

    std::any visitGraphPatternWhereClause(GQLParser::GraphPatternWhereClauseContext* ctx) override;
    std::any
        visitParenthesizedPathPatternWhereClause(GQLParser::ParenthesizedPathPatternWhereClauseContext* ctx
        ) override;
    std::any visitPathPattern(GQLParser::PathPatternContext* ctx) override;
    std::any visitParenthesizedPathPatternExpression(GQLParser::ParenthesizedPathPatternExpressionContext* ctx
    ) override;

    std::any visitQuestionedPathPrimary(GQLParser::QuestionedPathPrimaryContext* ctx) override;
    std::any visitQuantifiedPathPrimary(GQLParser::QuantifiedPathPrimaryContext* ctx) override;
    std::any visitGraphPatternQuantifier(GQLParser::GraphPatternQuantifierContext* ctx) override;

    std::any visitPathMode(GQLParser::PathModeContext* ctx) override;
    std::any visitAllPathSearch(GQLParser::AllPathSearchContext* ctx) override;
    std::any visitAnyPathSearch(GQLParser::AnyPathSearchContext* ctx) override;
    std::any visitShortestPathSearch(GQLParser::ShortestPathSearchContext* ctx) override;

    // Variables
    std::any visitPathVariableDeclaration(GQLParser::PathVariableDeclarationContext* ctx) override;
    std::any visitElementVariableDeclaration(GQLParser::ElementVariableDeclarationContext* ctx) override;
    std::any visitSubpathVariableDeclaration(GQLParser::SubpathVariableDeclarationContext* ctx) override;

    // Labels
    std::any visitIsLabelExpression(GQLParser::IsLabelExpressionContext* ctx) override;
    std::any visitLabelExpression(GQLParser::LabelExpressionContext* ctx) override;
    std::any visitLabelTerm(GQLParser::LabelTermContext* ctx) override;
    std::any visitLabelFactor(GQLParser::LabelFactorContext* ctx) override;
    std::any visitLabelPrimary(GQLParser::LabelPrimaryContext* ctx) override;

    // Expression
    std::any visitGqlNotExpression(GQLParser::GqlNotExpressionContext* ctx) override;
    std::any visitGqlLogicalOrExpression(GQLParser::GqlLogicalOrExpressionContext* ctx) override;
    std::any visitGqlLogicalAndExpression(GQLParser::GqlLogicalAndExpressionContext* ctx) override;
    std::any visitGqlLogicalXorExpression(GQLParser::GqlLogicalXorExpressionContext* ctx) override;
    std::any visitGqlNullExpression(GQLParser::GqlNullExpressionContext* ctx) override;

    // Predicate expression
    std::any visitGqlBooleanTestExpression(GQLParser::GqlBooleanTestExpressionContext* ctx) override;
    std::any visitGqlComparisonExpression(GQLParser::GqlComparisonExpressionContext* ctx) override;

    // Expression atom
    std::any visitGqlParenthesizedExpression(GQLParser::GqlParenthesizedExpressionContext* ctx) override;
    std::any visitGqlPropertyReference(GQLParser::GqlPropertyReferenceContext* ctx) override;
    std::any visitGqlLabeledExpression(GQLParser::GqlLabeledExpressionContext* ctx) override;
    std::any visitGqlConcatenationExpression(GQLParser::GqlConcatenationExpressionContext* ctx) override;
    std::any visitGqlVariableExpression(GQLParser::GqlVariableExpressionContext* ctx) override;
    std::any visitGqlLowArithmeticExpression(GQLParser::GqlLowArithmeticExpressionContext* ctx) override;
    std::any visitGqlHighArithmeticExpression(GQLParser::GqlHighArithmeticExpressionContext* ctx) override;

    std::any visitPropertyReference(GQLParser::PropertyReferenceContext* ctx) override;

    std::any visitElementPatternWhereClause(GQLParser::ElementPatternWhereClauseContext* ctx) override;
    std::any visitPropertyKeyValuePairList(GQLParser::PropertyKeyValuePairListContext* ctx) override;
    std::any visitPropertyKeyValuePair(GQLParser::PropertyKeyValuePairContext* ctx) override;

    // Literal
    std::any visitSingleQuotedCharacterSequence(GQLParser::SingleQuotedCharacterSequenceContext* ctx
    ) override;
    std::any visitDoubleQuotedCharacterSequence(GQLParser::DoubleQuotedCharacterSequenceContext* ctx
    ) override;
    std::any visitIntegerLiteral(GQLParser::IntegerLiteralContext* ctx) override;
    std::any visitFloatLiteral(GQLParser::FloatLiteralContext* ctx) override;
    std::any visitBooleanLiteral(GQLParser::BooleanLiteralContext* ctx) override;
    std::any visitGqlUnaryExpression(GQLParser::GqlUnaryExpressionContext* ctx) override;

    std::any visitOrderByAndPageStatement(GQLParser::OrderByAndPageStatementContext* ctx) override;
    std::any visitOrderByClause(GQLParser::OrderByClauseContext* ctx) override;
    std::any visitLimitClause(GQLParser::LimitClauseContext* ctx) override;
    std::any visitOffsetClause(GQLParser::OffsetClauseContext* ctx) override;

    //numericFunction
    std::any visitGqlOneArgScalarFunction(GQLParser::GqlOneArgScalarFunctionContext* ctx) override;
    std::any visitGqlTwoArgScalarFunction(GQLParser::GqlTwoArgScalarFunctionContext* ctx) override;

    //stringFunction
    std::any visitGqlSubstringFunction(GQLParser::GqlSubstringFunctionContext* ctx) override;
    std::any visitGqlFoldStringFunction(GQLParser::GqlFoldStringFunctionContext* ctx) override;
    std::any visitGqlSingleTrimStringFunction(GQLParser::GqlSingleTrimStringFunctionContext* ctx) override;
    std::any visitGqlMultiTrimStringFunction(GQLParser::GqlMultiTrimStringFunctionContext* ctx) override;
    std::any visitGqlNormStringFunction(GQLParser::GqlNormStringFunctionContext* ctx) override;

    //caseFunction
    std::any visitGqlNullIfCaseFunction(GQLParser::GqlNullIfCaseFunctionContext* ctx) override;
    std::any visitGqlCoalesceCaseFunction(GQLParser::GqlCoalesceCaseFunctionContext* ctx) override;
    std::any visitGqlSimpleCaseFunction(GQLParser::GqlSimpleCaseFunctionContext* ctx) override;
    std::any visitGqlSearchedCaseFunction(GQLParser::GqlSearchedCaseFunctionContext* ctx) override;

    std::any visitCastFunction(GQLParser::CastFunctionContext* ctx) override;

    // datetimeValueFunction
    std::any visitDateFunction(GQLParser::DateFunctionContext* ctx) override;
    std::any visitTimeFunction(GQLParser::TimeFunctionContext* ctx) override;
    std::any visitLocalTimeFunction(GQLParser::LocalTimeFunctionContext* ctx) override;
    std::any visitDatetimeFunction(GQLParser::DatetimeFunctionContext* ctx) override;
    std::any visitLocalDatetimeFunction(GQLParser::LocalDatetimeFunctionContext* ctx) override;

    //aggregateFunction
    std::any visitGqlCountAllFunction(GQLParser::GqlCountAllFunctionContext*) override;
    std::any visitGqlGeneralSetFunction(GQLParser::GqlGeneralSetFunctionContext* ctx) override;
    std::any visitGqlBinarySetFunction(GQLParser::GqlBinarySetFunctionContext* ctx) override;

    std::any visitFilterStatement(GQLParser::FilterStatementContext* ctx) override;
};
} // namespace GQL
