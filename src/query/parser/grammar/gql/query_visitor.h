#pragma once

#include <memory>
#include <vector>

#include "query/parser/expr/expr.h"
#include "query/parser/grammar/gql/autogenerated/GQLParserBaseVisitor.h"
#include "query/parser/op/gql/graph_pattern/op_basic_graph_pattern.h"
#include "query/parser/op/gql/graph_pattern/op_repetition.h"
#include "query/parser/op/gql/graph_pattern/path_mode.h"
#include "query/parser/op/op.h"
#include "query/var_id.h"

class Expr;

namespace GQL {

class OpBasicGraphPattern;

class QueryVisitor : public GQLParserBaseVisitor {
private:
    enum EdgeType {
        EdgePointingLeft,
        EdgeUndirected,
        EdgePointingRight,
        EdgeLeftOrUndirected,
        EdgeUndirectedOrRight,
        EdgeLeftOrRight,
        EdgeAnyDirection,
    };

    enum PatternType {
        Other,
        Node,
        Edge,
        Subpath,
    };

    std::map<VarId, VarType::Type> singleton_types;
    std::unique_ptr<VarId> current_id = nullptr;
    std::unique_ptr<VarId> current_label_var_id = nullptr;
    EdgeType edge_type;
    PathMode path_mode = PathMode();

    std::unique_ptr<Repetition> current_repetition = nullptr;
    PatternType current_pattern;

    OpEdge create_edge(VarId left_node, VarId right_node, VarId edge_id, EdgeType type);

    std::vector<std::unique_ptr<Expr>> order_by_items;
    std::vector<bool> order_by_ascending;
    std::vector<bool> order_nulls;

public:
    std::unique_ptr<Op> current_op;

    std::unique_ptr<Expr> current_expr;

    std::vector<std::unique_ptr<Expr>> current_expr_list;

    std::unique_ptr<OpBasicGraphPattern> current_basic_graph_pattern;

    std::any visitPrimitiveQueryStatement(GQLParser::PrimitiveQueryStatementContext* ctx) override;
    std::any visitReturnStatementBody(GQLParser::ReturnStatementBodyContext* ctx) override;
    std::any visitReturnItemList(GQLParser::ReturnItemListContext* ctx) override;
    std::any visitMatchStatement(GQLParser::MatchStatementContext* ctx) override;

    std::any visitPathPatternList(GQLParser::PathPatternListContext* ctx) override;
    std::any visitPathPatternUnion(GQLParser::PathPatternUnionContext* ctx) override;
    std::any visitPathTerm(GQLParser::PathTermContext* ctx) override;
    std::any visitNodePattern(GQLParser::NodePatternContext* ctx) override;
    std::any visitEdgePattern(GQLParser::EdgePatternContext* ctx) override;
    std::any visitElementPatternFiller(GQLParser::ElementPatternFillerContext* ctx) override;

    std::any visitGraphPatternWhereClause(GQLParser::GraphPatternWhereClauseContext* ctx) override;
    std::any
        visitParenthesizedPathPatternWhereClause(GQLParser::ParenthesizedPathPatternWhereClauseContext* ctx
        ) override;
    std::any visitPathPattern(GQLParser::PathPatternContext* ctx) override;
    std::any visitParenthesizedPathPatternExpression(GQLParser::ParenthesizedPathPatternExpressionContext* ctx
    ) override;

    std::any visitQuestionedPathPrimary(GQLParser::QuestionedPathPrimaryContext* ctx) override;
    std::any visitGraphPatternQuantifier(GQLParser::GraphPatternQuantifierContext* ctx) override;

    std::any visitPathMode(GQLParser::PathModeContext* ctx) override;
    std::any visitAllPathSearch(GQLParser::AllPathSearchContext* ctx) override;
    std::any visitAnyPathSearch(GQLParser::AnyPathSearchContext* ctx) override;
    std::any visitShortestPathSearch(GQLParser::ShortestPathSearchContext* ctx) override;

    // Variables
    std::any visitPathVariableDeclaration(GQLParser::PathVariableDeclarationContext* ctx) override;
    std::any visitElementVariableDeclaration(GQLParser::ElementVariableDeclarationContext* ctx) override;
    std::any visitSubpathVariableDeclaration(GQLParser::SubpathVariableDeclarationContext* ctx) override;

    // Labels
    std::any visitIsLabelExpression(GQLParser::IsLabelExpressionContext* ctx) override;
    std::any visitLabelExpression(GQLParser::LabelExpressionContext* ctx) override;
    std::any visitLabelTerm(GQLParser::LabelTermContext* ctx) override;
    std::any visitLabelFactor(GQLParser::LabelFactorContext* ctx) override;
    std::any visitLabelPrimary(GQLParser::LabelPrimaryContext* ctx) override;

    // Expression
    std::any visitGqlNotExpression(GQLParser::GqlNotExpressionContext* ctx) override;
    std::any visitGqlLogicalOrExpression(GQLParser::GqlLogicalOrExpressionContext* ctx) override;
    std::any visitGqlLogicalAndExpression(GQLParser::GqlLogicalAndExpressionContext* ctx) override;
    std::any visitGqlLogicalXorExpression(GQLParser::GqlLogicalXorExpressionContext* ctx) override;
    std::any visitGqlNullExpression(GQLParser::GqlNullExpressionContext* ctx) override;

    // Predicate expression
    std::any visitGqlBooleanTestExpression(GQLParser::GqlBooleanTestExpressionContext* ctx) override;
    std::any visitGqlComparisonExpression(GQLParser::GqlComparisonExpressionContext* ctx) override;

    // Expression atom
    std::any visitGqlParenthesizedExpression(GQLParser::GqlParenthesizedExpressionContext* ctx) override;
    std::any visitGqlPropertyReference(GQLParser::GqlPropertyReferenceContext* ctx) override;
    std::any visitGqlLabeledExpression(GQLParser::GqlLabeledExpressionContext* ctx) override;
    std::any visitGqlConcatenationExpression(GQLParser::GqlConcatenationExpressionContext* ctx) override;
    std::any visitGqlVariableExpression(GQLParser::GqlVariableExpressionContext* ctx) override;
    std::any visitGqlLowArithmeticExpression(GQLParser::GqlLowArithmeticExpressionContext* ctx) override;
    std::any visitGqlHighArithmeticExpression(GQLParser::GqlHighArithmeticExpressionContext* ctx) override;

    std::any visitElementPatternWhereClause(GQLParser::ElementPatternWhereClauseContext* ctx) override;
    std::any visitPropertyKeyValuePairList(GQLParser::PropertyKeyValuePairListContext* ctx) override;
    std::any visitPropertyKeyValuePair(GQLParser::PropertyKeyValuePairContext* ctx) override;

    // Literal
    std::any visitSingleQuotedCharacterSequence(GQLParser::SingleQuotedCharacterSequenceContext* ctx
    ) override;
    std::any visitDoubleQuotedCharacterSequence(GQLParser::DoubleQuotedCharacterSequenceContext* ctx
    ) override;
    std::any visitIntegerLiteral(GQLParser::IntegerLiteralContext* ctx) override;
    std::any visitFloatLiteral(GQLParser::FloatLiteralContext* ctx) override;
    std::any visitBooleanLiteral(GQLParser::BooleanLiteralContext* ctx) override;

    std::any visitOrderByAndPageStatement(GQLParser::OrderByAndPageStatementContext* ctx) override;
    std::any visitOrderByClause(GQLParser::OrderByClauseContext* ctx) override;
};
} // namespace GQL
