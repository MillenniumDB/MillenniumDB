#pragma once

#include <memory>

#include "query/executor/binding_iter/aggregation/agg.h"
#include "query/executor/binding_iter.h"
#include "query/optimizer/plan/plan.h"
#include "query/parser/op/op_visitor.h"

namespace GQL {

class BindingIterConstructor : public OpVisitor {
public:
    BindingIterConstructor() {};

    std::vector<VarId> projected_vars;

    // The expressions present in OpReturn and OpOrderBy
    // The the expressions of Return are before expression from OrderBy
    // Because the evaluation is from left to right
    std::vector<std::pair<VarId, std::unique_ptr<BindingExpr>>> projection_order_exprs;

    // same elements of group_vars_vector but in a set to easier search
    std::set<VarId> group_vars;

    // variables saved in the OrderBy that makes the groups
    // contains all group_vars and other used variables
    std::set<VarId> group_saved_vars;

    std::map<VarId, std::unique_ptr<Agg>> aggregations;

    // vars needed after the order generated by the order by
    std::set<VarId> order_saved_vars;

    std::unique_ptr<BindingIter> tmp;

    std::unique_ptr<Plan> tmp_plan;

    std::vector<bool> begin_at_left;

    std::set<VarId> assigned_vars;
    std::set<VarId> all_seen_vars;

    bool node_at_left = false;

    std::set<VarId> seen_nodes;
    std::set<VarId> possible_disjoint_nodes;

    std::set<std::pair<VarId, ObjectId>> setted_vars;

    uint64_t bgp_depth = 0;
    std::vector<std::unique_ptr<Plan>> base_plans;

    OpOrderBy* op_order_by = nullptr;

    bool grouping = false;

    void visit(OpReturn&) override;
    void visit(OpOrderBy&) override;
    void visit(OpGraphPattern&) override;
    void visit(OpBasicGraphPattern&) override;
    void visit(OpGraphPatternList&) override;
    void visit(OpFilter&) override;
    void visit(OpPathUnion&) override;
    void visit(OpRepetition&) override;
    void visit(OpOptProperties&) override;
    void visit(OpOptLabels& op) override;
    void visit(OpLinearPattern& op) override;

    void visit(OpNode&) override;
    void visit(OpNodeLabel&) override;
    void visit(OpEdgeLabel&) override;
    void visit(OpEdge&) override;
    void visit(OpProperty&) override;
};

} // namespace GQL
