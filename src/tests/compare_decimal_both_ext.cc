#include "graph_models/rdf_model/datatypes/decimal.h"

#include <cassert>
#include <cstring>
#include <iostream>
#include <string>
#include <vector>


int compare(std::string& lhs, std::string& rhs) {
    bool error;

    auto lhs_decimal = Decimal(lhs, &error);
    assert(!error);

    auto rhs_decimal = Decimal(rhs, &error);
    assert(!error);

    if (lhs_decimal < rhs_decimal) {
        return -1;
    } else if (lhs_decimal == rhs_decimal) {
        return 0;
    } else {
        return 1;
    }
}

int main() {
    std::vector<std::string> tests = {
        "-14040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040",
        "-4040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040",
        "-30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303.22",
        "-30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303.2",
        "-30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303.1",
        "-.30403030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303",
        "-.303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303035",
        "-.30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303",
        ".30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303",
        ".303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303035",
        ".30403030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303",
        "30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303.1",
        "30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303.2",
        "30303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303.22",
        "4040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040",
        "14040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040"
    };

    for (size_t i=0; i<tests.size(); i++) {
        // EQ
        auto res_eq = compare(tests[i], tests[i]);
        if (res_eq != 0) {
            std::cout << "EQ: " << tests[i] << " != " << tests[i] << std::endl;
            return 1;
        }
        for (size_t j=i+1; j<tests.size(); j++) {
            // LT and GT
            auto res_lt = compare(tests[i], tests[j]);
            auto res_gt = compare(tests[j], tests[i]);

            if (res_lt >= 0 || res_gt <= 0) {
                std::cout << "NOT LT:\n" << tests[i] << "\n" << tests[j] << std::endl;
                return 1;
            }
        }
    }

    return 0;
}
