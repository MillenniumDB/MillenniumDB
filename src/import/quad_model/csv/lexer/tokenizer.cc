/* Generated by re2c 4.0.2 on Fri Jan 31 16:27:04 2025 */
#line 1 "tokenizer_template.cpp"
// re2c tokenizer_template.cpp -o tokenizer.cc
#include <cstring>

#include "import/quad_model/csv/lexer/token.h"
#include "import/quad_model/csv/lexer/tokenizer.h"
#include "system/string_manager.h"

using namespace Import::QuadModel::CSV;

#line 14 "tokenizer.cc"
#define YYMAXFILL 3
#line 11 "tokenizer_template.cpp"

constexpr size_t CSVTokenizer_SIZE = StringManager::MAX_STRING_SIZE;

CSVTokenizer::CSVTokenizer() :
    _str(new char[CSVTokenizer_SIZE + YYMAXFILL]),
    buf(new char[CSVTokenizer_SIZE + YYMAXFILL])
{ }

CSVTokenizer::~CSVTokenizer()
{
    delete[] buf;
    delete[] str;
}

void CSVTokenizer::begin(MDBIstream& in)
{
    this->in = &in;
    this->eof = false;
    lim = buf + CSVTokenizer_SIZE;
    cur = lim;
    mar = lim;
    token_start = lim;
}

bool CSVTokenizer::fill(size_t need)
{
    if (eof)
        return false;

    const size_t free = token_start - buf;
    if (free < need)
        return false;

    if (free + (lim - cur) < need)
        return false;

    memmove(buf, token_start, lim - token_start);
    lim -= free;
    cur -= free;
    mar -= free;
    token_start -= free;

    auto r = in->read(lim, free);
    lim += r;

    if (lim < buf + CSVTokenizer_SIZE) {
        if (r == 0)
            return false;
        eof = true;
        memset(lim, 9, YYMAXFILL);
        lim += YYMAXFILL - 1;
    }
    return true;
}

Token CSVTokenizer::get_token()
{
    auto res = _get_token();
    str_len = cur - token_start;

    std::memcpy(_str, token_start, str_len);
    _str[str_len] = '\0';
    str = _str;
    // std::cout << "[DEBUG] Token: " << res << "\tstr: \"" << str << "\"\n";
    return res;
}

Token CSVTokenizer::_get_token()
{
    token_start = cur;
    
#line 88 "tokenizer.cc"
{
	char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 3) if (!fill(3)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '\n': goto yy4;
		case '\r': goto yy5;
		case '"': goto yy7;
		case '+':
		case '-': goto yy8;
		case ',': goto yy9;
		case '.': goto yy10;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy11;
		default: goto yy1;
	}
yy1:
	++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
yy2:
	switch (yych) {
		case '\n':
		case '\r':
		case '"':
		case ',': goto yy3;
		default: goto yy1;
	}
yy3:
#line 103 "tokenizer_template.cpp"
	{ return Token::UNQUOTED_STRING; }
#line 129 "tokenizer.cc"
yy4:
	++cur;
#line 102 "tokenizer_template.cpp"
	{ return Token::ENDLINE; }
#line 134 "tokenizer.cc"
yy5:
	yych = *++cur;
	switch (yych) {
		case '\n': goto yy4;
		default: goto yy6;
	}
yy6:
#line 104 "tokenizer_template.cpp"
	{ return Token::UNRECOGNIZED; }
#line 144 "tokenizer.cc"
yy7:
	yyaccept = 0;
	yych = *(mar = ++cur);
	switch (yych) {
		case '\n':
		case '\r': goto yy6;
		default: goto yy14;
	}
yy8:
	yych = *++cur;
	switch (yych) {
		case '.': goto yy10;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy11;
		default: goto yy2;
	}
yy9:
	++cur;
#line 98 "tokenizer_template.cpp"
	{ return Token::SEP_COLUMN; }
#line 173 "tokenizer.cc"
yy10:
	yych = *++cur;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy18;
		default: goto yy2;
	}
yy11:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '\n':
		case '\r':
		case '"':
		case ',': goto yy12;
		case '.': goto yy10;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy11;
		case 'E':
		case 'e': goto yy20;
		default: goto yy1;
	}
yy12:
#line 100 "tokenizer_template.cpp"
	{ return Token::INTEGER; }
#line 216 "tokenizer.cc"
yy13:
	++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
yy14:
	switch (yych) {
		case '\n':
		case '\r': goto yy15;
		case '"': goto yy16;
		default: goto yy13;
	}
yy15:
	cur = mar;
	if (yyaccept == 0) goto yy6;
	else goto yy17;
yy16:
	yyaccept = 1;
	mar = ++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '"': goto yy13;
		default: goto yy17;
	}
yy17:
#line 99 "tokenizer_template.cpp"
	{ return Token::STRING; }
#line 244 "tokenizer.cc"
yy18:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '\n':
		case '\r':
		case '"':
		case ',': goto yy19;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy18;
		case 'E':
		case 'e': goto yy20;
		default: goto yy1;
	}
yy19:
#line 101 "tokenizer_template.cpp"
	{ return Token::FLOAT; }
#line 271 "tokenizer.cc"
yy20:
	yych = *++cur;
	switch (yych) {
		case '+':
		case '-': goto yy21;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy22;
		default: goto yy2;
	}
yy21:
	yych = *++cur;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy22;
		default: goto yy2;
	}
yy22:
	++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '\n':
		case '\r':
		case '"':
		case ',': goto yy19;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy22;
		default: goto yy1;
	}
}
#line 105 "tokenizer_template.cpp"

    return Token::END_OF_FILE;
}
