/* Generated by re2c 4.1 on Thu Feb 20 15:10:53 2025 */
#line 1 "tokenizer_template.cpp"
// re2c tokenizer_template.cpp -o tokenizer.cc

#include "tokenizer.h"
#include <cstring>
#include <fstream>


#line 11 "tokenizer.cc"
#define YYMAXFILL 5
#line 8 "tokenizer_template.cpp"

constexpr size_t XMLTokenizer_SIZE = 1024 * 1024 * 64;

using namespace Import::Rdf::XML;

XMLTokenizer::XMLTokenizer() :
    _str (new char[XMLTokenizer_SIZE + YYMAXFILL]),
    buf  (new char[XMLTokenizer_SIZE + YYMAXFILL])
{ }

XMLTokenizer::~XMLTokenizer() {
    delete[] str;
    delete[] buf;
}

void XMLTokenizer::begin(MDBIstream& in) {
    this->in = &in;
    eof = false;
    lim = buf + XMLTokenizer_SIZE;
    cur = lim;
    mar = lim;
    token_start = lim;
}

bool XMLTokenizer::fill(size_t need)
{
    if (eof)
        return false;

    const size_t free = token_start - buf;
    if (free < need)
        return false;

    if (free + (lim - cur) < need)
        return false;

    memmove(buf, token_start, lim - token_start);
    lim -= free;
    cur -= free;
    mar -= free;
    token_start -= free;

    auto r = in->read(lim, free);
    lim += r;

    if (lim < buf + XMLTokenizer_SIZE) {
        if (r == 0)
            return false;
        eof = true;
        memset(lim, 9, YYMAXFILL);
        lim += YYMAXFILL - 1;
    }
    return true;
}

Token XMLTokenizer::get_token() {
    auto res = _get_token();
    str_len = cur - token_start;

    std::memcpy(_str, token_start, str_len);
    _str[str_len] = '\0';
    str = _str;
    return res;
}

Token XMLTokenizer::_get_token() {
    token_start = cur;
    
#line 82 "tokenizer.cc"
{
	char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 5) if (!fill(5)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '\t':
		case '\r':
		case ' ': goto yy3;
		case '\n': goto yy5;
		case '<': goto yy6;
		default: goto yy1;
	}
yy1:
	yyaccept = 0;
	mar = ++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '\t':
		case '\r':
		case ' ': goto yy8;
		case '\n':
		case '<': goto yy2;
		default: goto yy1;
	}
yy2:
#line 98 "tokenizer_template.cpp"
	{ return Token::TAG_CONTENT; }
#line 112 "tokenizer.cc"
yy3:
	++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '\t':
		case '\r':
		case ' ': goto yy3;
		case '\n':
		case '<': goto yy4;
		default: goto yy1;
	}
yy4:
#line 99 "tokenizer_template.cpp"
	{ return Token::WHITESPACE; }
#line 128 "tokenizer.cc"
yy5:
	++cur;
#line 100 "tokenizer_template.cpp"
	{ return Token::ENDLINE; }
#line 133 "tokenizer.cc"
yy6:
	yyaccept = 1;
	yych = *(mar = ++cur);
	switch (yych) {
		case '!': goto yy12;
		case '/': goto yy13;
		case '>': goto yy7;
		case '?': goto yy14;
		default: goto yy10;
	}
yy7:
#line 101 "tokenizer_template.cpp"
	{ return Token::UNRECOGNIZED; }
#line 147 "tokenizer.cc"
yy8:
	++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '\t':
		case '\r':
		case ' ': goto yy8;
		case '\n':
		case '<': goto yy9;
		default: goto yy1;
	}
yy9:
	cur = mar;
	switch (yyaccept) {
		case 0: goto yy2;
		case 1: goto yy7;
		case 2: goto yy17;
		default: goto yy25;
	}
yy10:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) return Token::END_OF_FILE;
	yych = *cur;
yy11:
	switch (yych) {
		case '/': goto yy15;
		case '>': goto yy16;
		default: goto yy10;
	}
yy12:
	yych = *++cur;
	switch (yych) {
		case '-': goto yy18;
		default: goto yy11;
	}
yy13:
	yych = *++cur;
	switch (yych) {
		case '>': goto yy9;
		default: goto yy19;
	}
yy14:
	++cur;
	if ((lim - cur) < 4) if (!fill(4)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '/': goto yy20;
		case '>': goto yy21;
		case '?': goto yy22;
		default: goto yy14;
	}
yy15:
	yych = *++cur;
	switch (yych) {
		case '>': goto yy24;
		default: goto yy23;
	}
yy16:
	++cur;
yy17:
#line 97 "tokenizer_template.cpp"
	{ return Token::OPENING_TAG; }
#line 211 "tokenizer.cc"
yy18:
	yych = *++cur;
	switch (yych) {
		case '-': goto yy26;
		default: goto yy11;
	}
yy19:
	++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '>': goto yy27;
		default: goto yy19;
	}
yy20:
	yych = *++cur;
	switch (yych) {
		case '>': goto yy30;
		default: goto yy29;
	}
yy21:
	yyaccept = 2;
	yych = *(mar = ++cur);
	goto yy33;
yy22:
	yych = *++cur;
	switch (yych) {
		case '>': goto yy35;
		default: goto yy11;
	}
yy23:
	++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '>': goto yy16;
		default: goto yy23;
	}
yy24:
	++cur;
yy25:
#line 94 "tokenizer_template.cpp"
	{ return Token::SELF_CLOSING_TAG; }
#line 255 "tokenizer.cc"
yy26:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '-': goto yy36;
		case '/': goto yy37;
		case '>': goto yy38;
		default: goto yy26;
	}
yy27:
	++cur;
#line 96 "tokenizer_template.cpp"
	{ return Token::CLOSING_TAG; }
#line 270 "tokenizer.cc"
yy28:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) return Token::END_OF_FILE;
	yych = *cur;
yy29:
	switch (yych) {
		case '>': goto yy21;
		case '?': goto yy31;
		default: goto yy28;
	}
yy30:
	yyaccept = 3;
	yych = *(mar = ++cur);
	goto yy33;
yy31:
	yych = *++cur;
	switch (yych) {
		case '>': goto yy35;
		default: goto yy23;
	}
yy32:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) return Token::END_OF_FILE;
	yych = *cur;
yy33:
	switch (yych) {
		case '?': goto yy34;
		default: goto yy32;
	}
yy34:
	yych = *++cur;
	switch (yych) {
		case '>': goto yy35;
		default: goto yy9;
	}
yy35:
	++cur;
#line 95 "tokenizer_template.cpp"
	{ return Token::XML_METADATA; }
#line 310 "tokenizer.cc"
yy36:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '-': goto yy39;
		case '/': goto yy37;
		case '>': goto yy16;
		default: goto yy26;
	}
yy37:
	yych = *++cur;
	switch (yych) {
		case '>': goto yy43;
		default: goto yy41;
	}
yy38:
	yyaccept = 2;
	yych = *(mar = ++cur);
	goto yy45;
yy39:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '/': goto yy37;
		case '>': goto yy47;
		default: goto yy26;
	}
yy40:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) return Token::END_OF_FILE;
	yych = *cur;
yy41:
	switch (yych) {
		case '-': goto yy42;
		case '>': goto yy38;
		default: goto yy40;
	}
yy42:
	++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '-': goto yy48;
		case '>': goto yy16;
		default: goto yy40;
	}
yy43:
	yyaccept = 3;
	yych = *(mar = ++cur);
	goto yy45;
yy44:
	++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
yy45:
	switch (yych) {
		case '-': goto yy46;
		default: goto yy44;
	}
yy46:
	++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '-': goto yy49;
		case '>': goto yy9;
		default: goto yy44;
	}
yy47:
	++cur;
#line 93 "tokenizer_template.cpp"
	{ return Token::COMMENT; }
#line 385 "tokenizer.cc"
yy48:
	++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '>': goto yy47;
		default: goto yy40;
	}
yy49:
	++cur;
	if (lim <= cur) if (!fill(1)) return Token::END_OF_FILE;
	yych = *cur;
	switch (yych) {
		case '>': goto yy47;
		default: goto yy44;
	}
}
#line 102 "tokenizer_template.cpp"

    return Token::END_OF_FILE;
}
