#pragma once

#include <cstdint>

#include "graph_models/object_id.h"
#include "storage/file_id.h"
#include "storage/page/versioned_page.h"


class LSHTree;


/**
 * Page structure:
 * uint64_t num_object_ids
 * uint64_t parent_id
 * uint64_t next_leaf_id
 * ObjectId object_ids[(sizeof(VPage) - 3 * sizeof(uint64_t)) / sizeof(ObjectId)]
 */
class LSHTreeLeaf {
    friend class LSHTree;

public:
    static constexpr auto MAX_OBJECT_IDS = (VPage::SIZE - 3 * sizeof(uint64_t)) / sizeof(ObjectId);

    LSHTreeLeaf() noexcept;

    explicit LSHTreeLeaf(VPage* page) noexcept;

    LSHTreeLeaf(const LSHTreeLeaf& other) = delete;
    LSHTreeLeaf& operator=(const LSHTreeLeaf& other) = delete;

    LSHTreeLeaf(LSHTreeLeaf&& other) noexcept;
    LSHTreeLeaf& operator=(LSHTreeLeaf&& other) noexcept;

    ~LSHTreeLeaf();

    // Returns index of the element if found, otherwise returns -1
    int_fast32_t find(ObjectId object_id) const;

    // Insert a new object_id keeping the order
    void add(ObjectId object_id);

    // Remove element at index, then shift elements to the left keeping the order
    void erase(std::size_t index);

    bool full() const;

    void upgrade_to_editable();

private:
    uint64_t* num_object_ids;
    uint64_t* parent_id;
    uint64_t* next_leaf_id;
    ObjectId* object_ids;

    VPage* page;
    FileId leaf_file_id;
};
